{"created":"2019-07-21T14:43:18.579782Z","extra":{"kind":"study","sourceInputsCount":1},"lastVersionMaj":"3.0","scriptAccess":"open_no_auth","scriptName":"Volume Profile Free Ultra SLI by RRB","source":"//@version=4\r\nstudy(\"Volume Profile Free Ultra SLI by RRB\", shorttitle=\"VolumeProfileFree_Ultra_RRB\", overlay=true)\r\n\r\n// Volume Profile Free Ultra SLI by RagingRocketBull 2019\r\n// Version 3.0\r\n//\r\n// Changes in ver 3.0:\r\n//\r\n// Features:\r\n// - Custom color for line object levels\r\n//\r\n// WARNING: \r\n// - Compilation Time: 1 min 30 sec\r\n// - This indicator is packed to the max and barely fits Pinescript's limits of max 1000 vars per script and max 50K for the compiled code size\r\n// - This script has exactly 50K compiled code size, uses max 50 line objects, uses max 64 plot outputs and ~700 of max 1000 vars\r\n// - Adding more features is not possible. It takes a lot of work to even make it compile. Please see comments on tips how to shave off a few bytes here and there.\r\n//\r\n// Changes in ver 2.0:\r\n//\r\n// Features:\r\n// - Internal Buy/Sell mode using max 2x50 levels. You don't have to use SLI now\r\n//\r\n// Internal Buy/Sell mode lets you view 2x50 Buy/Sell Levels at the same time:\r\n//   - when num_levels > 50 => num_levels/2 are used, otherwise num_levels are used as buy/sell levels\r\n//   - volume type total: line = sell, plot = total => line objects appear as red sell levels on top of blue total plot levels (overlapping)\r\n//   - volume type buy: line = buy, plot = total => line objects appear as green buy levels on top of blue total plot levels (overlapping)\r\n//   - volume type sell: line = sell, plot = buy => line objects appear as red sell levels extending blue buy plot levels from the edge (no overlapping)\r\n// \r\n// WARNING: \r\n// - Compilation Time: 1 min 30 sec\r\n// - This indicator is packed to the max and barely fits Pinescript's limits of max 1000 vars per script\r\n//\r\n// --------------------------------\r\n//\r\n// This indicator calculates Volume Profile for a given range and shows it as a histogram consisting of 100 horizontal bars.\r\n// This is basically the MAX SLI version with +50 more Pinescript v4 line objects added as levels.\r\n// It can also show Point of Control (POC), Developing POC, Value Area/VWAP StdDev High/Low as dynamically moving levels.\r\n// Free accounts can't access Standard TradingView Volume Profile, hence this indicator. \r\n//\r\n// There are several versions: Free Pro, Free MAX SLI, Free Ultra SLI, Free History. This is the Free Ultra SLI version. The Differences are listed below:\r\n// - Free Pro: 25 levels, +Developing POC, Value Area/VWAP High/Low Levels, Above/Below Area Dimming\r\n// - Free MAX SLI: 50 levels, 2x SLI modes for Buy/Sell or even higher res 150 levels\r\n// - Free Ultra SLI: 100 levels, packed to the limit, 2x SLI modes for Buy/Sell or even higher res 300 levels, internal Buy/Sell mode 2x50 levels\r\n// - Free History: auto highest/lowest, historic poc/va levels for each session\r\n//\r\n// Features:\r\n// - High-Res Volume Profile with up to 100 levels (line implementation)\r\n// - Internal Buy/Sell mode using max 2x50 levels\r\n// - 2x SLI modes for even higher res: 300 levels with 3x vertical SLI, 100 buy/sell levels with 2x horiz SLI\r\n// - Calculate Volume Profile on full history\r\n// - POC, Developing POC Levels\r\n// - Buy/Sell/Total volume modes\r\n// - Side Cover\r\n// - Value Area, VAH/VAL dynamic levels\r\n// - VWAP High/Low dynamic levels with Source, Length, StdDev as params\r\n// - Show/Hide all levels\r\n// - Dim Non Value Area Zones\r\n// - Custom Range with Highlighting\r\n// - 3 Anchor points for Volume Profile\r\n// - Flip Levels Horizontally\r\n// - Adjustable width, offset and spacing of levels\r\n// - Custom Color for POC/VA/VWAP levels, Transparency for buy/sell plot levels, and both Color/Transparency for line objects\r\n// \r\n// Usage:\r\n// - specify max_level/min_level/spacing (required)\r\n// - select range (start_bar, range length), confirm with range highlighting\r\n// - select volume type: Buy/Sell/Total\r\n// - select mode Value Area/VWAP to show corresponding levels\r\n// - flip/select anchor point to position the buy/sell levels\r\n// - use Internal Buy/Sell mode with 2x50 or Horiz Buy/Sell SLI mode with 100 or Vertical SLI with 300 levels if needed\r\n// - use POC/Developing POC/VA/VWAP High/Low as S/R levels. Usually daily values from 1-3 days back are used as levels for the current day.\r\n//\r\n// SLI:\r\n//\r\n// SLI modes extend the functionality of the indicator:\r\n//   - Horiz Buy/Sell 2x SLI lets you view 100 Buy/Sell Levels at the same time\r\n//   - Vertical Max_Vol 3x SLI lets you increase the resolution to 300 levels\r\n//   - you need at least 2 instances of the indicator attached to the same chart for SLI to work\r\n//\r\n// 1) Horiz SLI:\r\n//   - attach 2 indicator instances to the chart\r\n//   - make sure all instances have the same min_level/max_level/range/spacing settings\r\n//   - select volume type for each instance: you can have a buy/sell or buy/total or sell/total SLI. Make sure your buy volume instance is the last attached to be displayed on top of sell/total instances without overlapping.\r\n//   - set buy_sell_sli_mode to true for indicator instances with volume_type = buy/sell, for type total this is optional.\r\n//   - this basically tells the script to calculate % lengths based on total volume instead of individual buy/sell volumes and use ext offset for sell levels\r\n//   - Sell Offset is calculated relative to Buy Offset to stack/extend sell after buy. Buy Offset = Zero - Buy Length. Sell Offset = Buy Offset - Sell Length = Zero - Buy Length - Sell Length\r\n//   - there are no master/slave instances in this mode, all indicators are equal, poc/va levels are not affected and can work independently, i.e. one instance can show va levels, another - vwap.\r\n//\r\n// 2) Vertical SLI:\r\n//   - attach the first instance and evaluate the full range to roughly determine where is the highest max_vol/poc level i.e. 0..20000, poc is in the bottom half (third, middle etc) or\r\n//   - add more instances and split the full vertical range between them, i.e. set min_level/max_level of each corresponding instance to 0..10000, 10000..20000 etc\r\n//   - make sure all instances have the same range/spacing settings\r\n//   - an instance with a subrange containing the poc level of the full range is now your master instance (bottom half). All other instances are slaves, their levels will be calculated based on the max_vol/poc of the master instance instead of local values\r\n//   - set show_max_vol_sli to true for the master instance. for slave instances this is optional and can be used to check if master/slave max_vol values match and slave can read the master's value. This simply plots the max_vol value\r\n//   - you can also attach all instances and set show_max_vol_sli to true in all of them - the instance with the largest max_vol should become the master\r\n//\r\n//   Auto/Manual Ext Max_Vol Modes:\r\n//   - for auto vertical max_vol SLI mode set max_vol_sli_src in all slave instances to the max_vol of the master indicator: \"VolumeProfileFree_MAX_RRB: Max Volume for Vertical SLI Mode\". It can be tricky with 2+ instances\r\n//   - in case auto SLI mode doesn't work - assign max_vol_sli_ext in all slave instances the max_vol value of the master indicator manually and repeat on each change\r\n//   - manual override max_vol_sli_ext has higher priority than auto max_vol_sli_src when both values are assigned, when they are 0 and close respectively - SLI is disabled\r\n//   - master/slave max_vol values must match on each bar at all times to maintain proper level scale, otherwise slave's levels will look larger than they should relative to the master's levels. \r\n//   - Max_vol (red) is the last param in the long list of indicator outputs\r\n//   - the only true max_vol/poc in this SLI mode is the master's max_vol/poc. All poc/va levels in slaves will be irrelevant and are disabled automatically. Slaves can only show VWAP levels.\r\n//   - VA Levels of the master instance in this SLI mode are calculated based on the subrange, not the whole range and may be inaccurate. Cross check with the full range.\r\n//\r\n//   WARNING! \r\n//   - auto mode max_vol_sli_src is experimental and may not work as expected\r\n//   - you can only assign auto mode max_vol_sli_src = max_vol once due to some bug with unhandled exception/buffer overflow in Tradingview. Seems that you can clear the value only by removing the indicator instance\r\n//   - sometimes you may see a \"study in error state\" error when attempting to set it back to close. Remove indicator/Reload chart and start from scratch\r\n//   - volume profile may not finish to redraw and freeze in an ugly shape after an UI parameter change when max_vol_sli_src is assigned a max_vol value. Assign it to close - VP should redraw properly, but it may not clear the assigned max_vol value\r\n//   - you can't seem to be able to assign a proper auto max_vol value to the 3rd slave instance\r\n//   - 2x Vertical SLI works and tested in both auto/manual, 3x SLI - only manual seems to work (you can have a mixed mode: 2nd instance - auto, 3rd - manual)\r\n//\r\n//\r\n// Notes:\r\n// - This code uses Pinescript v3 compatibility framework\r\n// - This code is more like 5-10x faster (main for cycle is removed) especially on lower tfs with long history - only 4-10 sec load/redraw time vs 30-60 sec of the old Pro versions\r\n// - Instead of repeatedly calculating the total sum of volumes for the whole range on each bar, vol sums are now increased on each bar and passed to the next in the range making it a per range vs per bar calculation that reduces time dramatically\r\n// - 100 levels consist of 50 main plot levels and 50 line objects used as alternate levels, differences are:\r\n//   - line objects are always shown on top of other objects, such as plot levels, zero line and side cover, it's not possible to cover/move them below.\r\n//   - all line objects have variable lengths, use actual x,y coords and don't need side cover, while all plot levels have a fixed length of 100 bars, use offset and require cover.\r\n//   - all key properties of line objects, such as x,y coords, color can be modified, objects can be moved/deleted, while this is not possible for static plot levels.\r\n//   - large width values cause line objects to expand only up/down from center while their length remains the same and stays within the level's start/end points similar to an area style.\r\n//   - large width values make plot levels expand in all directions (both h/v), beyond level start/end points, sometimes overlapping zero line, making them an inaccurate % length representation, as opposed to line objects/plot levels with area style.\r\n//   - large width values translate into different widths on screen for line objects and plot levels.\r\n//   - you can't compensate for this unwanted horiz width expansion of plot levels because width uses its own units, that don't translate into bars/pixels.\r\n//   - line objects are visible when num_levels > 50 or in the Internal Buy/Sell mode, plot levels are used otherwise\r\n// - Since line objects are lines, plot levels also use style line because other style implementations will break the symmetry/spacing between levels.\r\n// - if you don't see a volume profile check range settings: min_level/max_level and spacing, set spacing to 0 (or adjust accordingly based on the symbol's precision, i.e. 0.00001)\r\n// - you can view either 100 levels with Total volumes or 2x50 levels with Buy/Sell volumes. Use 2 indicator instances in Horiz Buy/Sell SLI mode for 2x100 levels.\r\n// - Volume Profile/Value Area are calculated for a given range and updated on each bar. Each level has a fixed length. Offsets control visible level parts. Side Cover hides the invisible parts.\r\n// - Custom Color for POC/VA/VWAP levels - UI Style color/transparency can only change shape's color and doesn't affect textcolor, hence this additional option\r\n// - Custom Width - UI Style supports only width <= 4, hence this additional option\r\n// - POC is visible in both modes. In VWAP mode Developing POC becomes VWAP, VA High and Low => VWAP High and Low correspondingly to minimize the number of plot outputs\r\n// - You can't change buy/sell plot level colors from input (only plot transparency) - this requires 2x plot outputs => 2x reduces the number of levels to fit the max 64 limit. That's why 2 additional plots are used to dim the non Value Area zones\r\n// - You can change level color/transparency of line objects. Due to Pinescript limitations, only discrete values are supported.\r\n// - Inverse transp correlation creates the necessary illusion of \"covered\" line objects, although they are shown on top of the cover all the time\r\n// - If custom lines_transp is set the illusion will break because transp range can't be skewed easily (i.e. transp 0..100 is always mapped to 100..0 and can't be mapped to 50..0)\r\n// - transparency can be applied to lines dynamically but nva top zone can't be completely removed because plot/mixed type of levels are still used when num_levels < 50 and require cover\r\n// - transparency can't be applied to plot levels dynamically from script this can be done only once from UI, and you can't change plot color for the past length bars\r\n// - All buy/sell volume lengths are calculated as % of a fixed base width = 100 bars (100%). You can't set show_last from input to change it\r\n// - Range selection/Anchoring is not accurate on charts with time gaps since you can only anchor from a point in the future and measure distance in time periods, not actual bars, and there's no way of knowing the number of future gaps in advance.\r\n// - Adjust Width for Log Scale mode now also works on high precision charts with small prices (i.e. 0.00001)\r\n// - in Adjust Width for Log Scale mode Level1 width extremes can be capped using max deviation (when level1 = 0, shift = 0 width becomes infinite)\r\n// - There's no such thing as buy/sell volume, there's just volume, but for the purposes of the Volume Profile method, assume: bull candle = buy volume, bear candle = sell volume\r\n//\r\n//\r\n// P.S. I am your grandfather, Luke! Now, join the Dark Side in your father's steps or be destroyed! Once more the Sith will rule the Galaxy, and we shall have peace...\r\n\r\n// Links on Volume Profile and Value Area calculation and usage:\r\n// https://www.tradingview.com/wiki/Volume_Profile\r\n// https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:volume_by_price\r\n// https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781118659724.app1\r\n//\r\n// More Scripts:\r\n// https://www.tradingview.com/u/RagingRocketBull/\r\n//\r\n\r\n// ================================================================================================================\r\n\r\n// Pinescript v3 Compatibility Framework\r\n\r\n// This code makes most v3 scripts work in v4 with only a few minor changes below. Place this code before the first input statement\r\n// some lines are commented out to minimize the total number of vars used <= max 1000 vars limit\r\n\r\n// Input types\r\n\r\n// types can't be var names hence _\r\nbool_ = input.bool\r\ninteger_ = input.integer\r\nfloat_ = input.float\r\nstring_ = input.string\r\n\r\n// resolution = input.resolution\r\n// session = input.session\r\nsource = input.source\r\n// symbol = input.symbol\r\n// doesn't work\r\n// color_ = input.color\r\n\r\n// Styles\r\n\r\n// plot styles\r\n// line can't be a var name\r\nlines = plot.style_line\r\n// linebr = plot.style_linebr\r\n// stepline  = plot.style_stepline \r\nhistogram = plot.style_histogram\r\n// cross = plot.style_cross\r\narea = plot.style_area\r\n// areabr = plot.style_areabr\r\n// columns = plot.style_columns\r\n// circles = plot.style_circles\r\n\r\n// hline styles\r\n// solid = hline.style_solid\r\n// dotted = hline.style_dotted\r\n// dashed = hline.style_dashed\r\n\r\n// Colors\r\naqua = color.aqua\r\nblack = color.black\r\nblue = color.blue\r\nfuchsia = color.fuchsia\r\ngray = color.gray\r\ngreen = color.green\r\nlime = color.lime\r\nmaroon = color.maroon\r\nnavy = color.navy\r\nolive = color.olive\r\norange = color.orange\r\npurple = color.purple\r\nred = color.red \r\nsilver = color.silver\r\nteal = color.teal\r\nwhite = color.white\r\nyellow = color.yellow\r\n\r\n// doesn't work\r\n// color can't be a var name error, transp can't be int must be const, const param becomes int var\r\n// color_(col, transp) => \r\n//     color.new(col, transp)\r\n\r\n// Days\r\n// monday  = dayofweek.monday \r\n// tuesday = dayofweek.tuesday\r\n// wednesday = dayofweek.wednesday\r\n// thursday  = dayofweek.thursday \r\n// friday = dayofweek.friday\r\n// saturday  = dayofweek.saturday \r\n// sunday = dayofweek.sunday\r\n\r\n// Timeframe\r\ninterval = timeframe.multiplier\r\nperiod = timeframe.period\r\nisintraday = timeframe.isintraday\r\nisdaily = timeframe.isdaily\r\nisweekly = timeframe.isweekly\r\nismonthly = timeframe.ismonthly\r\n// isdwm = timeframe.isdwm\r\n\r\n// Ticker\r\n// ticker = syminfo.ticker\r\n// tickerid = syminfo.tickerid\r\n\r\n// Bar index\r\nn = bar_index\r\n\r\n\r\n// ================================================================================================================\r\n// Inputs\r\n// ================================================================================================================\r\n\r\n// Show/Hide Flags\r\nshow_levels = input(true, type=bool_, title=\"Show Plot Levels\")\r\nshow_lines = input(true, type=bool_, title=\"Show Alternate Levels\")\r\nshow_zero = input(true, type=bool_, title=\"Show Zero Line\")\r\nshow_poc = input(true, type=bool_, title=\"Show POC Level\")\r\nshow_poc2 = input(true, type=bool_, title=\"Show Developing POC/VWAP Level\")\r\nshow_va = input(true, type=bool_, title=\"Show Value Area/VWAP High/Low Levels\")\r\nshow_cover = input(true, type=bool_, title=\"Show Side Cover\")\r\ndim_nva_zones = input(false, type=bool_, title=\"Dim Non Value Area Zones\")\r\nflip_levels = input(false, type=bool_, title=\"Flip Levels Horizontally\")\r\n// highlight_bars = input(false, type=bool_, title=\"Highlight Range Bars\")\r\nhighlight_background = input(false, type=bool_, title=\"Highlight Range Background\")\r\nadjust_width = input(false, type=bool_, title=\"Adjust Level Width for Log Scale\")\r\n\r\n// SLI\r\n// internal buy/sell mode (when num_levels > 50 uses num_levels/2, otherwise num_levels as buy/sell levels)\r\nbuy_sell_mode = input(false, type=bool_, title=\"Horizontal Buy/Sell Mode (Num Levels/2)\")\r\n// for horiz buy/sell SLI mode: set to true for indicator instances with volume_type = buy/sell, for type total - optional\r\nbuy_sell_sli_mode = input(false, type=bool_, title=\"Horizontal Buy/Sell SLI Mode (Master/Slave)\")\r\n// enables vertical max_vol SLI mode in the master indicator instance, for slave instances - optional (to check if master/slave max_vol values match)\r\nshow_max_vol_sli = input(false, type=bool_, title=\"Vertical Max Volume SLI Mode (Master Only)\")\r\n// for auto vertical max_vol SLI mode set in all slave instances to the max_vol of the master indicator: \"VolumeProfileFree_MAX_RRB: Max Volume for Vertical SLI Mode\"\r\nmax_vol_sli_src = input(close, type=source, title=\"Auto Ext Max Volume Override (Vertical SLI Mode Slave Only, Close - Disabled)\")\r\n// in case auto SLI mode doesn't work - assign all slave instances the max_vol value of the master indicator manually and repeat on each change\r\nmax_vol_sli_ext = input(0, type=float_, minval=0, title=\"Manual Ext Max Volume Override (Vertical SLI Mode Slave Only, 0 - Disabled)\")\r\n\r\n// Levels, Range\r\nnum_levels_ = input(100, type=integer_, minval=0, maxval=100, title=\"Num Levels [0..100]\")\r\nmax_level = input(1000, type=float_, minval=0, title=\"Max Price Level\")\r\nmin_level = input(0, type=float_, minval=0, title=\"Min Price Level\")\r\nspacing = input(10, type=float_, minval=0, title=\"Vertical Spacing\")\r\nrange = input(1000, type=integer_, minval=0, title=\"VP Range Length (0 - All History)\")\r\nstart_bar = input(0, type=integer_, minval=0, title=\"VP Range Start Bar (0-Based)\")\r\n\r\n// Value Area & VWAP\r\nlevels_mode = input(\"va\", type=string_, title=\"Value Area/VWAP Mode\", options=[\"va\", \"vwap\"])\r\nvolume_type = input(\"total\", type=string_, title=\"Volume Type Buy/Sell/Total\", options=[\"buy\", \"sell\", \"total\"])\r\n// there can only be 1 input type=source for ext sources to show up in the source dropdown for max vol SLI mode to work (max_vol_sli_src) - using string_ inputs for the 2nd and all subsequent sources instead\r\n// vp_src = input(close, type=source, title=\"Volume Profile Source\")\r\n// vwap_src = input(hlc3, type=source, title=\"VWAP Source\")\r\nvp_src_str = input(\"close\", type=string_, title=\"Volume Profile Source\", options=[\"open\", \"high\", \"low\", \"close\", \"hl2\", \"hlc3\", \"ohlc4\"])\r\nvwap_src_str = input(\"hlc3\", type=string_, title=\"VWAP Source\", options=[\"open\", \"high\", \"low\", \"close\", \"hl2\", \"hlc3\", \"ohlc4\"])\r\nvwap_len = input(100, type=integer_, minval=1, title=\"VWAP Length\")\r\nstddev = input(2, type=float_, minval=0.1, title=\"VWAP Standard Deviation\")\r\nva_percent = input(70, type=float_, minval=0, maxval=100, title=\"Value Area % Of Total Volume\")\r\n\r\n// Offset & Width\r\nanchor = input(\"cur bar\", type=string_, title=\"Zero Line Anchor Point\", options=[\"cur bar\", \"range start\", \"range end\"])\r\nzero_offset = input(80, type=integer_, title=\"Zero Line Offset\")\r\nadj_zero_offset = input(0, type=integer_, title=\"Zero Line Offset Adjustment (Depending on Scale)\")\r\ncover_offset = input(0, type=integer_, title=\"Cover Offset (Relative to Zero Line)\")\r\npoc_offset = input(-40, type=integer_, title=\"POC Line Offset (Relative to Zero Line)\")\r\nva_offset = input(-40, type=integer_, title=\"VA High/Low Lines Offset (Relative to Zero Line)\")\r\n// compensate level price for large width outline, % of step h\r\n// important! either level_shift or 100.0 must be float otherwise level_shift/100 => integer 0 instead of 0.5! => width1 = 0, level1 shows with default tiny width=1\r\nlevel_shift = input(50, type=float_, minval=0, maxval=100, title=\"Level Vertical Shift % (50% - middle)\")\r\n// you can only set width <= 4 in UI, hence these boxes allowing for larger values\r\n// levels appear more solid with larger values (30-50) but this results in misalignment (especially when zoomed out) due to extreme bar thickness and requires micro adjustment of zero/cover offset depending on scale\r\n// histogram becomes so thick that left sides of both side cover and zero levels (length = 0) are pushed beyond the zero line boundary which is not desirable\r\n// 12 is the optimal level density for a solid look on both large/small zoom scales, higher values require micro adjustment when zoomed out\r\nline_width = input(12, type=integer_, title=\"Level Width\")\r\n// line_width is used for normal scale and line_width * width_multiplier for log scale, so that you can switch without adjusting each time\r\nwidth_multiplier = input(200, type=float_, minval=0, title=\"Level Width Multiplier (Log Scale)\")\r\n// in adjust width for log scale mode when level1 = 0 (shift = 0) line_width1 = log(0) = na => disappears/becomes infinite and is assigned line_width2 * max_deviation instead\r\nmax_deviation = input(2, type=float_, minval=0, title=\"Max Level Width Deviation (Log Scale)\")\r\nzero_width = input(2, type=integer_, title=\"Zero Line Width\")\r\n// compensate for large width outline - cover additional area above/below, N = step h\r\ncover_ext_height = input(2, type=integer_, title=\"Extend Cover by N Levels Up/Down/Right\")\r\n\r\n// Level Colors & Transparency\r\nlevel_transp = input(40, type=integer_, minval=0, maxval=100, title=\"Plot Level Transparency [0..100]\")\r\n// custom color transparency uses only discrete values forced by options, can't be done by step=10\r\nlines_transp = input(40, type=integer_, minval=0, maxval=100, title=\"Alternate Level Transparency [0..100], step 10\", options=[0,10,20,30,40,50,60,70,80,90,100])\r\nnva_transp = input(20, type=integer_, minval=0, maxval=100, title=\"Non Value Area Level Transparency [0..100], step 10\", options=[0,10,20,30,40,50,60,70,80,90,100])\r\nlines_col_str = input(\"\", type=string_, title=\"Alternate Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\npoc_col_str = input(\"\", type=string_, title=\"POC Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\npoc2_col_str = input(\"\", type=string_, title=\"Developing POC Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\nva_high_col_str = input(\"\", type=string_, title=\"VA High Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\nva_low_col_str = input(\"\", type=string_, title=\"VA Low Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\nvwap_col_str = input(\"\", type=string_, title=\"VWAP Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\nvwap_high_col_str = input(\"\", type=string_, title=\"VWAP High Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\nvwap_low_col_str = input(\"\", type=string_, title=\"VWAP Low Level Color\", options=[\"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"])\r\n\r\n\r\n// Const\r\n\r\n// Colors\r\n\r\n// #0D68AF - default VPVR blue, #C18E24 - default VPVR yellow\r\nlevel_color = #0D68AF // blue // teal // color(blue,90)\r\n// lines_color = color.new(#0D68AF, 40)\r\ntotal_color = color.new(#0D68AF, 40)\r\nbuy_color = green // color(green,90)\r\nsell_color = red // color(red,90)\r\nrange_bg_color = color.new(aqua,80)\r\nrange_bar_color = yellow\r\n\r\npoc_color = black\r\npoc2_color = silver\r\nva_high_color = red\r\nva_low_color = green\r\nvwap_color = orange\r\nvwap_high_color = fuchsia\r\nvwap_low_color = lime\r\nzero_color = black\r\n\r\n// color(white,80) transparency doesn't affect textcolor, plotshape transp=20 does\r\nnva_zone_color = white\r\ncover_color = white\r\n\r\n// base width for buy/sell level length calculation: 100% length = 100 bars\r\n// you can't set plot show_last from input or dynamically from script - must be constant. Change/recompile if needed.\r\nlength = 100\r\next_length = 50\r\n\r\n// since line objects have a fixed style lines this style is also used for plot levels to make all levels look/behave similarly\r\nlevel_style = lines\r\n\r\n\r\n// POC/VWAP Level Strings\r\n\r\npoc_text = \"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\" // monospaced font - occupies less width\r\ntext_under = \"____________________________________________________________________________________________\"\r\ntext_upper = \"‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\" // same width as text_under\r\n\r\n// 26 lines = num_levels - should cover all 26 levels in a given dir (depends on scale)\r\n// characters use their own units, their height depends on scale, so it is not possible to cover non va areas completely\r\n// in Pinescript v4 dots (.) or spaces at start/end are required or the whole \\n string will be discarded as empty with only the first line visible\r\nline_block = \".\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n.\"\r\n\r\n// VA mode 1 - lines\r\nva_high1_text = text_under\r\nva_low1_text = text_under\r\n\r\n// VA mode 2 - zones\r\nva_high2_text = line_block + text_under\r\nva_low2_text = text_upper + line_block\r\n\r\n// level_text1 = \"____________________________________________________________________________________________\"\r\n// level_text2 = \"___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ _ ___ \"\r\n// level_text3 = \"__ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ ι ___ \" // uses unicode char\r\n\r\n\r\n// ================================================================================================================\r\n// Functions\r\n// ================================================================================================================\r\n\r\n// working - not for highest/highestbars/security\r\n// cast series to int\r\nto_int(val) =>\r\n    k = 0\r\n    p = 0 // 0.0\r\n    d = 0.0 // can't be 0 int => can't assign series to int error\r\n    pow = 1\r\n    // for i = floor(val) to round(val)\r\n    // for i = 1 to round(val)\r\n    s = val\r\n    for i = 0 to 9\r\n        // get last digit\r\n        d := s % 10 // s - floor(s/10)*10\r\n        // k := k + 1 can't be inside if => series\r\n        // if s > 0\r\n        k := -1\r\n        for j = 0 to 9\r\n            k := k + 1\r\n            if j == d\r\n                break\r\n\r\n        pow := 1\r\n        if i > 0\r\n            for m = 0 to i-1\r\n                pow := 10 * pow\r\n        \r\n        p := p + k * pow // can't use pow(10, i) => series\r\n        \r\n        s := floor(s/10)        \r\n        if s == 0\r\n            break\r\n    p\r\n\r\n// convert string to color\r\n// - you can set color from input if you cast str to color first\r\n// - str can't be a color literal (i.e. #CC0000) - can't cast string to a # color literal\r\n// - you can't set color_transp color(red, color_transp) from input (must be const), but you can set plot_transp (can be var)\r\n// - this increases plot outputs 1x color => 2x color because color is the result of a cond\r\nget_color(str, def) =>\r\n    // \"\", \"black\", \"silver\", \"gray\", \"white\", \"maroon\", \"red\", \"purple\", \"fuchsia\", \"green\", \"lime\", \"olive\", \"yellow\", \"navy\", \"blue\", \"teal\", \"aqua\", \"orange\"\r\n    get_color = str == \"black\" ? black : str == \"silver\" ? silver : str == \"gray\" ? gray : str == \"white\" ? white : str == \"maroon\" ? maroon : str == \"red\" ? red : \r\n         str == \"purple\" ? purple : str == \"fuchsia\" ? fuchsia : str == \"green\" ? green : str == \"lime\" ? lime : str == \"olive\" ? olive : str == \"yellow\" ? yellow : \r\n             str == \"navy\" ? navy : str == \"blue\" ? blue : str == \"teal\" ? teal : str == \"aqua\" ? aqua : str == \"orange\" ? orange : def\r\n\r\n// set custom transparency for a custom color\r\n// All Hail Hydra! This is the only possible way of doing this \r\n// both color and color_transp in color.new must be constants, can't be integer or function\r\n// redundant code below is required\r\ncolor_tr(col_str, transp) =>\r\n    col = color(na)\r\n\r\n    // Standard Colors\r\n    if col_str == \"buy\"\r\n        col := transp == 0 ? color.new(buy_color, 0) : transp == 10 ? color.new(buy_color, 10) : transp == 20 ? color.new(buy_color, 20) : transp == 30 ? color.new(buy_color, 30) : transp == 40 ? color.new(buy_color, 40) : transp == 50 ? color.new(buy_color, 50) : \r\n             transp == 60 ? color.new(buy_color, 60) : transp == 70 ? color.new(buy_color, 70) : transp == 80 ? color.new(buy_color, 80) : transp == 90 ? color.new(buy_color, 90) : transp == 100 ? color.new(buy_color, 100) : buy_color\r\n\r\n    if col_str == \"sell\"\r\n        col := transp == 0 ? color.new(sell_color, 0) : transp == 10 ? color.new(sell_color, 10) : transp == 20 ? color.new(sell_color, 20) : transp == 30 ? color.new(sell_color, 30) : transp == 40 ? color.new(sell_color, 40) : transp == 50 ? color.new(sell_color, 50) : \r\n             transp == 60 ? color.new(sell_color, 60) : transp == 70 ? color.new(sell_color, 70) : transp == 80 ? color.new(sell_color, 80) : transp == 90 ? color.new(sell_color, 90) : transp == 100 ? color.new(sell_color, 100) : sell_color\r\n\r\n    if col_str == \"total\"\r\n        col := transp == 0 ? color.new(total_color, 0) : transp == 10 ? color.new(total_color, 10) : transp == 20 ? color.new(total_color, 20) : transp == 30 ? color.new(total_color, 30) : transp == 40 ? color.new(total_color, 40) : transp == 50 ? color.new(total_color, 50) : \r\n             transp == 60 ? color.new(total_color, 60) : transp == 70 ? color.new(total_color, 70) : transp == 80 ? color.new(total_color, 80) : transp == 90 ? color.new(total_color, 90) : transp == 100 ? color.new(total_color, 100) : total_color\r\n\r\n\r\n    // Custom Colors\r\n    if col_str == \"aqua\"\r\n        col := transp == 0 ? color.new(aqua, 0) : transp == 10 ? color.new(aqua, 10) : transp == 20 ? color.new(aqua, 20) : transp == 30 ? color.new(aqua, 30) : transp == 40 ? color.new(aqua, 40) : transp == 50 ? color.new(aqua, 50) : \r\n             transp == 60 ? color.new(aqua, 60) : transp == 70 ? color.new(aqua, 70) : transp == 80 ? color.new(aqua, 80) : transp == 90 ? color.new(aqua, 90) : transp == 100 ? color.new(aqua, 100) : aqua\r\n    \r\n    if col_str == \"black\"\r\n        col := transp == 0 ? color.new(black, 0) : transp == 10 ? color.new(black, 10) : transp == 20 ? color.new(black, 20) : transp == 30 ? color.new(black, 30) : transp == 40 ? color.new(black, 40) : transp == 50 ? color.new(black, 50) : \r\n             transp == 60 ? color.new(black, 60) : transp == 70 ? color.new(black, 70) : transp == 80 ? color.new(black, 80) : transp == 90 ? color.new(black, 90) : transp == 100 ? color.new(black, 100) : black\r\n    \r\n    if col_str == \"blue\"\r\n        col := transp == 0 ? color.new(blue, 0) : transp == 10 ? color.new(blue, 10) : transp == 20 ? color.new(blue, 20) : transp == 30 ? color.new(blue, 30) : transp == 40 ? color.new(blue, 40) : transp == 50 ? color.new(blue, 50) : \r\n             transp == 60 ? color.new(blue, 60) : transp == 70 ? color.new(blue, 70) : transp == 80 ? color.new(blue, 80) : transp == 90 ? color.new(blue, 90) : transp == 100 ? color.new(blue, 100) : blue\r\n    \r\n    if col_str == \"fuchsia\"\r\n        col := transp == 0 ? color.new(fuchsia, 0) : transp == 10 ? color.new(fuchsia, 10) : transp == 20 ? color.new(fuchsia, 20) : transp == 30 ? color.new(fuchsia, 30) : transp == 40 ? color.new(fuchsia, 40) : transp == 50 ? color.new(fuchsia, 50) : \r\n             transp == 60 ? color.new(fuchsia, 60) : transp == 70 ? color.new(fuchsia, 70) : transp == 80 ? color.new(fuchsia, 80) : transp == 90 ? color.new(fuchsia, 90) : transp == 100 ? color.new(fuchsia, 100) : fuchsia\r\n    \r\n    if col_str == \"gray\"\r\n        col := transp == 0 ? color.new(gray, 0) : transp == 10 ? color.new(gray, 10) : transp == 20 ? color.new(gray, 20) : transp == 30 ? color.new(gray, 30) : transp == 40 ? color.new(gray, 40) : transp == 50 ? color.new(gray, 50) : \r\n             transp == 60 ? color.new(gray, 60) : transp == 70 ? color.new(gray, 70) : transp == 80 ? color.new(gray, 80) : transp == 90 ? color.new(gray, 90) : transp == 100 ? color.new(gray, 100) : gray\r\n    \r\n    if col_str == \"green\"\r\n        col := transp == 0 ? color.new(green, 0) : transp == 10 ? color.new(green, 10) : transp == 20 ? color.new(green, 20) : transp == 30 ? color.new(green, 30) : transp == 40 ? color.new(green, 40) : transp == 50 ? color.new(green, 50) : \r\n             transp == 60 ? color.new(green, 60) : transp == 70 ? color.new(green, 70) : transp == 80 ? color.new(green, 80) : transp == 90 ? color.new(green, 90) : transp == 100 ? color.new(green, 100) : green\r\n    \r\n    if col_str == \"lime\"\r\n        col := transp == 0 ? color.new(lime, 0) : transp == 10 ? color.new(lime, 10) : transp == 20 ? color.new(lime, 20) : transp == 30 ? color.new(lime, 30) : transp == 40 ? color.new(lime, 40) : transp == 50 ? color.new(lime, 50) : \r\n             transp == 60 ? color.new(lime, 60) : transp == 70 ? color.new(lime, 70) : transp == 80 ? color.new(lime, 80) : transp == 90 ? color.new(lime, 90) : transp == 100 ? color.new(lime, 100) : lime\r\n    \r\n    if col_str == \"maroon\"\r\n        col := transp == 0 ? color.new(maroon, 0) : transp == 10 ? color.new(maroon, 10) : transp == 20 ? color.new(maroon, 20) : transp == 30 ? color.new(maroon, 30) : transp == 40 ? color.new(maroon, 40) : transp == 50 ? color.new(maroon, 50) : \r\n             transp == 60 ? color.new(maroon, 60) : transp == 70 ? color.new(maroon, 70) : transp == 80 ? color.new(maroon, 80) : transp == 90 ? color.new(maroon, 90) : transp == 100 ? color.new(maroon, 100) : maroon\r\n    \r\n    if col_str == \"navy\"\r\n        col := transp == 0 ? color.new(navy, 0) : transp == 10 ? color.new(navy, 10) : transp == 20 ? color.new(navy, 20) : transp == 30 ? color.new(navy, 30) : transp == 40 ? color.new(navy, 40) : transp == 50 ? color.new(navy, 50) : \r\n             transp == 60 ? color.new(navy, 60) : transp == 70 ? color.new(navy, 70) : transp == 80 ? color.new(navy, 80) : transp == 90 ? color.new(navy, 90) : transp == 100 ? color.new(navy, 100) : navy\r\n    \r\n    if col_str == \"olive\"\r\n        col := transp == 0 ? color.new(olive, 0) : transp == 10 ? color.new(olive, 10) : transp == 20 ? color.new(olive, 20) : transp == 30 ? color.new(olive, 30) : transp == 40 ? color.new(olive, 40) : transp == 50 ? color.new(olive, 50) : \r\n             transp == 60 ? color.new(olive, 60) : transp == 70 ? color.new(olive, 70) : transp == 80 ? color.new(olive, 80) : transp == 90 ? color.new(olive, 90) : transp == 100 ? color.new(olive, 100) : olive\r\n    \r\n    if col_str == \"orange\"\r\n        col := transp == 0 ? color.new(orange, 0) : transp == 10 ? color.new(orange, 10) : transp == 20 ? color.new(orange, 20) : transp == 30 ? color.new(orange, 30) : transp == 40 ? color.new(orange, 40) : transp == 50 ? color.new(orange, 50) : \r\n             transp == 60 ? color.new(orange, 60) : transp == 70 ? color.new(orange, 70) : transp == 80 ? color.new(orange, 80) : transp == 90 ? color.new(orange, 90) : transp == 100 ? color.new(orange, 100) : orange\r\n    \r\n    if col_str == \"purple\"\r\n        col := transp == 0 ? color.new(purple, 0) : transp == 10 ? color.new(purple, 10) : transp == 20 ? color.new(purple, 20) : transp == 30 ? color.new(purple, 30) : transp == 40 ? color.new(purple, 40) : transp == 50 ? color.new(purple, 50) : \r\n             transp == 60 ? color.new(purple, 60) : transp == 70 ? color.new(purple, 70) : transp == 80 ? color.new(purple, 80) : transp == 90 ? color.new(purple, 90) : transp == 100 ? color.new(purple, 100) : purple\r\n    \r\n    if col_str == \"red\"\r\n        col := transp == 0 ? color.new(red, 0) : transp == 10 ? color.new(red, 10) : transp == 20 ? color.new(red, 20) : transp == 30 ? color.new(red, 30) : transp == 40 ? color.new(red, 40) : transp == 50 ? color.new(red, 50) : \r\n             transp == 60 ? color.new(red, 60) : transp == 70 ? color.new(red, 70) : transp == 80 ? color.new(red, 80) : transp == 90 ? color.new(red, 90) : transp == 100 ? color.new(red, 100) : red\r\n    \r\n    if col_str == \"silver\"\r\n        col := transp == 0 ? color.new(silver, 0) : transp == 10 ? color.new(silver, 10) : transp == 20 ? color.new(silver, 20) : transp == 30 ? color.new(silver, 30) : transp == 40 ? color.new(silver, 40) : transp == 50 ? color.new(silver, 50) : \r\n             transp == 60 ? color.new(silver, 60) : transp == 70 ? color.new(silver, 70) : transp == 80 ? color.new(silver, 80) : transp == 90 ? color.new(silver, 90) : transp == 100 ? color.new(silver, 100) : silver\r\n    \r\n    if col_str == \"teal\"\r\n        col := transp == 0 ? color.new(teal, 0) : transp == 10 ? color.new(teal, 10) : transp == 20 ? color.new(teal, 20) : transp == 30 ? color.new(teal, 30) : transp == 40 ? color.new(teal, 40) : transp == 50 ? color.new(teal, 50) : \r\n             transp == 60 ? color.new(teal, 60) : transp == 70 ? color.new(teal, 70) : transp == 80 ? color.new(teal, 80) : transp == 90 ? color.new(teal, 90) : transp == 100 ? color.new(teal, 100) : teal\r\n    \r\n    if col_str == \"white\"\r\n        col := transp == 0 ? color.new(white, 0) : transp == 10 ? color.new(white, 10) : transp == 20 ? color.new(white, 20) : transp == 30 ? color.new(white, 30) : transp == 40 ? color.new(white, 40) : transp == 50 ? color.new(white, 50) : \r\n             transp == 60 ? color.new(white, 60) : transp == 70 ? color.new(white, 70) : transp == 80 ? color.new(white, 80) : transp == 90 ? color.new(white, 90) : transp == 100 ? color.new(white, 100) : white\r\n    \r\n    if col_str == \"yellow\"\r\n        col := transp == 0 ? color.new(yellow, 0) : transp == 10 ? color.new(yellow, 10) : transp == 20 ? color.new(yellow, 20) : transp == 30 ? color.new(yellow, 30) : transp == 40 ? color.new(yellow, 40) : transp == 50 ? color.new(yellow, 50) : \r\n             transp == 60 ? color.new(yellow, 60) : transp == 70 ? color.new(yellow, 70) : transp == 80 ? color.new(yellow, 80) : transp == 90 ? color.new(yellow, 90) : transp == 100 ? color.new(yellow, 100) : yellow\r\n\r\n    col\r\n\r\n// extracts source from source str\r\n// moving the code from this particular function into global scope increases the compliled code size by a few bytes instead of decreasing it!\r\nget_src(src_str) =>\r\n    res = src_str == \"open\" ? open : src_str == \"high\" ? high : src_str == \"low\" ? low : src_str == \"close\" ? close : src_str == \"hl2\" ? hl2 : src_str == \"hlc3\" ? hlc3 : src_str == \"ohlc4\" ? ohlc4 : na\r\n\r\n// Converts TF to mins - Respect the 40 Security Calls Limit\r\n// 1. you can't convert timeframe to minutes directly! period returns string, interval - int TF multiplier. You don't have any string processing.\r\n// - you can't use change(time(tf)) because it fails on gaps\r\n// - you must use isdaily, isweekly... etc functions, but they don't have tf arg and only work for current TF, so you must use security on them\r\n// 2. you can only have 40 security calls per script/computation cycle - does not compile, weird errors if exceeded: node from line undefined UP -1\r\n// - you can't have a set of separate is_daily(tf) => security(tickerid, tf, isdaily) ...  functions to call from tf_to_mins - does not compile, function has too many arguments 158 (max limit 100)\r\n// - you can't have a set of direct security calls from from tf_to_mins: is_daily = security(tickerid, tf, isdaily) - does not compile\r\n// - in general, you can't have 2-3 levels deep nested function calls with security. Instead, call security from the global scope cycle or from 1-2 level functions, keep track of all those calls <= 40\r\n// - you must wrap all isdaily functions for current TF in tf_to_mins and then call one function using a single security call from global scope\r\n// moving the code from this particular function into global scope increases the compliled code size by a few bytes instead of decreasing it!\r\ntf_to_mins() =>\r\n    // time_range = 60 * 24 * 30 * 12 // min * hours * days * months\r\n    // isintraday, isdaily, isweekly, ismonthly are mutually exclusive. Only one returns true. isdaily, isweekly, ismonthly return:\r\n    // - true for \"D\", \"2D\", \"4D\" etc - their respective TFs with/without multipliers and \r\n    // - false for 1440 (D), 7D (W), 4W (M) (don't see 1440 as daily, 7D as weekly)\r\n    mins = isintraday ? interval * 1 : 1\r\n    days = isdaily ? interval * 1 * 24 * 60: 1\r\n    weeks = isweekly ? interval * 7 * 24 * 60: 1\r\n    months = ismonthly ? interval * 30 * 24 * 60: 1\r\n    result = mins * days * weeks * months\r\n\r\n// moving the code from a rarely used function back into global scope saves a few bytes\r\n// Compiled script code is too long: 50008. The limit is 50000\r\n// check if price is within bounds\r\n// is_valid(price) =>\r\n//     min_cond = (min_level == 0) or ((min_level > 0) and (min_level <= price))\r\n//     max_cond = (max_level == 0) or ((max_level > 0) and (price <= max_level))\r\n//     res = min_cond and max_cond\r\n\r\n\r\n// ================================================================================================================\r\n// Processing\r\n// ================================================================================================================\r\n\r\n// Sources\r\n// convert src str inputs to sources\r\nvp_src = get_src(vp_src_str)\r\nvwap_src = get_src(vwap_src_str)\r\n\r\n\r\n// Buy Sell Internal Mode\r\n// num_levels = 100 = 2 * 50, where 50 are used for buy, and another 50 - for sell levels\r\n// num_levels can't be mutable := because side cover plot histbase depends on h = f(num_levels)\r\nhalf_levels = num_levels_ <= 50 ? num_levels_ : floor(num_levels_/2)\r\nnum_levels = buy_sell_mode ? half_levels : num_levels_\r\n\r\n// Max Vol SLI Mode check\r\nmax_vol_sli_mode = (max_vol_sli_ext > 0) or (max_vol_sli_src != close)\r\n// get ext max vol value\r\n// manual override has higher priority than auto, 0 and close - disabled\r\nmax_vol_sli = max_vol_sli_ext > 0 ? max_vol_sli_ext : max_vol_sli_src != close ? max_vol_sli_src : 0\r\n\r\n\r\n// Range\r\nbar_range = 1000 * 60 * tf_to_mins() // cur period bar time in millisecs\r\n// cast n to int to prevent can't assign series to int error later\r\n// n - 0-based bar count, total bars = n + 1, first bar offset is always n\r\ntotal_bars = to_int(n)\r\n// start_bar can't exceed total_bars => in this case range starts and ends on the first bar n=0, has length 1 bar\r\n// range can exceed total_bars\r\n// start_bars = min(total_bars, start_bar)\r\n\r\n// if range = 0 (All History) range_bars is always the offset to the first bar n=0 on the chart regardless of start_bar it is applied to cur_bar not start_bar\r\n// range_bars = range == 0 ? max(0, min(total_bars, total_bars - start_bars)) : min(total_bars, start_bars + range - 1)\r\nrange_bars = range == 0 ? total_bars : range\r\n\r\nfirst_bar = range == 0 ? total_bars : start_bar + range  // must not use -1 to include the first bar (start_bar is 0-based)!\r\nfirst_time = first_bar * bar_range\r\nlast_time = start_bar * bar_range\r\ntime_range = timenow - time\r\n\r\n// time is in range check, starting from left to right\r\n// range = 0 - process all history, starting from the first bar on a chart n = 0\r\nis_after_start = ((time_range <= first_time) or (range == 0)) \r\nis_before_end = (time_range > last_time)\r\nis_in_range = is_after_start and is_before_end\r\n\r\n\r\n// first bar of the visible time based range - num_bars back\r\nrange_start = is_in_range and not is_in_range[1]\r\nrange_start_bars = barssince(range_start)\r\n// range_end = is_in_range and (range_start_bars == range_bars) // is_in_range[1] and not is_in_range - 1 bar lag\r\n// range_end_bars = barssince(range_end)\r\n\r\n// Range\r\n\r\n// auto range\r\n// will result in curves, not straight lines, due to variable min/max bounds\r\n// you can't delete plot history or predict future highest/lowest points to expand the range\r\n// ph = highest(range)\r\n// pl = lowest(range)\r\n\r\n// doesn't work - cover plot histbase must be a const expression, can be set from input, can't be var, mutable or function\r\n// even if completely replaced with label object min/max level must be const because buy/sell vol is accumulated on each bar in this version\r\n// ph := max_level > 0 ? min(max_level, ph) : ph\r\n// pl := min_level > 0 ? max(min_level, pl) : pl\r\n\r\n// fixed user defined price range\r\nph = max_level\r\npl = min_level\r\n\r\n// level height/step\r\np_range = ph - pl\r\nh = num_levels > 0 ? p_range/num_levels : 0\r\n\r\nis_valid_range = is_in_range and (num_levels > 0) and (min_level <= max_level)\r\n\r\n// Volume Totals\r\n\r\nvar buy_vol1 = 0.0\r\nvar buy_vol2 = 0.0\r\nvar buy_vol3 = 0.0\r\nvar buy_vol4 = 0.0\r\nvar buy_vol5 = 0.0\r\nvar buy_vol6 = 0.0\r\nvar buy_vol7 = 0.0\r\nvar buy_vol8 = 0.0\r\nvar buy_vol9 = 0.0\r\nvar buy_vol10 = 0.0\r\nvar buy_vol11 = 0.0\r\nvar buy_vol12 = 0.0\r\nvar buy_vol13 = 0.0\r\nvar buy_vol14 = 0.0\r\nvar buy_vol15 = 0.0\r\nvar buy_vol16 = 0.0\r\nvar buy_vol17 = 0.0\r\nvar buy_vol18 = 0.0\r\nvar buy_vol19 = 0.0\r\nvar buy_vol20 = 0.0\r\nvar buy_vol21 = 0.0\r\nvar buy_vol22 = 0.0\r\nvar buy_vol23 = 0.0\r\nvar buy_vol24 = 0.0\r\nvar buy_vol25 = 0.0\r\nvar buy_vol26 = 0.0\r\nvar buy_vol27 = 0.0\r\nvar buy_vol28 = 0.0\r\nvar buy_vol29 = 0.0\r\nvar buy_vol30 = 0.0\r\nvar buy_vol31 = 0.0\r\nvar buy_vol32 = 0.0\r\nvar buy_vol33 = 0.0\r\nvar buy_vol34 = 0.0\r\nvar buy_vol35 = 0.0\r\nvar buy_vol36 = 0.0\r\nvar buy_vol37 = 0.0\r\nvar buy_vol38 = 0.0\r\nvar buy_vol39 = 0.0\r\nvar buy_vol40 = 0.0\r\nvar buy_vol41 = 0.0\r\nvar buy_vol42 = 0.0\r\nvar buy_vol43 = 0.0\r\nvar buy_vol44 = 0.0\r\nvar buy_vol45 = 0.0\r\nvar buy_vol46 = 0.0\r\nvar buy_vol47 = 0.0\r\nvar buy_vol48 = 0.0\r\nvar buy_vol49 = 0.0\r\nvar buy_vol50 = 0.0\r\nvar buy_vol51 = 0.0\r\nvar buy_vol52 = 0.0\r\nvar buy_vol53 = 0.0\r\nvar buy_vol54 = 0.0\r\nvar buy_vol55 = 0.0\r\nvar buy_vol56 = 0.0\r\nvar buy_vol57 = 0.0\r\nvar buy_vol58 = 0.0\r\nvar buy_vol59 = 0.0\r\nvar buy_vol60 = 0.0\r\nvar buy_vol61 = 0.0\r\nvar buy_vol62 = 0.0\r\nvar buy_vol63 = 0.0\r\nvar buy_vol64 = 0.0\r\nvar buy_vol65 = 0.0\r\nvar buy_vol66 = 0.0\r\nvar buy_vol67 = 0.0\r\nvar buy_vol68 = 0.0\r\nvar buy_vol69 = 0.0\r\nvar buy_vol70 = 0.0\r\nvar buy_vol71 = 0.0\r\nvar buy_vol72 = 0.0\r\nvar buy_vol73 = 0.0\r\nvar buy_vol74 = 0.0\r\nvar buy_vol75 = 0.0\r\nvar buy_vol76 = 0.0\r\nvar buy_vol77 = 0.0\r\nvar buy_vol78 = 0.0\r\nvar buy_vol79 = 0.0\r\nvar buy_vol80 = 0.0\r\nvar buy_vol81 = 0.0\r\nvar buy_vol82 = 0.0\r\nvar buy_vol83 = 0.0\r\nvar buy_vol84 = 0.0\r\nvar buy_vol85 = 0.0\r\nvar buy_vol86 = 0.0\r\nvar buy_vol87 = 0.0\r\nvar buy_vol88 = 0.0\r\nvar buy_vol89 = 0.0\r\nvar buy_vol90 = 0.0\r\nvar buy_vol91 = 0.0\r\nvar buy_vol92 = 0.0\r\nvar buy_vol93 = 0.0\r\nvar buy_vol94 = 0.0\r\nvar buy_vol95 = 0.0\r\nvar buy_vol96 = 0.0\r\nvar buy_vol97 = 0.0\r\nvar buy_vol98 = 0.0\r\nvar buy_vol99 = 0.0\r\nvar buy_vol100 = 0.0\r\n\r\nvar sell_vol1 = 0.0\r\nvar sell_vol2 = 0.0\r\nvar sell_vol3 = 0.0\r\nvar sell_vol4 = 0.0\r\nvar sell_vol5 = 0.0\r\nvar sell_vol6 = 0.0\r\nvar sell_vol7 = 0.0\r\nvar sell_vol8 = 0.0\r\nvar sell_vol9 = 0.0\r\nvar sell_vol10 = 0.0\r\nvar sell_vol11 = 0.0\r\nvar sell_vol12 = 0.0\r\nvar sell_vol13 = 0.0\r\nvar sell_vol14 = 0.0\r\nvar sell_vol15 = 0.0\r\nvar sell_vol16 = 0.0\r\nvar sell_vol17 = 0.0\r\nvar sell_vol18 = 0.0\r\nvar sell_vol19 = 0.0\r\nvar sell_vol20 = 0.0\r\nvar sell_vol21 = 0.0\r\nvar sell_vol22 = 0.0\r\nvar sell_vol23 = 0.0\r\nvar sell_vol24 = 0.0\r\nvar sell_vol25 = 0.0\r\nvar sell_vol26 = 0.0\r\nvar sell_vol27 = 0.0\r\nvar sell_vol28 = 0.0\r\nvar sell_vol29 = 0.0\r\nvar sell_vol30 = 0.0\r\nvar sell_vol31 = 0.0\r\nvar sell_vol32 = 0.0\r\nvar sell_vol33 = 0.0\r\nvar sell_vol34 = 0.0\r\nvar sell_vol35 = 0.0\r\nvar sell_vol36 = 0.0\r\nvar sell_vol37 = 0.0\r\nvar sell_vol38 = 0.0\r\nvar sell_vol39 = 0.0\r\nvar sell_vol40 = 0.0\r\nvar sell_vol41 = 0.0\r\nvar sell_vol42 = 0.0\r\nvar sell_vol43 = 0.0\r\nvar sell_vol44 = 0.0\r\nvar sell_vol45 = 0.0\r\nvar sell_vol46 = 0.0\r\nvar sell_vol47 = 0.0\r\nvar sell_vol48 = 0.0\r\nvar sell_vol49 = 0.0\r\nvar sell_vol50 = 0.0\r\nvar sell_vol51 = 0.0\r\nvar sell_vol52 = 0.0\r\nvar sell_vol53 = 0.0\r\nvar sell_vol54 = 0.0\r\nvar sell_vol55 = 0.0\r\nvar sell_vol56 = 0.0\r\nvar sell_vol57 = 0.0\r\nvar sell_vol58 = 0.0\r\nvar sell_vol59 = 0.0\r\nvar sell_vol60 = 0.0\r\nvar sell_vol61 = 0.0\r\nvar sell_vol62 = 0.0\r\nvar sell_vol63 = 0.0\r\nvar sell_vol64 = 0.0\r\nvar sell_vol65 = 0.0\r\nvar sell_vol66 = 0.0\r\nvar sell_vol67 = 0.0\r\nvar sell_vol68 = 0.0\r\nvar sell_vol69 = 0.0\r\nvar sell_vol70 = 0.0\r\nvar sell_vol71 = 0.0\r\nvar sell_vol72 = 0.0\r\nvar sell_vol73 = 0.0\r\nvar sell_vol74 = 0.0\r\nvar sell_vol75 = 0.0\r\nvar sell_vol76 = 0.0\r\nvar sell_vol77 = 0.0\r\nvar sell_vol78 = 0.0\r\nvar sell_vol79 = 0.0\r\nvar sell_vol80 = 0.0\r\nvar sell_vol81 = 0.0\r\nvar sell_vol82 = 0.0\r\nvar sell_vol83 = 0.0\r\nvar sell_vol84 = 0.0\r\nvar sell_vol85 = 0.0\r\nvar sell_vol86 = 0.0\r\nvar sell_vol87 = 0.0\r\nvar sell_vol88 = 0.0\r\nvar sell_vol89 = 0.0\r\nvar sell_vol90 = 0.0\r\nvar sell_vol91 = 0.0\r\nvar sell_vol92 = 0.0\r\nvar sell_vol93 = 0.0\r\nvar sell_vol94 = 0.0\r\nvar sell_vol95 = 0.0\r\nvar sell_vol96 = 0.0\r\nvar sell_vol97 = 0.0\r\nvar sell_vol98 = 0.0\r\nvar sell_vol99 = 0.0\r\nvar sell_vol100 = 0.0\r\n\r\n\r\n// Price Volume Profile\r\n//\r\n// 1. Determine the highest/lowest range for the entire period.\r\n// 2. Divide this range by the number of levels (profile resolution) to create a set of vertically distributed price zones.\r\n// 3. Total the buy/sell volume traded within each price zone (based on price close and candle dir)\r\n\r\n// process range\r\nint k = na\r\n// sum of volumes is calculated only within the range till the end of range\r\n// - if start_bar = 0 - the range \"never ends\" and sum of volumes continues to be updated on each new bar\r\n// - if start_bar > 0 - the range ends at a fixed point in time (start_bar bars back), sum of volumes remains const after the end of range\r\nif is_valid_range\r\n    // both range and start_bar can be > n producing negative index values\r\n    // range_bars = range == 0 ? n - start_bar : start_bar + range - 1\r\n    // for i = start_bar to range_bars\r\n\r\n    // Pro Tip:\r\n    // this code is faster than for i above especially on lower tfs with long history\r\n    // instead of repeatedly calculating the total sum of volumes for the whole range on each bar, vol sums are increased on each bar and passed to the next in the range making it a per range vs per bar calculation that reduces time dramatically\r\n    price = vp_src // vp_src[i] // close[i]\r\n    \r\n    // check if price is within bounds\r\n\r\n    // Pro Tip:\r\n    // moving the code from a rarely used function back into the global scope saves 7 bytes of compiled code size! Still doesn't fit the 50K limit\r\n    // Compiled script code is too long: 50001. The limit is 50000\r\n    // min_cond = (min_level == 0) or ((min_level > 0) and (min_level <= price))\r\n    // max_cond = (max_level == 0) or ((max_level > 0) and (price <= max_level))\r\n    // is_valid_price = min_cond and max_cond\r\n\r\n    // merging several cond vars into 1 line squeezes the final 1 byte to fit exactly into the 50000 compiled code size limit!\r\n    is_valid_price = ( (min_level == 0) or ((min_level > 0) and (min_level <= price)) ) and ( (max_level == 0) or ((max_level > 0) and (price <= max_level)) )\r\n\r\n    if is_valid_price // is_valid(price)\r\n        // find volume profile level matching cur bar's price\r\n        k := floor((price - pl) / h) + 1\r\n\r\n    if not na(k)\r\n        // for volume_type=total total_vol = buy vol + sell vol - regardless of the dir sign\r\n        dir = sign(close - open)\r\n\r\n        // we could calculate any one of the buy/sell/total volumes instead of all of them if it weren't for the buy/sell sli mode\r\n        // vol_cond = volume_type == \"buy\" ? dir >= 0 : volume_type == \"sell\" ? dir < 0 : true\r\n        // if vol_cond\r\n        //     if k == 1\r\n        //         vol1 := vol1 + volume\r\n        // ...\r\n\r\n        // increase sums of buy/sell volumes for matching price level when inside the range\r\n        // - for buy_sell_sli_mode we need to calculate both buy and sell volumes at all times\r\n        // - for buy_sell_mode num_levels has been already halved and buy/sell volumes with index > num_levels will be empty\r\n        // redundant code below is required - you don't have arrays\r\n        if k == 1\r\n            buy_vol1 := dir >= 0 ? buy_vol1 + volume : buy_vol1\r\n            sell_vol1 := dir < 0 ? sell_vol1 + volume : sell_vol1\r\n        \r\n        if k == 2\r\n            buy_vol2 := dir >= 0 ? buy_vol2 + volume : buy_vol2\r\n            sell_vol2 := dir < 0 ? sell_vol2 + volume : sell_vol2\r\n        \r\n        if k == 3\r\n            buy_vol3 := dir >= 0 ? buy_vol3 + volume : buy_vol3\r\n            sell_vol3 := dir < 0 ? sell_vol3 + volume : sell_vol3\r\n        \r\n        if k == 4\r\n            buy_vol4 := dir >= 0 ? buy_vol4 + volume : buy_vol4\r\n            sell_vol4 := dir < 0 ? sell_vol4 + volume : sell_vol4\r\n        \r\n        if k == 5\r\n            buy_vol5 := dir >= 0 ? buy_vol5 + volume : buy_vol5\r\n            sell_vol5 := dir < 0 ? sell_vol5 + volume : sell_vol5\r\n        \r\n        if k == 6\r\n            buy_vol6 := dir >= 0 ? buy_vol6 + volume : buy_vol6\r\n            sell_vol6 := dir < 0 ? sell_vol6 + volume : sell_vol6\r\n        \r\n        if k == 7\r\n            buy_vol7 := dir >= 0 ? buy_vol7 + volume : buy_vol7\r\n            sell_vol7 := dir < 0 ? sell_vol7 + volume : sell_vol7\r\n        \r\n        if k == 8\r\n            buy_vol8 := dir >= 0 ? buy_vol8 + volume : buy_vol8\r\n            sell_vol8 := dir < 0 ? sell_vol8 + volume : sell_vol8\r\n        \r\n        if k == 9\r\n            buy_vol9 := dir >= 0 ? buy_vol9 + volume : buy_vol9\r\n            sell_vol9 := dir < 0 ? sell_vol9 + volume : sell_vol9\r\n        \r\n        if k == 10\r\n            buy_vol10 := dir >= 0 ? buy_vol10 + volume : buy_vol10\r\n            sell_vol10 := dir < 0 ? sell_vol10 + volume : sell_vol10\r\n        \r\n        if k == 11\r\n            buy_vol11 := dir >= 0 ? buy_vol11 + volume : buy_vol11\r\n            sell_vol11 := dir < 0 ? sell_vol11 + volume : sell_vol11\r\n        \r\n        if k == 12\r\n            buy_vol12 := dir >= 0 ? buy_vol12 + volume : buy_vol12\r\n            sell_vol12 := dir < 0 ? sell_vol12 + volume : sell_vol12\r\n        \r\n        if k == 13\r\n            buy_vol13 := dir >= 0 ? buy_vol13 + volume : buy_vol13\r\n            sell_vol13 := dir < 0 ? sell_vol13 + volume : sell_vol13\r\n        \r\n        if k == 14\r\n            buy_vol14 := dir >= 0 ? buy_vol14 + volume : buy_vol14\r\n            sell_vol14 := dir < 0 ? sell_vol14 + volume : sell_vol14\r\n        \r\n        if k == 15\r\n            buy_vol15 := dir >= 0 ? buy_vol15 + volume : buy_vol15\r\n            sell_vol15 := dir < 0 ? sell_vol15 + volume : sell_vol15\r\n        \r\n        if k == 16\r\n            buy_vol16 := dir >= 0 ? buy_vol16 + volume : buy_vol16\r\n            sell_vol16 := dir < 0 ? sell_vol16 + volume : sell_vol16\r\n        \r\n        if k == 17\r\n            buy_vol17 := dir >= 0 ? buy_vol17 + volume : buy_vol17\r\n            sell_vol17 := dir < 0 ? sell_vol17 + volume : sell_vol17\r\n        \r\n        if k == 18\r\n            buy_vol18 := dir >= 0 ? buy_vol18 + volume : buy_vol18\r\n            sell_vol18 := dir < 0 ? sell_vol18 + volume : sell_vol18\r\n        \r\n        if k == 19\r\n            buy_vol19 := dir >= 0 ? buy_vol19 + volume : buy_vol19\r\n            sell_vol19 := dir < 0 ? sell_vol19 + volume : sell_vol19\r\n        \r\n        if k == 20\r\n            buy_vol20 := dir >= 0 ? buy_vol20 + volume : buy_vol20\r\n            sell_vol20 := dir < 0 ? sell_vol20 + volume : sell_vol20\r\n        \r\n        if k == 21\r\n            buy_vol21 := dir >= 0 ? buy_vol21 + volume : buy_vol21\r\n            sell_vol21 := dir < 0 ? sell_vol21 + volume : sell_vol21\r\n        \r\n        if k == 22\r\n            buy_vol22 := dir >= 0 ? buy_vol22 + volume : buy_vol22\r\n            sell_vol22 := dir < 0 ? sell_vol22 + volume : sell_vol22\r\n        \r\n        if k == 23\r\n            buy_vol23 := dir >= 0 ? buy_vol23 + volume : buy_vol23\r\n            sell_vol23 := dir < 0 ? sell_vol23 + volume : sell_vol23\r\n        \r\n        if k == 24\r\n            buy_vol24 := dir >= 0 ? buy_vol24 + volume : buy_vol24\r\n            sell_vol24 := dir < 0 ? sell_vol24 + volume : sell_vol24\r\n        \r\n        if k == 25\r\n            buy_vol25 := dir >= 0 ? buy_vol25 + volume : buy_vol25\r\n            sell_vol25 := dir < 0 ? sell_vol25 + volume : sell_vol25\r\n        \r\n        if k == 26\r\n            buy_vol26 := dir >= 0 ? buy_vol26 + volume : buy_vol26\r\n            sell_vol26 := dir < 0 ? sell_vol26 + volume : sell_vol26\r\n        \r\n        if k == 27\r\n            buy_vol27 := dir >= 0 ? buy_vol27 + volume : buy_vol27\r\n            sell_vol27 := dir < 0 ? sell_vol27 + volume : sell_vol27\r\n        \r\n        if k == 28\r\n            buy_vol28 := dir >= 0 ? buy_vol28 + volume : buy_vol28\r\n            sell_vol28 := dir < 0 ? sell_vol28 + volume : sell_vol28\r\n        \r\n        if k == 29\r\n            buy_vol29 := dir >= 0 ? buy_vol29 + volume : buy_vol29\r\n            sell_vol29 := dir < 0 ? sell_vol29 + volume : sell_vol29\r\n        \r\n        if k == 30\r\n            buy_vol30 := dir >= 0 ? buy_vol30 + volume : buy_vol30\r\n            sell_vol30 := dir < 0 ? sell_vol30 + volume : sell_vol30\r\n        \r\n        if k == 31\r\n            buy_vol31 := dir >= 0 ? buy_vol31 + volume : buy_vol31\r\n            sell_vol31 := dir < 0 ? sell_vol31 + volume : sell_vol31\r\n        \r\n        if k == 32\r\n            buy_vol32 := dir >= 0 ? buy_vol32 + volume : buy_vol32\r\n            sell_vol32 := dir < 0 ? sell_vol32 + volume : sell_vol32\r\n        \r\n        if k == 33\r\n            buy_vol33 := dir >= 0 ? buy_vol33 + volume : buy_vol33\r\n            sell_vol33 := dir < 0 ? sell_vol33 + volume : sell_vol33\r\n        \r\n        if k == 34\r\n            buy_vol34 := dir >= 0 ? buy_vol34 + volume : buy_vol34\r\n            sell_vol34 := dir < 0 ? sell_vol34 + volume : sell_vol34\r\n        \r\n        if k == 35\r\n            buy_vol35 := dir >= 0 ? buy_vol35 + volume : buy_vol35\r\n            sell_vol35 := dir < 0 ? sell_vol35 + volume : sell_vol35\r\n        \r\n        if k == 36\r\n            buy_vol36 := dir >= 0 ? buy_vol36 + volume : buy_vol36\r\n            sell_vol36 := dir < 0 ? sell_vol36 + volume : sell_vol36\r\n        \r\n        if k == 37\r\n            buy_vol37 := dir >= 0 ? buy_vol37 + volume : buy_vol37\r\n            sell_vol37 := dir < 0 ? sell_vol37 + volume : sell_vol37\r\n        \r\n        if k == 38\r\n            buy_vol38 := dir >= 0 ? buy_vol38 + volume : buy_vol38\r\n            sell_vol38 := dir < 0 ? sell_vol38 + volume : sell_vol38\r\n        \r\n        if k == 39\r\n            buy_vol39 := dir >= 0 ? buy_vol39 + volume : buy_vol39\r\n            sell_vol39 := dir < 0 ? sell_vol39 + volume : sell_vol39\r\n        \r\n        if k == 40\r\n            buy_vol40 := dir >= 0 ? buy_vol40 + volume : buy_vol40\r\n            sell_vol40 := dir < 0 ? sell_vol40 + volume : sell_vol40\r\n        \r\n        if k == 41\r\n            buy_vol41 := dir >= 0 ? buy_vol41 + volume : buy_vol41\r\n            sell_vol41 := dir < 0 ? sell_vol41 + volume : sell_vol41\r\n        \r\n        if k == 42\r\n            buy_vol42 := dir >= 0 ? buy_vol42 + volume : buy_vol42\r\n            sell_vol42 := dir < 0 ? sell_vol42 + volume : sell_vol42\r\n        \r\n        if k == 43\r\n            buy_vol43 := dir >= 0 ? buy_vol43 + volume : buy_vol43\r\n            sell_vol43 := dir < 0 ? sell_vol43 + volume : sell_vol43\r\n        \r\n        if k == 44\r\n            buy_vol44 := dir >= 0 ? buy_vol44 + volume : buy_vol44\r\n            sell_vol44 := dir < 0 ? sell_vol44 + volume : sell_vol44\r\n        \r\n        if k == 45\r\n            buy_vol45 := dir >= 0 ? buy_vol45 + volume : buy_vol45\r\n            sell_vol45 := dir < 0 ? sell_vol45 + volume : sell_vol45\r\n        \r\n        if k == 46\r\n            buy_vol46 := dir >= 0 ? buy_vol46 + volume : buy_vol46\r\n            sell_vol46 := dir < 0 ? sell_vol46 + volume : sell_vol46\r\n        \r\n        if k == 47\r\n            buy_vol47 := dir >= 0 ? buy_vol47 + volume : buy_vol47\r\n            sell_vol47 := dir < 0 ? sell_vol47 + volume : sell_vol47\r\n        \r\n        if k == 48\r\n            buy_vol48 := dir >= 0 ? buy_vol48 + volume : buy_vol48\r\n            sell_vol48 := dir < 0 ? sell_vol48 + volume : sell_vol48\r\n        \r\n        if k == 49\r\n            buy_vol49 := dir >= 0 ? buy_vol49 + volume : buy_vol49\r\n            sell_vol49 := dir < 0 ? sell_vol49 + volume : sell_vol49\r\n        \r\n        if k == 50\r\n            buy_vol50 := dir >= 0 ? buy_vol50 + volume : buy_vol50\r\n            sell_vol50 := dir < 0 ? sell_vol50 + volume : sell_vol50\r\n        \r\n        if k == 51\r\n            buy_vol51 := dir >= 0 ? buy_vol51 + volume : buy_vol51\r\n            sell_vol51 := dir < 0 ? sell_vol51 + volume : sell_vol51\r\n        \r\n        if k == 52\r\n            buy_vol52 := dir >= 0 ? buy_vol52 + volume : buy_vol52\r\n            sell_vol52 := dir < 0 ? sell_vol52 + volume : sell_vol52\r\n        \r\n        if k == 53\r\n            buy_vol53 := dir >= 0 ? buy_vol53 + volume : buy_vol53\r\n            sell_vol53 := dir < 0 ? sell_vol53 + volume : sell_vol53\r\n        \r\n        if k == 54\r\n            buy_vol54 := dir >= 0 ? buy_vol54 + volume : buy_vol54\r\n            sell_vol54 := dir < 0 ? sell_vol54 + volume : sell_vol54\r\n        \r\n        if k == 55\r\n            buy_vol55 := dir >= 0 ? buy_vol55 + volume : buy_vol55\r\n            sell_vol55 := dir < 0 ? sell_vol55 + volume : sell_vol55\r\n        \r\n        if k == 56\r\n            buy_vol56 := dir >= 0 ? buy_vol56 + volume : buy_vol56\r\n            sell_vol56 := dir < 0 ? sell_vol56 + volume : sell_vol56\r\n        \r\n        if k == 57\r\n            buy_vol57 := dir >= 0 ? buy_vol57 + volume : buy_vol57\r\n            sell_vol57 := dir < 0 ? sell_vol57 + volume : sell_vol57\r\n        \r\n        if k == 58\r\n            buy_vol58 := dir >= 0 ? buy_vol58 + volume : buy_vol58\r\n            sell_vol58 := dir < 0 ? sell_vol58 + volume : sell_vol58\r\n        \r\n        if k == 59\r\n            buy_vol59 := dir >= 0 ? buy_vol59 + volume : buy_vol59\r\n            sell_vol59 := dir < 0 ? sell_vol59 + volume : sell_vol59\r\n        \r\n        if k == 60\r\n            buy_vol60 := dir >= 0 ? buy_vol60 + volume : buy_vol60\r\n            sell_vol60 := dir < 0 ? sell_vol60 + volume : sell_vol60\r\n        \r\n        if k == 61\r\n            buy_vol61 := dir >= 0 ? buy_vol61 + volume : buy_vol61\r\n            sell_vol61 := dir < 0 ? sell_vol61 + volume : sell_vol61\r\n        \r\n        if k == 62\r\n            buy_vol62 := dir >= 0 ? buy_vol62 + volume : buy_vol62\r\n            sell_vol62 := dir < 0 ? sell_vol62 + volume : sell_vol62\r\n        \r\n        if k == 63\r\n            buy_vol63 := dir >= 0 ? buy_vol63 + volume : buy_vol63\r\n            sell_vol63 := dir < 0 ? sell_vol63 + volume : sell_vol63\r\n        \r\n        if k == 64\r\n            buy_vol64 := dir >= 0 ? buy_vol64 + volume : buy_vol64\r\n            sell_vol64 := dir < 0 ? sell_vol64 + volume : sell_vol64\r\n        \r\n        if k == 65\r\n            buy_vol65 := dir >= 0 ? buy_vol65 + volume : buy_vol65\r\n            sell_vol65 := dir < 0 ? sell_vol65 + volume : sell_vol65\r\n        \r\n        if k == 66\r\n            buy_vol66 := dir >= 0 ? buy_vol66 + volume : buy_vol66\r\n            sell_vol66 := dir < 0 ? sell_vol66 + volume : sell_vol66\r\n        \r\n        if k == 67\r\n            buy_vol67 := dir >= 0 ? buy_vol67 + volume : buy_vol67\r\n            sell_vol67 := dir < 0 ? sell_vol67 + volume : sell_vol67\r\n        \r\n        if k == 68\r\n            buy_vol68 := dir >= 0 ? buy_vol68 + volume : buy_vol68\r\n            sell_vol68 := dir < 0 ? sell_vol68 + volume : sell_vol68\r\n        \r\n        if k == 69\r\n            buy_vol69 := dir >= 0 ? buy_vol69 + volume : buy_vol69\r\n            sell_vol69 := dir < 0 ? sell_vol69 + volume : sell_vol69\r\n        \r\n        if k == 70\r\n            buy_vol70 := dir >= 0 ? buy_vol70 + volume : buy_vol70\r\n            sell_vol70 := dir < 0 ? sell_vol70 + volume : sell_vol70\r\n        \r\n        if k == 71\r\n            buy_vol71 := dir >= 0 ? buy_vol71 + volume : buy_vol71\r\n            sell_vol71 := dir < 0 ? sell_vol71 + volume : sell_vol71\r\n        \r\n        if k == 72\r\n            buy_vol72 := dir >= 0 ? buy_vol72 + volume : buy_vol72\r\n            sell_vol72 := dir < 0 ? sell_vol72 + volume : sell_vol72\r\n        \r\n        if k == 73\r\n            buy_vol73 := dir >= 0 ? buy_vol73 + volume : buy_vol73\r\n            sell_vol73 := dir < 0 ? sell_vol73 + volume : sell_vol73\r\n        \r\n        if k == 74\r\n            buy_vol74 := dir >= 0 ? buy_vol74 + volume : buy_vol74\r\n            sell_vol74 := dir < 0 ? sell_vol74 + volume : sell_vol74\r\n        \r\n        if k == 75\r\n            buy_vol75 := dir >= 0 ? buy_vol75 + volume : buy_vol75\r\n            sell_vol75 := dir < 0 ? sell_vol75 + volume : sell_vol75\r\n        \r\n        if k == 76\r\n            buy_vol76 := dir >= 0 ? buy_vol76 + volume : buy_vol76\r\n            sell_vol76 := dir < 0 ? sell_vol76 + volume : sell_vol76\r\n        \r\n        if k == 77\r\n            buy_vol77 := dir >= 0 ? buy_vol77 + volume : buy_vol77\r\n            sell_vol77 := dir < 0 ? sell_vol77 + volume : sell_vol77\r\n        \r\n        if k == 78\r\n            buy_vol78 := dir >= 0 ? buy_vol78 + volume : buy_vol78\r\n            sell_vol78 := dir < 0 ? sell_vol78 + volume : sell_vol78\r\n        \r\n        if k == 79\r\n            buy_vol79 := dir >= 0 ? buy_vol79 + volume : buy_vol79\r\n            sell_vol79 := dir < 0 ? sell_vol79 + volume : sell_vol79\r\n        \r\n        if k == 80\r\n            buy_vol80 := dir >= 0 ? buy_vol80 + volume : buy_vol80\r\n            sell_vol80 := dir < 0 ? sell_vol80 + volume : sell_vol80\r\n        \r\n        if k == 81\r\n            buy_vol81 := dir >= 0 ? buy_vol81 + volume : buy_vol81\r\n            sell_vol81 := dir < 0 ? sell_vol81 + volume : sell_vol81\r\n        \r\n        if k == 82\r\n            buy_vol82 := dir >= 0 ? buy_vol82 + volume : buy_vol82\r\n            sell_vol82 := dir < 0 ? sell_vol82 + volume : sell_vol82\r\n        \r\n        if k == 83\r\n            buy_vol83 := dir >= 0 ? buy_vol83 + volume : buy_vol83\r\n            sell_vol83 := dir < 0 ? sell_vol83 + volume : sell_vol83\r\n        \r\n        if k == 84\r\n            buy_vol84 := dir >= 0 ? buy_vol84 + volume : buy_vol84\r\n            sell_vol84 := dir < 0 ? sell_vol84 + volume : sell_vol84\r\n        \r\n        if k == 85\r\n            buy_vol85 := dir >= 0 ? buy_vol85 + volume : buy_vol85\r\n            sell_vol85 := dir < 0 ? sell_vol85 + volume : sell_vol85\r\n        \r\n        if k == 86\r\n            buy_vol86 := dir >= 0 ? buy_vol86 + volume : buy_vol86\r\n            sell_vol86 := dir < 0 ? sell_vol86 + volume : sell_vol86\r\n        \r\n        if k == 87\r\n            buy_vol87 := dir >= 0 ? buy_vol87 + volume : buy_vol87\r\n            sell_vol87 := dir < 0 ? sell_vol87 + volume : sell_vol87\r\n        \r\n        if k == 88\r\n            buy_vol88 := dir >= 0 ? buy_vol88 + volume : buy_vol88\r\n            sell_vol88 := dir < 0 ? sell_vol88 + volume : sell_vol88\r\n        \r\n        if k == 89\r\n            buy_vol89 := dir >= 0 ? buy_vol89 + volume : buy_vol89\r\n            sell_vol89 := dir < 0 ? sell_vol89 + volume : sell_vol89\r\n        \r\n        if k == 90\r\n            buy_vol90 := dir >= 0 ? buy_vol90 + volume : buy_vol90\r\n            sell_vol90 := dir < 0 ? sell_vol90 + volume : sell_vol90\r\n        \r\n        if k == 91\r\n            buy_vol91 := dir >= 0 ? buy_vol91 + volume : buy_vol91\r\n            sell_vol91 := dir < 0 ? sell_vol91 + volume : sell_vol91\r\n        \r\n        if k == 92\r\n            buy_vol92 := dir >= 0 ? buy_vol92 + volume : buy_vol92\r\n            sell_vol92 := dir < 0 ? sell_vol92 + volume : sell_vol92\r\n        \r\n        if k == 93\r\n            buy_vol93 := dir >= 0 ? buy_vol93 + volume : buy_vol93\r\n            sell_vol93 := dir < 0 ? sell_vol93 + volume : sell_vol93\r\n        \r\n        if k == 94\r\n            buy_vol94 := dir >= 0 ? buy_vol94 + volume : buy_vol94\r\n            sell_vol94 := dir < 0 ? sell_vol94 + volume : sell_vol94\r\n        \r\n        if k == 95\r\n            buy_vol95 := dir >= 0 ? buy_vol95 + volume : buy_vol95\r\n            sell_vol95 := dir < 0 ? sell_vol95 + volume : sell_vol95\r\n        \r\n        if k == 96\r\n            buy_vol96 := dir >= 0 ? buy_vol96 + volume : buy_vol96\r\n            sell_vol96 := dir < 0 ? sell_vol96 + volume : sell_vol96\r\n        \r\n        if k == 97\r\n            buy_vol97 := dir >= 0 ? buy_vol97 + volume : buy_vol97\r\n            sell_vol97 := dir < 0 ? sell_vol97 + volume : sell_vol97\r\n        \r\n        if k == 98\r\n            buy_vol98 := dir >= 0 ? buy_vol98 + volume : buy_vol98\r\n            sell_vol98 := dir < 0 ? sell_vol98 + volume : sell_vol98\r\n        \r\n        if k == 99\r\n            buy_vol99 := dir >= 0 ? buy_vol99 + volume : buy_vol99\r\n            sell_vol99 := dir < 0 ? sell_vol99 + volume : sell_vol99\r\n        \r\n        if k == 100\r\n            buy_vol100 := dir >= 0 ? buy_vol100 + volume : buy_vol100\r\n            sell_vol100 := dir < 0 ? sell_vol100 + volume : sell_vol100\r\n\r\n\r\n// buy volumes array (read only)\r\n// uses calculated buy/sell volumes - must remain after\r\n// returns 0 instead of na - important!\r\n// single buy_volume with 100 vars => script has a function with too many arguments: 101 => you must split it into 2 functions and call them separately\r\nbuy_volumes1(group) =>\r\n    // res = 0.0\r\n    // if (group >= 1) and (group <= num_levels)\r\n    res = group == 1 ? buy_vol1 : group == 2 ? buy_vol2 : group == 3 ? buy_vol3 : group == 4 ? buy_vol4 : group == 5 ? buy_vol5 : group == 6 ? buy_vol6 : group == 7 ? buy_vol7 : group == 8 ? buy_vol8 : group == 9 ? buy_vol9 : group == 10 ? buy_vol10 : \r\n         group == 11 ? buy_vol11 : group == 12 ? buy_vol12 : group == 13 ? buy_vol13 : group == 14 ? buy_vol14 : group == 15 ? buy_vol15 : group == 16 ? buy_vol16 : group == 17 ? buy_vol17 : group == 18 ? buy_vol18 : group == 19 ? buy_vol19 : group == 20 ? buy_vol20 : \r\n             group == 21 ? buy_vol21 : group == 22 ? buy_vol22 : group == 23 ? buy_vol23 : group == 24 ? buy_vol24 : group == 25 ? buy_vol25 : group == 26 ? buy_vol26 : group == 27 ? buy_vol27 : group == 28 ? buy_vol28 : group == 29 ? buy_vol29 : group == 30 ? buy_vol30 : \r\n                 group == 31 ? buy_vol31 : group == 32 ? buy_vol32 : group == 33 ? buy_vol33 : group == 34 ? buy_vol34 : group == 35 ? buy_vol35 : group == 36 ? buy_vol36 : group == 37 ? buy_vol37 : group == 38 ? buy_vol38 : group == 39 ? buy_vol39 : group == 40 ? buy_vol40 : \r\n                     group == 41 ? buy_vol41 : group == 42 ? buy_vol42 : group == 43 ? buy_vol43 : group == 44 ? buy_vol44 : group == 45 ? buy_vol45 : group == 46 ? buy_vol46 : group == 47 ? buy_vol47 : group == 48 ? buy_vol48 : group == 49 ? buy_vol49 : group == 50 ? buy_vol50 : 0.0\r\n\r\nbuy_volumes2(group) =>\r\n    res = group == 51 ? buy_vol51 : group == 52 ? buy_vol52 : group == 53 ? buy_vol53 : group == 54 ? buy_vol54 : group == 55 ? buy_vol55 : group == 56 ? buy_vol56 : group == 57 ? buy_vol57 : group == 58 ? buy_vol58 : group == 59 ? buy_vol59 : group == 60 ? buy_vol60 : \r\n         group == 61 ? buy_vol61 : group == 62 ? buy_vol62 : group == 63 ? buy_vol63 : group == 64 ? buy_vol64 : group == 65 ? buy_vol65 : group == 66 ? buy_vol66 : group == 67 ? buy_vol67 : group == 68 ? buy_vol68 : group == 69 ? buy_vol69 : group == 70 ? buy_vol70 : \r\n             group == 71 ? buy_vol71 : group == 72 ? buy_vol72 : group == 73 ? buy_vol73 : group == 74 ? buy_vol74 : group == 75 ? buy_vol75 : group == 76 ? buy_vol76 : group == 77 ? buy_vol77 : group == 78 ? buy_vol78 : group == 79 ? buy_vol79 : group == 80 ? buy_vol80 : \r\n                 group == 81 ? buy_vol81 : group == 82 ? buy_vol82 : group == 83 ? buy_vol83 : group == 84 ? buy_vol84 : group == 85 ? buy_vol85 : group == 86 ? buy_vol86 : group == 87 ? buy_vol87 : group == 88 ? buy_vol88 : group == 89 ? buy_vol89 : group == 90 ? buy_vol90 : \r\n                     group == 91 ? buy_vol91 : group == 92 ? buy_vol92 : group == 93 ? buy_vol93 : group == 94 ? buy_vol94 : group == 95 ? buy_vol95 : group == 96 ? buy_vol96 : group == 97 ? buy_vol97 : group == 98 ? buy_vol98 : group == 99 ? buy_vol99 : group == 100 ? buy_vol100 : 0.0\r\n\r\n\r\n// Pro Tip: \r\n// apparently you can't have a function/call a function with the total number of vars inside all function bodies in a call stack > 100\r\n// doesn't work: script has a function with too many arguments: 101. The limit is 100 error => 2 function calls with 50 vars each: 50 + 50 + 1\r\n// buy_volumes(group) =>\r\n    // res = group <= 50 ? buy_volumes1(group) : buy_volumes2(group)\r\n    // group <= 50 ? buy_volumes1(group) : buy_volumes2(group)\r\n\r\n// sell volumes array (read only)\r\n// returns 0 instead of na - important!\r\nsell_volumes1(group) =>\r\n    // res = 0.0\r\n    // if (group >= 1) and (group <= num_levels)\r\n    res = group == 1 ? sell_vol1 : group == 2 ? sell_vol2 : group == 3 ? sell_vol3 : group == 4 ? sell_vol4 : group == 5 ? sell_vol5 : group == 6 ? sell_vol6 : group == 7 ? sell_vol7 : group == 8 ? sell_vol8 : group == 9 ? sell_vol9 : group == 10 ? sell_vol10 : \r\n         group == 11 ? sell_vol11 : group == 12 ? sell_vol12 : group == 13 ? sell_vol13 : group == 14 ? sell_vol14 : group == 15 ? sell_vol15 : group == 16 ? sell_vol16 : group == 17 ? sell_vol17 : group == 18 ? sell_vol18 : group == 19 ? sell_vol19 : group == 20 ? sell_vol20 : \r\n             group == 21 ? sell_vol21 : group == 22 ? sell_vol22 : group == 23 ? sell_vol23 : group == 24 ? sell_vol24 : group == 25 ? sell_vol25 : group == 26 ? sell_vol26 : group == 27 ? sell_vol27 : group == 28 ? sell_vol28 : group == 29 ? sell_vol29 : group == 30 ? sell_vol30 : \r\n                 group == 31 ? sell_vol31 : group == 32 ? sell_vol32 : group == 33 ? sell_vol33 : group == 34 ? sell_vol34 : group == 35 ? sell_vol35 : group == 36 ? sell_vol36 : group == 37 ? sell_vol37 : group == 38 ? sell_vol38 : group == 39 ? sell_vol39 : group == 40 ? sell_vol40 : \r\n                     group == 41 ? sell_vol41 : group == 42 ? sell_vol42 : group == 43 ? sell_vol43 : group == 44 ? sell_vol44 : group == 45 ? sell_vol45 : group == 46 ? sell_vol46 : group == 47 ? sell_vol47 : group == 48 ? sell_vol48 : group == 49 ? sell_vol49 : group == 50 ? sell_vol50 : 0.0\r\n\r\nsell_volumes2(group) =>\r\n    res = group == 51 ? sell_vol51 : group == 52 ? sell_vol52 : group == 53 ? sell_vol53 : group == 54 ? sell_vol54 : group == 55 ? sell_vol55 : group == 56 ? sell_vol56 : group == 57 ? sell_vol57 : group == 58 ? sell_vol58 : group == 59 ? sell_vol59 : group == 60 ? sell_vol60 : \r\n         group == 61 ? sell_vol61 : group == 62 ? sell_vol62 : group == 63 ? sell_vol63 : group == 64 ? sell_vol64 : group == 65 ? sell_vol65 : group == 66 ? sell_vol66 : group == 67 ? sell_vol67 : group == 68 ? sell_vol68 : group == 69 ? sell_vol69 : group == 70 ? sell_vol70 : \r\n             group == 71 ? sell_vol71 : group == 72 ? sell_vol72 : group == 73 ? sell_vol73 : group == 74 ? sell_vol74 : group == 75 ? sell_vol75 : group == 76 ? sell_vol76 : group == 77 ? sell_vol77 : group == 78 ? sell_vol78 : group == 79 ? sell_vol79 : group == 80 ? sell_vol80 : \r\n                 group == 81 ? sell_vol81 : group == 82 ? sell_vol82 : group == 83 ? sell_vol83 : group == 84 ? sell_vol84 : group == 85 ? sell_vol85 : group == 86 ? sell_vol86 : group == 87 ? sell_vol87 : group == 88 ? sell_vol88 : group == 89 ? sell_vol89 : group == 90 ? sell_vol90 : \r\n                     group == 91 ? sell_vol91 : group == 92 ? sell_vol92 : group == 93 ? sell_vol93 : group == 94 ? sell_vol94 : group == 95 ? sell_vol95 : group == 96 ? sell_vol96 : group == 97 ? sell_vol97 : group == 98 ? sell_vol98 : group == 99 ? sell_vol99 : group == 100 ? sell_vol100 : 0.0\r\n\r\n\r\n// Max/Total Volumes\r\n\r\n// max_vol sli override\r\n// in vertical sli mode max_vol from the master indicator instance is used as base length for all slave's levels\r\n// in all slave instances poc/poc2/va levels are auto hidden, but vwap levels will work, since they don't depend on the range\r\nmax_vol = max_vol_sli\r\nmax_buy_vol = 0.0\r\nmax_sell_vol = 0.0\r\nmax_vol2 = 0.0\r\ntotal_vol = 0.0\r\n\r\npoc_index = 0\r\npoc2_index = 0\r\npoc_level = 0.0\r\npoc2_level = 0.0\r\n\r\n// compensate level price with vertical shift because line width is center-based, not bottom-based\r\n// either level_shift or 100.0 must be float otherwise width1 = 0 and level1 will have a tiny default width\r\nshift = level_shift/100 * h\r\n\r\n// no max_vol processing in max vol sli mode - using external max_vol value instead\r\n// is_valid_range := is_valid_range and (max_vol_sli == 0)\r\n// if is_valid_range\r\n// calculate max_vol and show levels even after the end of range\r\nif is_after_start and not max_vol_sli_mode\r\n    // here we calculate the denominator/divisor max_vol of the vol/max_vol ratio (fraction bottom)\r\n    // - for total - we always calculate max_total volume/poc\r\n    // - for buy/sell in normal mode => respective max_buy/max_sell volumes/poc. individual max_buy/max_sell levels may differ from max_total\r\n    // - for buy/sell in buy_sell_mode with extended buy + sell offset for sell => max_total volume/poc    \r\n    // - for buy/sell in buy_sell_sli_mode with extended buy + sell offset for sell => max_total volume/poc in both master/slave indicators\r\n    a = (volume_type == \"total\") or buy_sell_sli_mode or buy_sell_mode ? 1 : volume_type == \"buy\" ? 1 : volume_type == \"sell\" ? 0 : 0\r\n    b = (volume_type == \"total\") or buy_sell_sli_mode or buy_sell_mode ? 1 : volume_type == \"buy\" ? 0 : volume_type == \"sell\" ? 1 : 0\r\n\r\n    for i = 1 to num_levels\r\n\r\n        // max buy/sell volumes for buy_sell_sli_mode\r\n        // bv = buy_volumes(i)\r\n        // to access 100 vol vars we must call 2 separate array functions with 50 vars each\r\n        bv = i <= 50 ? buy_volumes1(i) : buy_volumes2(i)\r\n        if max_buy_vol < bv\r\n            max_buy_vol := bv\r\n    \r\n        // sv = sell_volumes(i)\r\n        sv = i <= 50 ? sell_volumes1(i) : sell_volumes2(i)\r\n        if max_sell_vol < sv\r\n            max_sell_vol := sv\r\n\r\n        // calculate max_vol and poc with respect to volume_type\r\n        vol = a * bv + b * sv\r\n        total_vol := total_vol + vol\r\n\r\n        // max total volume for a given price level in a range - POC level\r\n        // nested structure enables further search for the 2nd largest Developing POC till the end of range even after the main POC is found\r\n        // check for Developing POC\r\n        if max_vol2 < vol\r\n            // check for POC\r\n            // in 1,2,3 sequence will assign POC=3, POC2=2\r\n            if max_vol < vol\r\n                // save cur max_vol and poc_index as Developing POC\r\n                max_vol2 := max_vol\r\n                poc2_index := poc_index\r\n                // save new max_vol and poc_index as POC\r\n                max_vol := vol\r\n                poc_index := i\r\n            else\r\n                // in 1,3,2 sequence will still assign POC=3, POC2=2 properly instead of POC=3, POC2=1 which is incorrect\r\n                // in 1,4,2,3,5 sequence will correctly assign POC=5, POC2=4\r\n                // save new max_vol and poc_index as Developing POC only if further POC check failed\r\n                max_vol2 := vol\r\n                poc2_index := i\r\n\r\n\r\n    // POC, Developing POC Levels\r\n    poc_level := pl + (poc_index - 1) * h + shift // h/2\r\n    poc2_level := poc2_index > 0 ? pl + (poc2_index - 1) * h + shift : 0.0 // h/2\r\n\r\n\r\n// Value Area VAH/VAL\r\n\r\n// Point of Control (POC) – price level with the highest traded volume for the time period\r\n// Value Area (VA) – range of price levels with the sum of traded volumes = 70% of the total traded volume during the time period\r\n// Value Area High (VAH) – highest price level within the value area\r\n// Value Area Low (VAL) – lowest price level within the value area\r\n//\r\n// 1. Calculate the total volume (buy and sell) traded in the profile.\r\n// 2. VA % target = 70% of total volume\r\n// 3. Start with POC\r\n//   - VA Volume0 = POC Total Volume\r\n//   - VA Area0/VAH0/VAL0 = POC\r\n// 4. Get the sums of total volumes:\r\n//   - of the 2 rows above the current VAH (VAH0 = POC) => sum above\r\n//   - of the 2 rows below the current VAL (VAL0 = POC) => sum below\r\n// 5. Increase VA Volume with the largest of the 2 sums: VA Volume1 = VA Volume0 + max(sum above, sum below)\r\n// 6. Increase VA Area above or below with 2 rows (+2 rows in the dir of the largest of the 2 sums): \r\n//   - if sum above > sum below VAH1 = VAH0 + 2 else VAL1 = VAL0 - 2\r\n//   - if sum above = sum below choose the level closest to the middle of the range\r\n//   - VA Area1 = [VAL1..VAH1] range of rows\r\n// 7. Repeat steps 4-6 until VA Volume matches or exceeds the 70% target: VA Volume_i >= VA % Target\r\n// 8. final VAH = VAH i - highest row of VA Area i, final VAL = VAL i - lowest row of VA Area i\r\n\r\nva_limit = total_vol * va_percent / 100\r\nmid_index = num_levels/2\r\n\r\n// POC - starting point for Value Area Calculation\r\nva_vol = max_vol // buy_volumes(poc_index) + sell_volumes(poc_index)\r\nva_high = poc_index\r\nva_low = poc_index\r\nva_high_level = 0.0\r\nva_low_level = 0.0\r\n\r\n// POC = num_levels => show only VAL, don't show VAH above num_levels\r\n// POC = 1 => show only VAH, don't show VAL below 1\r\n// empty volume range - don't show anything\r\n// is_valid_range := is_valid_range and (va_vol > 0)\r\n\r\n// no va levels processing in max vol sli mode max_vol_sli > 0 - va levels in a slave indicator instance are always hidden\r\n// using num_levels but there are max num_levels/2 estimated total iterations where 2 is the number of adj levels in each dir\r\n// if is_valid_range\r\n// calculate and show va_levels even after the end of range\r\nif is_after_start and not max_vol_sli_mode and (va_vol > 0)\r\n\r\n    for i = 1 to num_levels\r\n        // calculate and compare the sum of volumes for 2 rows above and below to expand Value Area in either dir\r\n        // va_low/va_high are adjusted independently and can fall outside of range [1..num_levels] => buy/sell_volumes must return 0 instead of na for va levels to be calculated properly - important!\r\n        // doesn't work with 100 vars\r\n        // above_vol = total_volumes(va_high + 1) + total_volumes(va_high + 2)\r\n        // below_vol = total_volumes(va_low - 1) + total_volumes(va_low - 2)\r\n        // above_vol = buy_volumes(va_high + 1) + sell_volumes(va_high + 1) + buy_volumes(va_high + 2) + sell_volumes(va_high + 2)\r\n        // below_vol = buy_volumes(va_low - 1) + sell_volumes(va_low - 1) + buy_volumes(va_low - 2) + sell_volumes(va_low - 2)\r\n\r\n        // single total_volumes/buy_volume with 100 vars => script has a function with too many arguments: 101 => you must split it into 2 functions and call them separately        \r\n        buy_vol_vh1 = va_high + 1 <= 50 ? buy_volumes1(va_high + 1) : buy_volumes2(va_high + 1)\r\n        buy_vol_vh2 = va_high + 2 <= 50 ? buy_volumes1(va_high + 2) : buy_volumes2(va_high + 2)\r\n        sell_vol_vh1 = va_high + 1 <= 50 ? sell_volumes1(va_high + 1) : sell_volumes2(va_high + 1)\r\n        sell_vol_vh2 = va_high + 2 <= 50 ? sell_volumes1(va_high + 2) : sell_volumes2(va_high + 2)\r\n\r\n        buy_vol_vl1 = va_low - 1 <= 50 ? buy_volumes1(va_low - 1) : buy_volumes2(va_low - 1)\r\n        buy_vol_vl2 = va_low - 2 <= 50 ? buy_volumes1(va_low - 2) : buy_volumes2(va_low - 2)\r\n        sell_vol_vl1 = va_low - 1 <= 50 ? sell_volumes1(va_low - 1) : sell_volumes2(va_low - 1)\r\n        sell_vol_vl2 = va_low - 2 <= 50 ? sell_volumes1(va_low - 2) : sell_volumes2(va_low - 2)\r\n\r\n        above_vol = buy_vol_vh1 + sell_vol_vh1 + buy_vol_vh2 + sell_vol_vh2\r\n        below_vol = buy_vol_vl1 + sell_vol_vl1 + buy_vol_vl2 + sell_vol_vl2\r\n\r\n        // increase value area volume with the max sum of volumes\r\n        // va_vol := va_vol + max(above_vol, below_vol)\r\n        \r\n        // when above_vol > below_vol include the 2 rows above into the value area\r\n        // when above_vol = below_vol the area closest to the middle of the range is included in the Value Area\r\n        // and when they both have the same volume and are also equidistant from the middle of the range - only the above area is included\r\n        if (va_high <= num_levels) \r\n            if (above_vol > below_vol) or ( (above_vol == below_vol) and (abs(va_high + 2 - mid_index) <= abs(va_low - 2 - mid_index)) )\r\n                va_high := va_high + 2\r\n                va_vol := va_vol + above_vol\r\n    \r\n        // when above_vol < below_vol include the 2 rows below into the value area\r\n        if (va_low > 0) \r\n            if (above_vol < below_vol) or ( (above_vol == below_vol) and (abs(va_high + 2 - mid_index) > abs(va_low - 2 - mid_index)) )\r\n                va_low := va_low - 2\r\n                va_vol := va_vol + below_vol\r\n    \r\n        // value area limit target reached or the whole range is processed\r\n        if (va_vol >= va_limit) or ((va_low <= 0) and (va_high > num_levels))\r\n            break\r\n\r\n\r\n    va_high := (va_high > num_levels) ? num_levels : va_high\r\n    va_low := (va_low <= 0) ? 1 : va_low\r\n    \r\n    // both va low / va high include their underlying levels\r\n    // low boundary of a level = level, high boundary of a level = level_top, doesn't need shift\r\n    va_high_level := pl + va_high * h - spacing // + shift // h/2\r\n    // lower boundary of a level\r\n    va_low_level := pl + (va_low - 1) * h - spacing // + shift // h/2\r\n\r\n\r\n// VWAP\r\n// is not affected by shift\r\nvwap_level = vwap(vwap_src)\r\nvwap_stdev = stdev(vwap_src, vwap_len) * stddev\r\nvwap_up = vwap_level + vwap_stdev\r\nvwap_down = vwap_level - vwap_stdev\r\n\r\n// in VWAP mode POC2, VAH/VAL are reused and become => VWAP, VWAP High/Low to minimize plot outputs\r\n// doesn't need a valid range\r\n// in max vol sli mode - a slave indicator instance can show vwap levels, while the master instance - poc2/va levels\r\n// wvap levels are the same for both master/slave versions - they are duplicate levels\r\nif (levels_mode == \"vwap\")\r\n    poc2_level := vwap_level\r\n    va_high_level := vwap_up\r\n    va_low_level := vwap_down\r\n\r\n\r\n// Buy/Sell/Total Lengths as % of Base Width\r\n\r\n// calculate base level length\r\n// 100 static vol vars removed and replaced with a function to minimize the total number of vars <= max 1000 vars limit\r\n// here we calculate the numerator vol of the vol/max_vol ratio (fraction top)\r\n// - for total - we need to use total buy+sell volume\r\n// - for buy/sell in normal mode => respective buy/sell volumes\r\n// - for buy/sell in buy_sell_sli_mode with extended buy + sell offset for sell => total buy+sell volume for sell, buy volume for buy master/slave indicator\r\n// - for buy/sell in buy_sell_mode with extended buy + sell offset for sell => depends on volume_type\r\n// - basically for buy level we use buy len, for sell level - buy + sell len, but the buy part is below/covered by the corresponding buy level because each sell is an extension of a buy level, so it's technically a sell len with a buy len offset\r\n\r\n// doesn't work - won't compile\r\n// - you can't use buy/sell_volumes inside a function because of max 100 vars limit for the entire call stack with nested functions\r\n// - you must call buy/sell_volumes from a global scope, then pass buy/sell_vol values as args into a function instead\r\n// - similarly you can't have get_vol(index), get_len(index), get_offset(index) => you must calculate vol,len and pass them as args: get_vol(buy/sell_vol), len = get_len(buy/sell_vol), get_offset(len)\r\n// get_vol(index) =>\r\n//     buy_sell_cond = buy_sell_mode and (index > num_levels)\r\n//     i = buy_sell_cond ? index - 50 : index\r\n\r\n//     a = volume_type == \"buy\" ? 1 : volume_type == \"sell\" ? buy_sell_sli_mode or buy_sell_cond ? 1 : 0 : volume_type == \"total\" ? 1 : 0\r\n//     b = volume_type == \"buy\" ? 0 : volume_type == \"sell\" ? 1 : volume_type == \"total\" ? 1 : 0\r\n    \r\n//     bv = i <= 50 ? buy_volumes1(i) : buy_volumes2(i)\r\n//     sv = i <= 50 ? sell_volumes1(i) : sell_volumes2(i)\r\n\r\n//     res = a * bv + b * sv\r\n\r\n// get_len(index) =>\r\n//     // prevent division by zero\r\n//     len = max_vol > 0 ? round(get_vol(index)/max_vol * length) : 0\r\n\r\n\r\n// determines how level len is calculated depending on level, normal/buy_sell_mode, buy/sell volumes and volume_type\r\n// uses num_levels, max_vol - must remain after\r\n// - line object = [buy,sell], can't be total due to overlapping (line objects are always shown above plot levels and will completely obscure them, including side cover)\r\n// - plot level = [buy,total], can't be sell due to fixed width (always uses offset from zero, can't extend a buy from an edge as a sell)\r\n// - for buy_sell_mode/volume_type combo:\r\n// \t\tline = sell, plot = buy => volume_type sell - line objects appear as red sell levels extending blue buy plot levels from the edge (no overlapping)\r\n// \t\tline = buy, plot = total => volume_type buy - line objects appear as green buy levels on top of blue total plot levels (overlapping)\r\n// \t\tline = sell, plot = total => volume_type total - line objects appear as red sell levels on top of blue total plot levels (overlapping)\r\n// - overlapping/engulfing is particularly visible in adjust for log scale mode when the edges of total plot go past the edges of a sell line level\r\n// Pro Tip:\r\n// apparently merging 2 nested functions get_len(get_vol) into 1 get_len fits the max 50K compiled size limit!\r\n// get_vol(index, buy_vol, sell_vol) =>\r\nget_len(index, buy_vol, sell_vol) =>\r\n    a = volume_type == \"buy\" ? 1 : volume_type == \"sell\" ? buy_sell_sli_mode ? 1 : 0 : volume_type == \"total\" ? 1 : 0\r\n    b = volume_type == \"buy\" ? 0 : volume_type == \"sell\" ? 1 : volume_type == \"total\" ? 1 : 0\r\n\r\n    // in buy_sell_mode num_levels is already halved and volume_type defines the len of line objects\r\n    // regardless of volume_type: total, buy or buy, total are passed as len1, len2 defining all 3 points for a buy/sell combo level.\r\n    if buy_sell_mode\r\n        // plot levels 1..50 are:\r\n        // - for volume_type buy/total - total_vol with a fixed total_len=buy_vol+sell_vol\r\n        // - for volume_type sell - buy_vol with offset=zero\r\n        if index <= num_levels\r\n            a := 1\r\n            b := volume_type == \"sell\" ? 0 : 1\r\n\r\n        // line object levels 51..100 are:\r\n        // - for volume_type = buy:\r\n        //   - a line is drawn between (x1=buy_vol, x2=zero), buy_len=buy_vol, overlapping plot levels\r\n        //   - overlapping is acceptable because line objects are always shown above plot levels anyway\r\n        // - for volume_type = sell/total:\r\n        //   - a line is drawn between (x1=total_vol, x2=zero-buy_vol), sell_len=total_vol-buy_vol, extending plot buy level\r\n        //   - overlapping with plot buy must be avoided because line objects can't be moved below plot levels and will be obscuring them otherwise\r\n        if index > num_levels\r\n            a := 1\r\n            b := volume_type == \"sell\" ? 1 : 0\r\n\r\n    res = a * buy_vol + b * sell_vol\r\n\r\n    // prevents division by zero\r\n    len = max_vol > 0 ? round(res/max_vol * length) : 0\r\n\r\n// get level len\r\n// get_len(index, buy_vol, sell_vol) =>\r\n//     len = max_vol > 0 ? round(get_vol(index, buy_vol, sell_vol)/max_vol * length) : 0\r\n\r\n// len can be a function, because only offset depends on it\r\n// must pass buy/sell_vol explicitly and calculate each len once\r\n// in buy_sell_mode len1..50 = total/buy volume, len51..100 - buy/total volume\r\nlen1 = get_len(1, buy_vol1, sell_vol1)\r\nlen2 = get_len(2, buy_vol2, sell_vol2)\r\nlen3 = get_len(3, buy_vol3, sell_vol3)\r\nlen4 = get_len(4, buy_vol4, sell_vol4)\r\nlen5 = get_len(5, buy_vol5, sell_vol5)\r\nlen6 = get_len(6, buy_vol6, sell_vol6)\r\nlen7 = get_len(7, buy_vol7, sell_vol7)\r\nlen8 = get_len(8, buy_vol8, sell_vol8)\r\nlen9 = get_len(9, buy_vol9, sell_vol9)\r\nlen10 = get_len(10, buy_vol10, sell_vol10)\r\nlen11 = get_len(11, buy_vol11, sell_vol11)\r\nlen12 = get_len(12, buy_vol12, sell_vol12)\r\nlen13 = get_len(13, buy_vol13, sell_vol13)\r\nlen14 = get_len(14, buy_vol14, sell_vol14)\r\nlen15 = get_len(15, buy_vol15, sell_vol15)\r\nlen16 = get_len(16, buy_vol16, sell_vol16)\r\nlen17 = get_len(17, buy_vol17, sell_vol17)\r\nlen18 = get_len(18, buy_vol18, sell_vol18)\r\nlen19 = get_len(19, buy_vol19, sell_vol19)\r\nlen20 = get_len(20, buy_vol20, sell_vol20)\r\nlen21 = get_len(21, buy_vol21, sell_vol21)\r\nlen22 = get_len(22, buy_vol22, sell_vol22)\r\nlen23 = get_len(23, buy_vol23, sell_vol23)\r\nlen24 = get_len(24, buy_vol24, sell_vol24)\r\nlen25 = get_len(25, buy_vol25, sell_vol25)\r\nlen26 = get_len(26, buy_vol26, sell_vol26)\r\nlen27 = get_len(27, buy_vol27, sell_vol27)\r\nlen28 = get_len(28, buy_vol28, sell_vol28)\r\nlen29 = get_len(29, buy_vol29, sell_vol29)\r\nlen30 = get_len(30, buy_vol30, sell_vol30)\r\nlen31 = get_len(31, buy_vol31, sell_vol31)\r\nlen32 = get_len(32, buy_vol32, sell_vol32)\r\nlen33 = get_len(33, buy_vol33, sell_vol33)\r\nlen34 = get_len(34, buy_vol34, sell_vol34)\r\nlen35 = get_len(35, buy_vol35, sell_vol35)\r\nlen36 = get_len(36, buy_vol36, sell_vol36)\r\nlen37 = get_len(37, buy_vol37, sell_vol37)\r\nlen38 = get_len(38, buy_vol38, sell_vol38)\r\nlen39 = get_len(39, buy_vol39, sell_vol39)\r\nlen40 = get_len(40, buy_vol40, sell_vol40)\r\nlen41 = get_len(41, buy_vol41, sell_vol41)\r\nlen42 = get_len(42, buy_vol42, sell_vol42)\r\nlen43 = get_len(43, buy_vol43, sell_vol43)\r\nlen44 = get_len(44, buy_vol44, sell_vol44)\r\nlen45 = get_len(45, buy_vol45, sell_vol45)\r\nlen46 = get_len(46, buy_vol46, sell_vol46)\r\nlen47 = get_len(47, buy_vol47, sell_vol47)\r\nlen48 = get_len(48, buy_vol48, sell_vol48)\r\nlen49 = get_len(49, buy_vol49, sell_vol49)\r\nlen50 = get_len(50, buy_vol50, sell_vol50)\r\n\r\n// for normal mode we use buy/sell vol 51..100\r\n// for buy_sell_mode num_levels has been already halved and buy/sell volumes with index > num_levels are empty => use buy/sell vol 1..50 instead\r\nlen51 = not buy_sell_mode ? get_len(51, buy_vol51, sell_vol51) : get_len(51, buy_vol1, sell_vol1)\r\nlen52 = not buy_sell_mode ? get_len(52, buy_vol52, sell_vol52) : get_len(52, buy_vol2, sell_vol2)\r\nlen53 = not buy_sell_mode ? get_len(53, buy_vol53, sell_vol53) : get_len(53, buy_vol3, sell_vol3)\r\nlen54 = not buy_sell_mode ? get_len(54, buy_vol54, sell_vol54) : get_len(54, buy_vol4, sell_vol4)\r\nlen55 = not buy_sell_mode ? get_len(55, buy_vol55, sell_vol55) : get_len(55, buy_vol5, sell_vol5)\r\nlen56 = not buy_sell_mode ? get_len(56, buy_vol56, sell_vol56) : get_len(56, buy_vol6, sell_vol6)\r\nlen57 = not buy_sell_mode ? get_len(57, buy_vol57, sell_vol57) : get_len(57, buy_vol7, sell_vol7)\r\nlen58 = not buy_sell_mode ? get_len(58, buy_vol58, sell_vol58) : get_len(58, buy_vol8, sell_vol8)\r\nlen59 = not buy_sell_mode ? get_len(59, buy_vol59, sell_vol59) : get_len(59, buy_vol9, sell_vol9)\r\nlen60 = not buy_sell_mode ? get_len(60, buy_vol60, sell_vol60) : get_len(60, buy_vol10, sell_vol10)\r\nlen61 = not buy_sell_mode ? get_len(61, buy_vol61, sell_vol61) : get_len(61, buy_vol11, sell_vol11)\r\nlen62 = not buy_sell_mode ? get_len(62, buy_vol62, sell_vol62) : get_len(62, buy_vol12, sell_vol12)\r\nlen63 = not buy_sell_mode ? get_len(63, buy_vol63, sell_vol63) : get_len(63, buy_vol13, sell_vol13)\r\nlen64 = not buy_sell_mode ? get_len(64, buy_vol64, sell_vol64) : get_len(64, buy_vol14, sell_vol14)\r\nlen65 = not buy_sell_mode ? get_len(65, buy_vol65, sell_vol65) : get_len(65, buy_vol15, sell_vol15)\r\nlen66 = not buy_sell_mode ? get_len(66, buy_vol66, sell_vol66) : get_len(66, buy_vol16, sell_vol16)\r\nlen67 = not buy_sell_mode ? get_len(67, buy_vol67, sell_vol67) : get_len(67, buy_vol17, sell_vol17)\r\nlen68 = not buy_sell_mode ? get_len(68, buy_vol68, sell_vol68) : get_len(68, buy_vol18, sell_vol18)\r\nlen69 = not buy_sell_mode ? get_len(69, buy_vol69, sell_vol69) : get_len(69, buy_vol19, sell_vol19)\r\nlen70 = not buy_sell_mode ? get_len(70, buy_vol70, sell_vol70) : get_len(70, buy_vol20, sell_vol20)\r\nlen71 = not buy_sell_mode ? get_len(71, buy_vol71, sell_vol71) : get_len(71, buy_vol21, sell_vol21)\r\nlen72 = not buy_sell_mode ? get_len(72, buy_vol72, sell_vol72) : get_len(72, buy_vol22, sell_vol22)\r\nlen73 = not buy_sell_mode ? get_len(73, buy_vol73, sell_vol73) : get_len(73, buy_vol23, sell_vol23)\r\nlen74 = not buy_sell_mode ? get_len(74, buy_vol74, sell_vol74) : get_len(74, buy_vol24, sell_vol24)\r\nlen75 = not buy_sell_mode ? get_len(75, buy_vol75, sell_vol75) : get_len(75, buy_vol25, sell_vol25)\r\nlen76 = not buy_sell_mode ? get_len(76, buy_vol76, sell_vol76) : get_len(76, buy_vol26, sell_vol26)\r\nlen77 = not buy_sell_mode ? get_len(77, buy_vol77, sell_vol77) : get_len(77, buy_vol27, sell_vol27)\r\nlen78 = not buy_sell_mode ? get_len(78, buy_vol78, sell_vol78) : get_len(78, buy_vol28, sell_vol28)\r\nlen79 = not buy_sell_mode ? get_len(79, buy_vol79, sell_vol79) : get_len(79, buy_vol29, sell_vol29)\r\nlen80 = not buy_sell_mode ? get_len(80, buy_vol80, sell_vol80) : get_len(80, buy_vol30, sell_vol30)\r\nlen81 = not buy_sell_mode ? get_len(81, buy_vol81, sell_vol81) : get_len(81, buy_vol31, sell_vol31)\r\nlen82 = not buy_sell_mode ? get_len(82, buy_vol82, sell_vol82) : get_len(82, buy_vol32, sell_vol32)\r\nlen83 = not buy_sell_mode ? get_len(83, buy_vol83, sell_vol83) : get_len(83, buy_vol33, sell_vol33)\r\nlen84 = not buy_sell_mode ? get_len(84, buy_vol84, sell_vol84) : get_len(84, buy_vol34, sell_vol34)\r\nlen85 = not buy_sell_mode ? get_len(85, buy_vol85, sell_vol85) : get_len(85, buy_vol35, sell_vol35)\r\nlen86 = not buy_sell_mode ? get_len(86, buy_vol86, sell_vol86) : get_len(86, buy_vol36, sell_vol36)\r\nlen87 = not buy_sell_mode ? get_len(87, buy_vol87, sell_vol87) : get_len(87, buy_vol37, sell_vol37)\r\nlen88 = not buy_sell_mode ? get_len(88, buy_vol88, sell_vol88) : get_len(88, buy_vol38, sell_vol38)\r\nlen89 = not buy_sell_mode ? get_len(89, buy_vol89, sell_vol89) : get_len(89, buy_vol39, sell_vol39)\r\nlen90 = not buy_sell_mode ? get_len(90, buy_vol90, sell_vol90) : get_len(90, buy_vol40, sell_vol40)\r\nlen91 = not buy_sell_mode ? get_len(91, buy_vol91, sell_vol91) : get_len(91, buy_vol41, sell_vol41)\r\nlen92 = not buy_sell_mode ? get_len(92, buy_vol92, sell_vol92) : get_len(92, buy_vol42, sell_vol42)\r\nlen93 = not buy_sell_mode ? get_len(93, buy_vol93, sell_vol93) : get_len(93, buy_vol43, sell_vol43)\r\nlen94 = not buy_sell_mode ? get_len(94, buy_vol94, sell_vol94) : get_len(94, buy_vol44, sell_vol44)\r\nlen95 = not buy_sell_mode ? get_len(95, buy_vol95, sell_vol95) : get_len(95, buy_vol45, sell_vol45)\r\nlen96 = not buy_sell_mode ? get_len(96, buy_vol96, sell_vol96) : get_len(96, buy_vol46, sell_vol46)\r\nlen97 = not buy_sell_mode ? get_len(97, buy_vol97, sell_vol97) : get_len(97, buy_vol47, sell_vol47)\r\nlen98 = not buy_sell_mode ? get_len(98, buy_vol98, sell_vol98) : get_len(98, buy_vol48, sell_vol48)\r\nlen99 = not buy_sell_mode ? get_len(99, buy_vol99, sell_vol99) : get_len(99, buy_vol49, sell_vol49)\r\nlen100 = not buy_sell_mode ? get_len(100, buy_vol100, sell_vol100) : get_len(100, buy_vol50, sell_vol50)\r\n\r\n\r\n\r\n// Buy/Sell Levels\r\n\r\n// levels are relative to pl with step h, shift compensates for width outline plotted from the center of each line instead of its bottom\r\n// level can't be mutable/function because plot linewidth depends on it\r\nlevel1 = pl + 0 * h + shift\r\nlevel2 = pl + 1 * h + shift\r\nlevel3 = pl + 2 * h + shift\r\nlevel4 = pl + 3 * h + shift\r\nlevel5 = pl + 4 * h + shift\r\nlevel6 = pl + 5 * h + shift\r\nlevel7 = pl + 6 * h + shift\r\nlevel8 = pl + 7 * h + shift\r\nlevel9 = pl + 8 * h + shift\r\nlevel10 = pl + 9 * h + shift\r\nlevel11 = pl + 10 * h + shift\r\nlevel12 = pl + 11 * h + shift\r\nlevel13 = pl + 12 * h + shift\r\nlevel14 = pl + 13 * h + shift\r\nlevel15 = pl + 14 * h + shift\r\nlevel16 = pl + 15 * h + shift\r\nlevel17 = pl + 16 * h + shift\r\nlevel18 = pl + 17 * h + shift\r\nlevel19 = pl + 18 * h + shift\r\nlevel20 = pl + 19 * h + shift\r\nlevel21 = pl + 20 * h + shift\r\nlevel22 = pl + 21 * h + shift\r\nlevel23 = pl + 22 * h + shift\r\nlevel24 = pl + 23 * h + shift\r\nlevel25 = pl + 24 * h + shift\r\nlevel26 = pl + 25 * h + shift\r\nlevel27 = pl + 26 * h + shift\r\nlevel28 = pl + 27 * h + shift\r\nlevel29 = pl + 28 * h + shift\r\nlevel30 = pl + 29 * h + shift\r\nlevel31 = pl + 30 * h + shift\r\nlevel32 = pl + 31 * h + shift\r\nlevel33 = pl + 32 * h + shift\r\nlevel34 = pl + 33 * h + shift\r\nlevel35 = pl + 34 * h + shift\r\nlevel36 = pl + 35 * h + shift\r\nlevel37 = pl + 36 * h + shift\r\nlevel38 = pl + 37 * h + shift\r\nlevel39 = pl + 38 * h + shift\r\nlevel40 = pl + 39 * h + shift\r\nlevel41 = pl + 40 * h + shift\r\nlevel42 = pl + 41 * h + shift\r\nlevel43 = pl + 42 * h + shift\r\nlevel44 = pl + 43 * h + shift\r\nlevel45 = pl + 44 * h + shift\r\nlevel46 = pl + 45 * h + shift\r\nlevel47 = pl + 46 * h + shift\r\nlevel48 = pl + 47 * h + shift\r\nlevel49 = pl + 48 * h + shift\r\nlevel50 = pl + 49 * h + shift\r\nlevel51 = pl + 50 * h + shift  // required for width calculation\r\n\r\n// for 51..100 line objects level can be a function\r\n// removed 50 level vars to minimize the total number of vars <= max 1000 vars limit\r\n// uses pl, h, shift - must remain after\r\nget_level(index) =>\r\n    level = not buy_sell_mode or (buy_sell_mode and index <= 50) ? pl + (index - 1) * h + shift : pl + (index - 51) * h + shift\r\n\r\n\r\n// we don't need level tops in this version\r\n\r\n// Level Offsets\r\n\r\ndir = flip_levels ? 1 : -1\r\n\r\n// both range and start_bar can be > n producing negative index vaes\r\n// must be >= 0 for other offsets to work\r\n\r\n// if range = 0 (All History) first_bar_offset is always the offset to the first bar n=0 on the chart regardless of start_bar it is applied to cur_bar not start_bar\r\nfirst_bar_offset = range == 0 ? total_bars : range_start_bars // min(total_bars, start_bar + range - 1)\r\n\r\nlast_bar_offset = range_start_bars >= range_bars ? range_start_bars - range_bars + 1 : 0 // na(range_end_bars) ? first_bar_offset : range_end_bars\r\n\r\nrange_offset = anchor == \"cur bar\" ? 0 : anchor == \"range start\" ? last_bar_offset : first_bar_offset\r\n// range_offset = anchor == \"cur bar\" ? 0 : anchor == \"range start\" ? start_bar : start_bar + range - 1\r\n\r\n// zero line offset\r\n// zero offset is added to the anchor point\r\nz_offset = zero_offset - range_offset\r\n\r\n// for levels facing left from zero (default) - apply offset to the last bar, for flipped levels facing right from zero - apply offset to the first bar\r\nl_offset = dir == 1 ? z_offset - 1 : z_offset + length // - 1\r\n\r\n// micro adjustments for zero and cover offsets depending on the cover/level histogram bar width for proper alignment\r\nadj_z_offset = z_offset - dir * adj_zero_offset\r\n\r\n// extend cover to the right to compensate for cover offset adjustment\r\ncover_length = length + ext_length\r\nc_offset = dir == 1 ? z_offset : z_offset + cover_length - 1\r\nc_offset := c_offset - dir * cover_offset\r\n\r\n// for plotshape you need z_offset, for plot columns - l_offset with length\r\n// relative to zero = inverse dir\r\npoc_offset := z_offset - dir * poc_offset\r\nva_offset := z_offset - dir * va_offset\r\n\r\n\r\n// removed 100 offset vars to minimize the total number of vars <= max 1000 vars limit\r\nget_offset(len) =>\r\n    dir = flip_levels ? 1 : -1\r\n    res = l_offset + dir * len\r\n\r\n\r\n// Level Widths\r\n\r\n// doesn't work - plot linewidth can't be mutable/function, can't be float, can only be a math/const expression => produces default tiny line, changes don't affect output\r\n// adj_width(level1, level2) =>\r\n    // k = 1 - log(level1)/log(level2)\r\n    // w = line_width * width_multiplier\r\n    // res = adjust_width ? floor(k * w) : floor(w)\r\n\r\n// use line_width for normal scale and line_width * width_multiplier for log scale\r\nw = adjust_width ? line_width * width_multiplier : line_width\r\n\r\n// Adjust Line Width for Log Scale mode:\r\n//  - produces smaller width for higher price values based on 1 - log ratio of adjacent levels\r\n//  - when h <= 1 or level = 0 (shift = 0) or level = 1 widths may not work due to log() limits\r\n//  - double abs is required for high precision small price charts with h < 0.01 => log(0.01), when width is negative\r\n//  - log(0) => NaN, log(1) = 0, division by zero => when h = 0.1, 0.2 and 0.5 widths of certain levels will be zero\r\n//  - when Adjust Line Width for Log Scale is false there are no width issues\r\n// this ensures that width1 will be shown and within max_deviation from width2 (this doesn't fix other levels):\r\n//  - when level1 = 0 width1 is NaN (not shown) \r\n//  - when level1 = 1 width1 is extremely large value w\r\nline_width1_ = adjust_width ? abs(floor((1 - abs(log10(level1)/log10(level2))) * w)) : floor(w)\r\nline_width2 = adjust_width ? abs(floor((1 - abs(log10(level2)/log10(level3))) * w)) : floor(w)\r\nline_width2_ = floor(line_width2 * max_deviation)\r\n\r\n// na, nz, fixnan, float don't work as log(0) na check - can't cast to const\r\n// line_width1 = line_width1_ ? line_width1_ : line_width2_\r\n// line_width1 = not na(line_width1_) ? line_width1_ : line_width2_\r\n// line_width1 = line_width1_ == log(0) ? line_width1_ : line_width2_\r\n\r\n// works as log(0) na check for const expressions - nothing else works!\r\nline_width1 = line_width1_ > 0 ? line_width1_ : line_width2_\r\n\r\n// line_width1 = adjust_width ? abs(floor((1 - abs(log10(level1)/log10(level2))) * w)) : floor(w)\r\n// line_width2 = adjust_width ? abs(floor((1 - abs(log10(level2)/log10(level3))) * w)) : floor(w)\r\nline_width3 = adjust_width ? abs(floor((1 - abs(log10(level3)/log10(level4))) * w)) : floor(w)\r\nline_width4 = adjust_width ? abs(floor((1 - abs(log10(level4)/log10(level5))) * w)) : floor(w)\r\nline_width5 = adjust_width ? abs(floor((1 - abs(log10(level5)/log10(level6))) * w)) : floor(w)\r\nline_width6 = adjust_width ? abs(floor((1 - abs(log10(level6)/log10(level7))) * w)) : floor(w)\r\nline_width7 = adjust_width ? abs(floor((1 - abs(log10(level7)/log10(level8))) * w)) : floor(w)\r\nline_width8 = adjust_width ? abs(floor((1 - abs(log10(level8)/log10(level9))) * w)) : floor(w)\r\nline_width9 = adjust_width ? abs(floor((1 - abs(log10(level9)/log10(level10))) * w)) : floor(w)\r\nline_width10 = adjust_width ? abs(floor((1 - abs(log10(level10)/log10(level11))) * w)) : floor(w)\r\nline_width11 = adjust_width ? abs(floor((1 - abs(log10(level11)/log10(level12))) * w)) : floor(w)\r\nline_width12 = adjust_width ? abs(floor((1 - abs(log10(level12)/log10(level13))) * w)) : floor(w)\r\nline_width13 = adjust_width ? abs(floor((1 - abs(log10(level13)/log10(level14))) * w)) : floor(w)\r\nline_width14 = adjust_width ? abs(floor((1 - abs(log10(level14)/log10(level15))) * w)) : floor(w)\r\nline_width15 = adjust_width ? abs(floor((1 - abs(log10(level15)/log10(level16))) * w)) : floor(w)\r\nline_width16 = adjust_width ? abs(floor((1 - abs(log10(level16)/log10(level17))) * w)) : floor(w)\r\nline_width17 = adjust_width ? abs(floor((1 - abs(log10(level17)/log10(level18))) * w)) : floor(w)\r\nline_width18 = adjust_width ? abs(floor((1 - abs(log10(level18)/log10(level19))) * w)) : floor(w)\r\nline_width19 = adjust_width ? abs(floor((1 - abs(log10(level19)/log10(level20))) * w)) : floor(w)\r\nline_width20 = adjust_width ? abs(floor((1 - abs(log10(level20)/log10(level21))) * w)) : floor(w)\r\nline_width21 = adjust_width ? abs(floor((1 - abs(log10(level21)/log10(level22))) * w)) : floor(w)\r\nline_width22 = adjust_width ? abs(floor((1 - abs(log10(level22)/log10(level23))) * w)) : floor(w)\r\nline_width23 = adjust_width ? abs(floor((1 - abs(log10(level23)/log10(level24))) * w)) : floor(w)\r\nline_width24 = adjust_width ? abs(floor((1 - abs(log10(level24)/log10(level25))) * w)) : floor(w)\r\nline_width25 = adjust_width ? abs(floor((1 - abs(log10(level25)/log10(level26))) * w)) : floor(w)\r\nline_width26 = adjust_width ? abs(floor((1 - abs(log10(level26)/log10(level27))) * w)) : floor(w)\r\nline_width27 = adjust_width ? abs(floor((1 - abs(log10(level27)/log10(level28))) * w)) : floor(w)\r\nline_width28 = adjust_width ? abs(floor((1 - abs(log10(level28)/log10(level29))) * w)) : floor(w)\r\nline_width29 = adjust_width ? abs(floor((1 - abs(log10(level29)/log10(level30))) * w)) : floor(w)\r\nline_width30 = adjust_width ? abs(floor((1 - abs(log10(level30)/log10(level31))) * w)) : floor(w)\r\nline_width31 = adjust_width ? abs(floor((1 - abs(log10(level31)/log10(level32))) * w)) : floor(w)\r\nline_width32 = adjust_width ? abs(floor((1 - abs(log10(level32)/log10(level33))) * w)) : floor(w)\r\nline_width33 = adjust_width ? abs(floor((1 - abs(log10(level33)/log10(level34))) * w)) : floor(w)\r\nline_width34 = adjust_width ? abs(floor((1 - abs(log10(level34)/log10(level35))) * w)) : floor(w)\r\nline_width35 = adjust_width ? abs(floor((1 - abs(log10(level35)/log10(level36))) * w)) : floor(w)\r\nline_width36 = adjust_width ? abs(floor((1 - abs(log10(level36)/log10(level37))) * w)) : floor(w)\r\nline_width37 = adjust_width ? abs(floor((1 - abs(log10(level37)/log10(level38))) * w)) : floor(w)\r\nline_width38 = adjust_width ? abs(floor((1 - abs(log10(level38)/log10(level39))) * w)) : floor(w)\r\nline_width39 = adjust_width ? abs(floor((1 - abs(log10(level39)/log10(level40))) * w)) : floor(w)\r\nline_width40 = adjust_width ? abs(floor((1 - abs(log10(level40)/log10(level41))) * w)) : floor(w)\r\nline_width41 = adjust_width ? abs(floor((1 - abs(log10(level41)/log10(level42))) * w)) : floor(w)\r\nline_width42 = adjust_width ? abs(floor((1 - abs(log10(level42)/log10(level43))) * w)) : floor(w)\r\nline_width43 = adjust_width ? abs(floor((1 - abs(log10(level43)/log10(level44))) * w)) : floor(w)\r\nline_width44 = adjust_width ? abs(floor((1 - abs(log10(level44)/log10(level45))) * w)) : floor(w)\r\nline_width45 = adjust_width ? abs(floor((1 - abs(log10(level45)/log10(level46))) * w)) : floor(w)\r\nline_width46 = adjust_width ? abs(floor((1 - abs(log10(level46)/log10(level47))) * w)) : floor(w)\r\nline_width47 = adjust_width ? abs(floor((1 - abs(log10(level47)/log10(level48))) * w)) : floor(w)\r\nline_width48 = adjust_width ? abs(floor((1 - abs(log10(level48)/log10(level49))) * w)) : floor(w)\r\nline_width49 = adjust_width ? abs(floor((1 - abs(log10(level49)/log10(level50))) * w)) : floor(w)\r\nline_width50 = adjust_width ? abs(floor((1 - abs(log10(level50)/log10(level51))) * w)) : floor(w)\r\n\r\nwidth_ratio(level1, level2) =>\r\n    res = adjust_width ? abs(floor((1 - abs(log10(level1)/log10(level2))) * w)) : floor(w)\r\n\r\n// removed 50 width vars to minimize the total number of vars <= max 1000 vars limit\r\n// for 51..100 line object levels width can be a function\r\n// get_adj_width(index) =>\r\n//     l1 = index\r\n//     l2 = l1 + 1\r\n//     l3 = l1 + 2\r\n//     level1 = get_level(l1)\r\n//     level2 = get_level(l2)\r\n//     level3 = get_level(l3)\r\n\r\n//     // in buy_sell_mode for last level50 use static level51 (required) instead of level1 (returned by get_level) to prevent extremely large width\r\n//     if buy_sell_mode and (index == 50)\r\n//         level2 := level51\r\n\r\n//     // this should fix any log(0) level in 51..100 range - replace it with the next level's width * max_deviation\r\n//     // width1_ = adjust_width ? abs(floor((1 - abs(log10(level1)/log10(level2))) * w)) : floor(w)\r\n//     // width2 = adjust_width ? abs(floor((1 - abs(log10(level2)/log10(level3))) * w)) : floor(w)\r\n//     // moving calculations into a nested function width_ratio reduces the compiled code size\r\n//     // Compiled script code is too long: 50157. The limit is 50000\r\n//     width1_ = width_ratio(level1, level2)\r\n//     width2 = width_ratio(level2, level3)\r\n//     width2_ = floor(width2 * max_deviation)\r\n    \r\n//     // this particular cond results in the 50K limit for the compiled code size error\r\n//     // Compiled script code is too long: 50164. The limit is 50000\r\n//     // here this doesn't work as log(0) na check\r\n//     // adj_width = width1_ > 0 ? width1_ : width2_\r\n//     // not na works because line object's width can be var, not const\r\n//     // adj_width = not na(width1_) ? width1_ : width2_\r\n//     // dropping the cond will fit the compiled size limit\r\n//     // adj_width = width1_\r\n\r\n//     adj_width = not na(width1_) ? width1_ : width2_\r\n\r\n// get_width(index) =>\r\n//     // normal and buy/sell mode indexes\r\n//     l1 = index\r\n//     l2 = l1 - 50\r\n//     adj_width1 = get_adj_width(l1)\r\n//     adj_width2 = get_adj_width(l2)\r\n\r\n//     width = not buy_sell_mode ? adj_width1 : adj_width2\r\n\r\n// Pro Tip:\r\n// apparently merging 2 nested width functions into 1 fits the max 50K compiled size limit!\r\n// for 51..100 line object levels width can be a function\r\n// - in normal mode returns level 51..100 widths\r\n// - in buy_sell_mode returns level 1..50 widths for levels 51..100 respectively because levels 51..100 don't exist\r\n// uses fixed level51 - must remain after\r\nget_width(index) =>\r\n    // normal and buy/sell mode indexes\r\n    l1a = index\r\n    l2a = l1a + 1\r\n    l3a = l1a + 2\r\n    level1a = get_level(l1a)\r\n    level2a = get_level(l2a)\r\n    level3a = get_level(l3a)\r\n\r\n    // this should fix any log(0) level in 51..100 range - replace it with the next level's width * max_deviation\r\n    // moving calculations into a nested function width_ratio reduces the compiled code size\r\n    width1_ = width_ratio(level1a, level2a)\r\n    width2 = width_ratio(level2a, level3a)\r\n    width2_ = floor(width2 * max_deviation)\r\n    \r\n    adj_width1 = not na(width1_) ? width1_ : width2_\r\n    adj_width2 = 0\r\n\r\n    // always true\r\n    if index > 50\r\n        l1b = index - 50\r\n        l2b = l1b + 1\r\n        l3b = l1b + 2\r\n        level1b = get_level(l1b)\r\n        level2b = get_level(l2b)\r\n        level3b = get_level(l3b)\r\n\r\n        // in normal mode index = 100 => get_level(101) returns proper level101\r\n        // in buy_sell_mode last level 51..100 index = 100 => l1b = 50, l2b = 51, get_level(51) returns level1 - use static level51 instead (required for log calculation) to prevent extremely large width\r\n        // level50 => level1, level51 => level2 instead of level1\r\n        if buy_sell_mode and (index == 100)\r\n            level2b := level51\r\n\r\n        width3_ = width_ratio(level1b, level2b)\r\n        width4 = width_ratio(level2b, level3b)\r\n        width4_ = floor(width4 * max_deviation)\r\n        \r\n        adj_width2 := not na(width3_) ? width3_ : width4_\r\n\r\n\r\n    width = not buy_sell_mode ? adj_width1 : adj_width2\r\n\r\n\r\n// Levels\r\n\r\n// This script:\r\n// - has exactly 50K compiled code size\r\n// - uses max 50 line objects:\r\n// - uses max 64 plot outputs:\r\n//   - 50 * 1x color plots (levels) = 50\r\n//   - 2 * 1x color plots (zero + cover) = 2\r\n//   - 2 * 2x color plots (poc levels) = 4\r\n//   - 2 * 2x color plots (va lines) + 2 * 1x color plots (va zones) = 6\r\n//   - 1 * 1x color plot (bgcolor) = 1\r\n//   - 1 * 1x color plot (max_vol for sli) = 1\r\n// - ~300 vars were removed to fit the max 1000 vars limit: Script has too many local variables (1064) in \"#f51\": #loc_0, #loc_1, #loc_2, #loc_3, #loc_4... The limit is 1000\r\n//   var count: 800 => 500\r\n//   - 100 buy_vol (required)\r\n//   - 100 sell_vol (required)\r\n//   - 50 levels (required) (-50)\r\n//   - 0 offsets (-100)\r\n//   - 0 vol (-100)\r\n//   - 100 len (required)\r\n//   - 50 width (required) (-50)\r\n//   - 50 lines (required)\r\n//   - 50 framework\r\n//\r\n// - you can't plot dynamic profile levels using plotchar because you can't modify show_last in script - can ony hide using is_in_range na cond, but can't delete history\r\n// - histbase can't be var/function/mutable (doesn't affect the output), can only be const expression, can be set from input\r\n//\r\n// Pro Tip:\r\n// - you can use Atom/VS Code multi-caret editing, auto numbering and pine snippets to speed up code generation and even debug it in some cases (FF60+ also supports multi-caret editing)\r\n// - the following set of 50 lines is auto generated by these 2 Emmet lines (Ctrl-E to expand in Atom):\r\n// {plot(show_levels and (num_levels >= $) ? level$ : na, title=\"Volume $\", style=level_style, linewidth=line_width$, color=level_color, transp=level_transp, offset=get_offset(len$), show_last=length)\r\n// }*50\r\n// you can only have 50 plot levels\r\nplot(show_levels and (num_levels >= 1) ? level1 : na, title=\"Volume 1\", style=level_style, linewidth=line_width1, color=level_color, transp=level_transp, offset=get_offset(len1), show_last=length)\r\nplot(show_levels and (num_levels >= 2) ? level2 : na, title=\"Volume 2\", style=level_style, linewidth=line_width2, color=level_color, transp=level_transp, offset=get_offset(len2), show_last=length)\r\nplot(show_levels and (num_levels >= 3) ? level3 : na, title=\"Volume 3\", style=level_style, linewidth=line_width3, color=level_color, transp=level_transp, offset=get_offset(len3), show_last=length)\r\nplot(show_levels and (num_levels >= 4) ? level4 : na, title=\"Volume 4\", style=level_style, linewidth=line_width4, color=level_color, transp=level_transp, offset=get_offset(len4), show_last=length)\r\nplot(show_levels and (num_levels >= 5) ? level5 : na, title=\"Volume 5\", style=level_style, linewidth=line_width5, color=level_color, transp=level_transp, offset=get_offset(len5), show_last=length)\r\nplot(show_levels and (num_levels >= 6) ? level6 : na, title=\"Volume 6\", style=level_style, linewidth=line_width6, color=level_color, transp=level_transp, offset=get_offset(len6), show_last=length)\r\nplot(show_levels and (num_levels >= 7) ? level7 : na, title=\"Volume 7\", style=level_style, linewidth=line_width7, color=level_color, transp=level_transp, offset=get_offset(len7), show_last=length)\r\nplot(show_levels and (num_levels >= 8) ? level8 : na, title=\"Volume 8\", style=level_style, linewidth=line_width8, color=level_color, transp=level_transp, offset=get_offset(len8), show_last=length)\r\nplot(show_levels and (num_levels >= 9) ? level9 : na, title=\"Volume 9\", style=level_style, linewidth=line_width9, color=level_color, transp=level_transp, offset=get_offset(len9), show_last=length)\r\nplot(show_levels and (num_levels >= 10) ? level10 : na, title=\"Volume 10\", style=level_style, linewidth=line_width10, color=level_color, transp=level_transp, offset=get_offset(len10), show_last=length)\r\nplot(show_levels and (num_levels >= 11) ? level11 : na, title=\"Volume 11\", style=level_style, linewidth=line_width11, color=level_color, transp=level_transp, offset=get_offset(len11), show_last=length)\r\nplot(show_levels and (num_levels >= 12) ? level12 : na, title=\"Volume 12\", style=level_style, linewidth=line_width12, color=level_color, transp=level_transp, offset=get_offset(len12), show_last=length)\r\nplot(show_levels and (num_levels >= 13) ? level13 : na, title=\"Volume 13\", style=level_style, linewidth=line_width13, color=level_color, transp=level_transp, offset=get_offset(len13), show_last=length)\r\nplot(show_levels and (num_levels >= 14) ? level14 : na, title=\"Volume 14\", style=level_style, linewidth=line_width14, color=level_color, transp=level_transp, offset=get_offset(len14), show_last=length)\r\nplot(show_levels and (num_levels >= 15) ? level15 : na, title=\"Volume 15\", style=level_style, linewidth=line_width15, color=level_color, transp=level_transp, offset=get_offset(len15), show_last=length)\r\nplot(show_levels and (num_levels >= 16) ? level16 : na, title=\"Volume 16\", style=level_style, linewidth=line_width16, color=level_color, transp=level_transp, offset=get_offset(len16), show_last=length)\r\nplot(show_levels and (num_levels >= 17) ? level17 : na, title=\"Volume 17\", style=level_style, linewidth=line_width17, color=level_color, transp=level_transp, offset=get_offset(len17), show_last=length)\r\nplot(show_levels and (num_levels >= 18) ? level18 : na, title=\"Volume 18\", style=level_style, linewidth=line_width18, color=level_color, transp=level_transp, offset=get_offset(len18), show_last=length)\r\nplot(show_levels and (num_levels >= 19) ? level19 : na, title=\"Volume 19\", style=level_style, linewidth=line_width19, color=level_color, transp=level_transp, offset=get_offset(len19), show_last=length)\r\nplot(show_levels and (num_levels >= 20) ? level20 : na, title=\"Volume 20\", style=level_style, linewidth=line_width20, color=level_color, transp=level_transp, offset=get_offset(len20), show_last=length)\r\nplot(show_levels and (num_levels >= 21) ? level21 : na, title=\"Volume 21\", style=level_style, linewidth=line_width21, color=level_color, transp=level_transp, offset=get_offset(len21), show_last=length)\r\nplot(show_levels and (num_levels >= 22) ? level22 : na, title=\"Volume 22\", style=level_style, linewidth=line_width22, color=level_color, transp=level_transp, offset=get_offset(len22), show_last=length)\r\nplot(show_levels and (num_levels >= 23) ? level23 : na, title=\"Volume 23\", style=level_style, linewidth=line_width23, color=level_color, transp=level_transp, offset=get_offset(len23), show_last=length)\r\nplot(show_levels and (num_levels >= 24) ? level24 : na, title=\"Volume 24\", style=level_style, linewidth=line_width24, color=level_color, transp=level_transp, offset=get_offset(len24), show_last=length)\r\nplot(show_levels and (num_levels >= 25) ? level25 : na, title=\"Volume 25\", style=level_style, linewidth=line_width25, color=level_color, transp=level_transp, offset=get_offset(len25), show_last=length)\r\nplot(show_levels and (num_levels >= 26) ? level26 : na, title=\"Volume 26\", style=level_style, linewidth=line_width26, color=level_color, transp=level_transp, offset=get_offset(len26), show_last=length)\r\nplot(show_levels and (num_levels >= 27) ? level27 : na, title=\"Volume 27\", style=level_style, linewidth=line_width27, color=level_color, transp=level_transp, offset=get_offset(len27), show_last=length)\r\nplot(show_levels and (num_levels >= 28) ? level28 : na, title=\"Volume 28\", style=level_style, linewidth=line_width28, color=level_color, transp=level_transp, offset=get_offset(len28), show_last=length)\r\nplot(show_levels and (num_levels >= 29) ? level29 : na, title=\"Volume 29\", style=level_style, linewidth=line_width29, color=level_color, transp=level_transp, offset=get_offset(len29), show_last=length)\r\nplot(show_levels and (num_levels >= 30) ? level30 : na, title=\"Volume 30\", style=level_style, linewidth=line_width30, color=level_color, transp=level_transp, offset=get_offset(len30), show_last=length)\r\nplot(show_levels and (num_levels >= 31) ? level31 : na, title=\"Volume 31\", style=level_style, linewidth=line_width31, color=level_color, transp=level_transp, offset=get_offset(len31), show_last=length)\r\nplot(show_levels and (num_levels >= 32) ? level32 : na, title=\"Volume 32\", style=level_style, linewidth=line_width32, color=level_color, transp=level_transp, offset=get_offset(len32), show_last=length)\r\nplot(show_levels and (num_levels >= 33) ? level33 : na, title=\"Volume 33\", style=level_style, linewidth=line_width33, color=level_color, transp=level_transp, offset=get_offset(len33), show_last=length)\r\nplot(show_levels and (num_levels >= 34) ? level34 : na, title=\"Volume 34\", style=level_style, linewidth=line_width34, color=level_color, transp=level_transp, offset=get_offset(len34), show_last=length)\r\nplot(show_levels and (num_levels >= 35) ? level35 : na, title=\"Volume 35\", style=level_style, linewidth=line_width35, color=level_color, transp=level_transp, offset=get_offset(len35), show_last=length)\r\nplot(show_levels and (num_levels >= 36) ? level36 : na, title=\"Volume 36\", style=level_style, linewidth=line_width36, color=level_color, transp=level_transp, offset=get_offset(len36), show_last=length)\r\nplot(show_levels and (num_levels >= 37) ? level37 : na, title=\"Volume 37\", style=level_style, linewidth=line_width37, color=level_color, transp=level_transp, offset=get_offset(len37), show_last=length)\r\nplot(show_levels and (num_levels >= 38) ? level38 : na, title=\"Volume 38\", style=level_style, linewidth=line_width38, color=level_color, transp=level_transp, offset=get_offset(len38), show_last=length)\r\nplot(show_levels and (num_levels >= 39) ? level39 : na, title=\"Volume 39\", style=level_style, linewidth=line_width39, color=level_color, transp=level_transp, offset=get_offset(len39), show_last=length)\r\nplot(show_levels and (num_levels >= 40) ? level40 : na, title=\"Volume 40\", style=level_style, linewidth=line_width40, color=level_color, transp=level_transp, offset=get_offset(len40), show_last=length)\r\nplot(show_levels and (num_levels >= 41) ? level41 : na, title=\"Volume 41\", style=level_style, linewidth=line_width41, color=level_color, transp=level_transp, offset=get_offset(len41), show_last=length)\r\nplot(show_levels and (num_levels >= 42) ? level42 : na, title=\"Volume 42\", style=level_style, linewidth=line_width42, color=level_color, transp=level_transp, offset=get_offset(len42), show_last=length)\r\nplot(show_levels and (num_levels >= 43) ? level43 : na, title=\"Volume 43\", style=level_style, linewidth=line_width43, color=level_color, transp=level_transp, offset=get_offset(len43), show_last=length)\r\nplot(show_levels and (num_levels >= 44) ? level44 : na, title=\"Volume 44\", style=level_style, linewidth=line_width44, color=level_color, transp=level_transp, offset=get_offset(len44), show_last=length)\r\nplot(show_levels and (num_levels >= 45) ? level45 : na, title=\"Volume 45\", style=level_style, linewidth=line_width45, color=level_color, transp=level_transp, offset=get_offset(len45), show_last=length)\r\nplot(show_levels and (num_levels >= 46) ? level46 : na, title=\"Volume 46\", style=level_style, linewidth=line_width46, color=level_color, transp=level_transp, offset=get_offset(len46), show_last=length)\r\nplot(show_levels and (num_levels >= 47) ? level47 : na, title=\"Volume 47\", style=level_style, linewidth=line_width47, color=level_color, transp=level_transp, offset=get_offset(len47), show_last=length)\r\nplot(show_levels and (num_levels >= 48) ? level48 : na, title=\"Volume 48\", style=level_style, linewidth=line_width48, color=level_color, transp=level_transp, offset=get_offset(len48), show_last=length)\r\nplot(show_levels and (num_levels >= 49) ? level49 : na, title=\"Volume 49\", style=level_style, linewidth=line_width49, color=level_color, transp=level_transp, offset=get_offset(len49), show_last=length)\r\nplot(show_levels and (num_levels >= 50) ? level50 : na, title=\"Volume 50\", style=level_style, linewidth=line_width50, color=level_color, transp=level_transp, offset=get_offset(len50), show_last=length)\r\n\r\n\r\n// Pinescript v4 Lines\r\n\r\n// Colors\r\n\r\n// doesn't work\r\n// fc(col) =>\r\n//     res = lines_transp == 0 ? color.new(col, 0) : lines_transp == 10 ? color.new(col, 10) : lines_transp == 20 ? color.new(col, 20) : lines_transp == 30 ? color.new(col, 30) : lines_transp == 40 ? color.new(col, 40) : lines_transp == 50 ? color.new(col, 50) : \r\n//          lines_transp == 60 ? color.new(col, 60) : lines_transp == 70 ? color.new(col, 70) : lines_transp == 80 ? color.new(col, 80) : lines_transp == 90 ? color.new(col, 90) : lines_transp == 100 ? color.new(col, 100) : col\r\n\r\n// lines_col := fc(blue)\r\n\r\n\r\nlines_col = color(na)\r\nlines_dim_col = color(na)\r\n\r\n// change color/transparency of line object levels\r\n// set custom transparency for predefined default buy/sell/total colors of the line object\r\n// inverse transp correlation creates the necessary illusion of \"covered\" line objects, although they are shown on top of the cover all the time\r\n// however, only discrete values in 0..100 range are supported. If custom lines_transp is set the inverse effect will not render properly because transp range can't be skewed easily\r\n// more transparent dim color => more visible \"underlying\" line object level\r\n// moving this code inside new_level increases compiled code size instead of reducing it\r\n// Compiled script code is too long: 50228. The limit is 50000\r\nif (lines_col_str == \"\")\r\n    if buy_sell_mode\r\n        // lines_col := volume_type == \"buy\" ? buy_color : sell_color\r\n\r\n        if volume_type == \"buy\"\r\n            lines_col := color_tr(\"buy\", lines_transp)\r\n            lines_dim_col := color_tr(\"buy\", 100 - nva_transp)\r\n        else\r\n            lines_col := color_tr(\"sell\", lines_transp)\r\n            lines_dim_col := color_tr(\"sell\", 100 - nva_transp)\r\n\r\n    if not buy_sell_mode\r\n        lines_col := color_tr(\"total\", lines_transp)\r\n        lines_dim_col := color_tr(\"total\", 100 - nva_transp)\r\n\r\n\r\n// set custom transparency for a custom color of the line object\r\nif (lines_col_str != \"\")\r\n    // regardless of buy_sell_mode, single custom user color replaces all default colors\r\n    lines_col := color_tr(lines_col_str, lines_transp)\r\n    lines_dim_col := color_tr(lines_col_str, 100 - nva_transp)\r\n\r\n\r\n// Line Objects\r\n\r\n// is_nva_zone(level) =>\r\n//     res = ((va_high_level > 0) and (level >= va_high_level)) or ((va_low_level > 0) and (level <= va_low_level))\r\n\r\n// create/delete line objects\r\n// uses va_high/low_level, lines_col, lines_dim_col, get_width() - must remain after\r\nnew_level(index, line_obj, len1, len2) =>\r\n\r\n    level = get_level(index)\r\n    line_width = get_width(index)\r\n    offset1 = get_offset(len1)\r\n    offset2 = get_offset(len2)\r\n\r\n    line_ = line_obj\r\n    line.delete(line_obj)\r\n    line_ := na\r\n\r\n    dir = flip_levels ? 1 : -1\r\n    m_offset = dir == 1 ? 1 : -length\r\n\r\n    // buy_sell_mode\r\n    // len1 = 51..100, len2 = 1..50\r\n    // volume_type = buy/total => len1 = buy, len2 = total\r\n    // volume_type = sell => len1 = total, len2 = buy\r\n\r\n    // offset1 is buy_len for buy_sell_mode volume_type buy or total_len for normal mode\r\n    x1_offset = m_offset + offset1\r\n    x2_offset = z_offset\r\n    if buy_sell_mode\r\n        // offset1 is sell/total_offset, offset2 is buy_len/offset for sell_len (sell_len extends buy_len without overlapping)\r\n        if (volume_type == \"total\") or (volume_type == \"sell\")\r\n            x2_offset := m_offset + offset2\r\n\r\n\r\n    x1 = time + x1_offset * bar_range\r\n    x2 = time + x2_offset * bar_range\r\n    y1 = level\r\n    y2 = level\r\n\r\n    // Line Color\r\n    // when side cover is shown:\r\n    // - for both nva zones dim the actual line object levels because they can't be displayed below the cover\r\n    // - both top/bottom zone covers are still needed in case only plot levels are used (buy_sell_mode or num_levels <= 50)\r\n\r\n    // this particular cond results in the 50K limit for the compiled code size error\r\n    // Pro Tip: to save a few bytes in a compiled code size\r\n    // - reduce the number of conds in heavily used functions\r\n    // - move some code from heavily used functions into global scope\r\n    // - reduce the number of nested function calls in heavily used functions, merge them into a single function\r\n    // - reducing the number of functions gives varied results: saves/loses a few bytes here and there\r\n    // - reducing the number of vars doesn't help much\r\n    // - comments and declared but not used vars/functions are naturally ignored by the compiler\r\n    // wrapping cond in a nested function increases the compiled code size instead of reducing it\r\n    // Compiled script code is too long: 50223. The limit is 50000\r\n    // col = show_va and dim_nva_zones and is_nva_zone(level) ? lines_dim_col : lines_col\r\n    // Compiled script code is too long: 50208. The limit is 50000\r\n    // apparently commenting out the 2nd part of the cond will fit the 50K limit\r\n    nva_cond = ((va_high_level > 0) and (level >= va_high_level)) or ((va_low_level > 0) and (level <= va_low_level))\r\n    col = show_va and dim_nva_zones and nva_cond ? lines_dim_col : lines_col\r\n\r\n    // if na(line_) and not na(n[offset]) and show_lines and (index + half_levels <= num_levels)\r\n    if na(line_) and show_lines // and (index <= half_levels)\r\n        // line.style_solid, line.style_dotted, line.style_dashed, line.style_arrow_left, line.style_arrow_right, line.style_arrow_both\r\n        // x1, y1, x2, y2, xloc, color, style, width\r\n        line_ := line.new(x1, y1, x2, y2, style=line.style_solid, color=col, width=line_width, xloc=xloc.bar_time)\r\n\r\n    line_\r\n\r\n\r\nvar line line1 = na\r\nvar line line2 = na\r\nvar line line3 = na\r\nvar line line4 = na\r\nvar line line5 = na\r\nvar line line6 = na\r\nvar line line7 = na\r\nvar line line8 = na\r\nvar line line9 = na\r\nvar line line10 = na\r\nvar line line11 = na\r\nvar line line12 = na\r\nvar line line13 = na\r\nvar line line14 = na\r\nvar line line15 = na\r\nvar line line16 = na\r\nvar line line17 = na\r\nvar line line18 = na\r\nvar line line19 = na\r\nvar line line20 = na\r\nvar line line21 = na\r\nvar line line22 = na\r\nvar line line23 = na\r\nvar line line24 = na\r\nvar line line25 = na\r\nvar line line26 = na\r\nvar line line27 = na\r\nvar line line28 = na\r\nvar line line29 = na\r\nvar line line30 = na\r\nvar line line31 = na\r\nvar line line32 = na\r\nvar line line33 = na\r\nvar line line34 = na\r\nvar line line35 = na\r\nvar line line36 = na\r\nvar line line37 = na\r\nvar line line38 = na\r\nvar line line39 = na\r\nvar line line40 = na\r\nvar line line41 = na\r\nvar line line42 = na\r\nvar line line43 = na\r\nvar line line44 = na\r\nvar line line45 = na\r\nvar line line46 = na\r\nvar line line47 = na\r\nvar line line48 = na\r\nvar line line49 = na\r\nvar line line50 = na\r\n\r\n// use 51..100 levels\r\nline1 := new_level(51, line1, len51, len1)\r\nline2 := new_level(52, line2, len52, len2)\r\nline3 := new_level(53, line3, len53, len3)\r\nline4 := new_level(54, line4, len54, len4)\r\nline5 := new_level(55, line5, len55, len5)\r\nline6 := new_level(56, line6, len56, len6)\r\nline7 := new_level(57, line7, len57, len7)\r\nline8 := new_level(58, line8, len58, len8)\r\nline9 := new_level(59, line9, len59, len9)\r\nline10 := new_level(60, line10, len60, len10)\r\nline11 := new_level(61, line11, len61, len11)\r\nline12 := new_level(62, line12, len62, len12)\r\nline13 := new_level(63, line13, len63, len13)\r\nline14 := new_level(64, line14, len64, len14)\r\nline15 := new_level(65, line15, len65, len15)\r\nline16 := new_level(66, line16, len66, len16)\r\nline17 := new_level(67, line17, len67, len17)\r\nline18 := new_level(68, line18, len68, len18)\r\nline19 := new_level(69, line19, len69, len19)\r\nline20 := new_level(70, line20, len70, len20)\r\nline21 := new_level(71, line21, len71, len21)\r\nline22 := new_level(72, line22, len72, len22)\r\nline23 := new_level(73, line23, len73, len23)\r\nline24 := new_level(74, line24, len74, len24)\r\nline25 := new_level(75, line25, len75, len25)\r\nline26 := new_level(76, line26, len76, len26)\r\nline27 := new_level(77, line27, len77, len27)\r\nline28 := new_level(78, line28, len78, len28)\r\nline29 := new_level(79, line29, len79, len29)\r\nline30 := new_level(80, line30, len80, len30)\r\nline31 := new_level(81, line31, len81, len31)\r\nline32 := new_level(82, line32, len82, len32)\r\nline33 := new_level(83, line33, len83, len33)\r\nline34 := new_level(84, line34, len84, len34)\r\nline35 := new_level(85, line35, len85, len35)\r\nline36 := new_level(86, line36, len86, len36)\r\nline37 := new_level(87, line37, len87, len37)\r\nline38 := new_level(88, line38, len88, len38)\r\nline39 := new_level(89, line39, len89, len39)\r\nline40 := new_level(90, line40, len90, len40)\r\nline41 := new_level(91, line41, len91, len41)\r\nline42 := new_level(92, line42, len92, len42)\r\nline43 := new_level(93, line43, len93, len43)\r\nline44 := new_level(94, line44, len94, len44)\r\nline45 := new_level(95, line45, len95, len45)\r\nline46 := new_level(96, line46, len96, len46)\r\nline47 := new_level(97, line47, len97, len47)\r\nline48 := new_level(98, line48, len98, len48)\r\nline49 := new_level(99, line49, len99, len49)\r\nline50 := new_level(100, line50, len100, len50)\r\n\r\n\r\n// Zero line, Cover\r\n\r\n// extend cover with cover_ext_height levels up/down to compensate for large level width \r\nc_height = h * cover_ext_height\r\nc_top = ph + c_height\r\nc_base = pl - c_height\r\n\r\n// can't assign show_last dynamically must use a set of 2 plots\r\nplot(show_cover ? c_top : na, title=\"Side Cover\", style=area, histbase=c_base, color=cover_color, transp=0, offset=c_offset, show_last=cover_length)\r\nplot(show_zero ? ph : na, title=\"Zero Line\", style=histogram, histbase=pl, color=zero_color, linewidth=zero_width, offset=adj_z_offset, show_last=1)\r\n\r\n\r\n// POC Lines\r\n\r\n// - POC line is a dynamic level and can't be a plot because you can't delete history. Dynamic levels can only be implemented with plotshape/plotchar fixed str text labels\r\n// - you can't set textcolor from TradingView Style UI, its color option only affects plot color, not textcolor => custom textbox input for textcolor and str to color conversion is necessary\r\n// - setting only textcolor from input: 1x color => 2x color outputs\r\n// - setting both color and textcolor from input: 1x color => 3x color outputs - would reduce the number of levels even more - you can manually set shape (dot) color from Style UI instead\r\npoc_col = get_color(poc_col_str, poc_color)\r\npoc2_col = get_color(poc2_col_str, poc2_color)\r\n\r\n// in VWAP mode Developing POC => VWAP Level\r\nif levels_mode == \"vwap\"\r\n    poc2_col := get_color(vwap_col_str, vwap_color)\r\n\r\n// POC and developing POC (2nd largest traded volume)\r\n// don' confuse poc_color (1x outputs) with poc_col (2x outputs)\r\nplotshape(show_poc and (poc_level > 0) ? poc_level : na, title=\"POC Level\", style=shape.circle, color=poc_color, text=poc_text, textcolor=poc_col, transp=0, location=location.absolute, size=size.auto, offset=poc_offset, show_last=1)\r\nplotshape(show_poc2 and (poc2_level > 0) ? poc2_level : na, title=\"Developing POC/VWAP Level\", style=shape.circle, color=poc2_color, text=poc_text, textcolor=poc2_col, transp=0, location=location.absolute, size=size.auto, offset=poc_offset, show_last=1)\r\n\r\n\r\n// Value Area/VWAP High/Low\r\n\r\nva_high_col = get_color(va_high_col_str, va_high_color)\r\nva_low_col = get_color(va_low_col_str, va_low_color)\r\n\r\n// in VWAP mode VAH/VAL => VWAP High/Low\r\nif levels_mode == \"vwap\"\r\n    va_high_col := get_color(vwap_high_col_str, vwap_high_color)\r\n    va_low_col := get_color(vwap_low_col_str, vwap_low_color)\r\n\r\n\r\n// VA mode 2 - zones\r\n// textcolor = na => 2x plot outputs\r\nva_zone_high = va_high_level + spacing\r\nva_zone_low = va_low_level + spacing\r\n\r\nplotshape(show_va and dim_nva_zones and (va_high_level > 0) ? va_zone_high : na, title=\"Zone Above VA/VWAP High\", style=shape.labeldown, color=nva_zone_color, text=va_high2_text, textcolor=nva_zone_color, transp=nva_transp, location=location.absolute, size=size.auto, offset=va_offset, show_last=1)\r\nplotshape(show_va and dim_nva_zones and (va_low_level > 0) ? va_zone_low : na, title=\"Zone Below VA/VWAP Low\", style=shape.labelup, color=nva_zone_color, text=va_low2_text, textcolor=nva_zone_color, transp=nva_transp, location=location.absolute, size=size.auto, offset=va_offset, show_last=1)\r\n\r\n\r\n// VA mode 1 - lines\r\n// objects further down are plotted above prev ones - lines must remain after zones\r\n// don' confuse va_high_color (1x outputs) with va_high_col (2x outputs)\r\nplotshape(show_va and (va_high_level > 0) ? va_high_level : na, title=\"VA/VWAP High\", style=shape.circle, color=va_high_color, text=va_high1_text, textcolor=va_high_col, transp=0, location=location.absolute, size=size.auto, offset=va_offset, show_last=1)\r\nplotshape(show_va and (va_low_level > 0) ? va_low_level : na, title=\"VA/VWAP Low\", style=shape.circle, color=va_low_color, text=va_low1_text, textcolor=va_low_col, transp=0, location=location.absolute, size=size.auto, offset=va_offset, show_last=1)\r\n\r\n\r\n// Highlight Range\r\nbgcolor_cond = highlight_background and is_in_range ? range_bg_color : na\r\nbgcolor(bgcolor_cond, title=\"Range Background Highlight Color\")\r\n\r\n// not enough plot outputs for this\r\n// barcolor_cond = highlight_bars and is_in_range ? range_bar_color : na\r\n// barcolor(barcolor_cond, title=\"Range Bar Highlight Color\")\r\n\r\n// Max Volume for Vertical SLI\r\nplot(show_max_vol_sli ? max_vol : na, color=red, title=\"Max Volume For Vertical SLI Mode\", show_last=1) \r\n\r\n// plot(n, color=red)\r\n","updated":"2019-07-21T14:43:18.579782Z","version":"3.0"}