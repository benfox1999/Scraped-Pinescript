{"created":"2024-02-23T16:34:36.542031Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"13.0","scriptAccess":"open_no_auth","scriptName":"ICT Killzones & Pivots [TFO]","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// Â© tradeforopp\r\n\r\n//@version=5\r\nindicator(\"ICT Killzones & Pivots [TFO]\", \"ICT Killzones & Pivots [TFO]\", true, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 500)\r\n\r\n\r\n// ---------------------------------------- Constant Functions --------------------------------------------------\r\nget_line_type(_style) =>\r\n    result = switch _style\r\n        'Solid' => line.style_solid\r\n        'Dotted' => line.style_dotted\r\n        'Dashed' => line.style_dashed\r\n    result\r\n\r\nget_size(x) =>\r\n    result = switch x\r\n        'Auto' => size.auto\r\n        'Tiny' => size.tiny\r\n        'Small' => size.small\r\n        'Normal' => size.normal\r\n        'Large' => size.large\r\n        'Huge' => size.huge\r\n        \r\nget_table_pos(pos) =>\r\n    result = switch pos\r\n        \"Bottom Center\" => position.bottom_center\r\n        \"Bottom Left\" => position.bottom_left\r\n        \"Bottom Right\" => position.bottom_right\r\n        \"Middle Center\" => position.middle_center\r\n        \"Middle Left\" => position.middle_left\r\n        \"Middle Right\" => position.middle_right\r\n        \"Top Center\" => position.top_center\r\n        \"Top Left\" => position.top_left\r\n        \"Top Right\" => position.top_right\r\n// ---------------------------------------- Constant Functions --------------------------------------------------\r\n\r\n    \r\n// ---------------------------------------- Inputs --------------------------------------------------\r\nvar g_SETTINGS      = \"Settings\"\r\nmax_days            = input.int(3, \"Session Drawing Limit\", 1, tooltip = \"Only this many drawings will be kept on the chart, for each selected drawing type (killzone boxes, pivot lines, open lines, etc.)\", group = g_SETTINGS)\r\ntf_limit            = input.timeframe(\"30\", \"Timeframe Limit\", tooltip = \"Drawings will not appear on timeframes greater than or equal to this\", group = g_SETTINGS)\r\ngmt_tz              = input.string('America/New_York', \"Timezone\", options = ['America/New_York','GMT-12','GMT-11','GMT-10','GMT-9','GMT-8','GMT-7','GMT-6','GMT-5','GMT-4','GMT-3','GMT-2','GMT-1','GMT+0','GMT+1','GMT+2','GMT+3','GMT+4','GMT+5','GMT+6','GMT+7','GMT+8','GMT+9','GMT+10','GMT+11','GMT+12','GMT+13','GMT+14'], tooltip = \"Note GMT is not adjusted to reflect Daylight Saving Time changes\", group = g_SETTINGS)\r\nlbl_size            = get_size(input.string('Normal', \"Label Size\", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], tooltip = \"The size of all labels\", group = g_SETTINGS))\r\ntxt_color           = input.color(color.black, \"Text Color\", tooltip = \"The color of all label and table text\", group = g_SETTINGS)\r\nuse_cutoff          = input.bool(true, \"Drawing Cutoff Time\", inline = \"CO\", tooltip = \"When enabled, all pivots and open price lines will stop extending at this time\", group = g_SETTINGS)\r\ncutoff              = input.session(\"1200-1201\", \"\", inline = \"CO\", group = g_SETTINGS)\r\n\r\n\r\nvar g_KZ            = \"Killzones\"\r\nshow_kz             = input.bool(true, \"Show Killzone Boxes\", inline = \"KZ\", group = g_KZ)\r\nshow_kz_text        = input.bool(true, \"Display Text\", inline = \"KZ\", group = g_KZ)\r\nbox_transparency    = input.int(70, \"Box Transparency\", 0, 100, group = g_KZ)\r\ntext_transparency   = input.int(50, \"Text Transparency\", 0, 100, group = g_KZ)\r\n\r\nuse_asia            = input.bool(true, \"\", inline = \"ASIA\", group = g_KZ)\r\nas_txt              = input.string(\"Asia\", \"\", inline = \"ASIA\", group = g_KZ)\r\nasia                = input.session(\"2000-0000\", \"\", inline = \"ASIA\", group = g_KZ)\r\nas_color            = input.color(color.blue, \"\", inline = \"ASIA\", group = g_KZ)\r\n\r\nuse_london          = input.bool(true, \"\", inline = \"LONDON\", group = g_KZ)\r\nlo_txt              = input.string(\"London\", \"\", inline = \"LONDON\", group = g_KZ)\r\nlondon              = input.session(\"0200-0500\", \"\", inline = \"LONDON\", group = g_KZ)\r\nlo_color            = input.color(color.red, \"\", inline = \"LONDON\", group = g_KZ)\r\n\r\nuse_nyam            = input.bool(true, \"\", inline = \"NYAM\", group = g_KZ)\r\nna_txt              = input.string(\"NY AM\", \"\", inline = \"NYAM\", group = g_KZ)\r\nnyam                = input.session(\"0930-1100\", \"\", inline = \"NYAM\", group = g_KZ)\r\nna_color            = input.color(#089981, \"\", inline = \"NYAM\", group = g_KZ)\r\n\r\nuse_nylu            = input.bool(true, \"\", inline = \"NYLU\", group = g_KZ)\r\nnl_txt              = input.string(\"NY Lunch\", \"\", inline = \"NYLU\", group = g_KZ)\r\nnylu                = input.session(\"1200-1300\", \"\", inline = \"NYLU\", group = g_KZ)\r\nnl_color            = input.color(color.yellow, \"\", inline = \"NYLU\", group = g_KZ)\r\n\r\nuse_nypm            = input.bool(true, \"\", inline = \"NYPM\", group = g_KZ)\r\nnp_txt              = input.string(\"NY PM\", \"\", inline = \"NYPM\", group = g_KZ)\r\nnypm                = input.session(\"1330-1600\", \"\", inline = \"NYPM\", group = g_KZ)\r\nnp_color            = input.color(color.purple, \"\", inline = \"NYPM\", group = g_KZ)\r\n\r\n\r\nvar g_LABELS        = \"Killzone Pivots\"\r\nshow_pivots         = input.bool(true, \"Show Pivots\", inline = \"PV\", group = g_LABELS)\r\nuse_alerts          = input.bool(false, \"Alert Broken Pivots\", inline = \"PV\", group = g_LABELS)\r\nshow_labels         = input.bool(true, \"Show Pivot Labels\", inline = \"LB\", group = g_LABELS)\r\nshow_midpoints      = input.bool(false, \"Show Pivot Midpoints\", group = g_LABELS)\r\next_pivots          = input.string(\"Until Mitigated\", \"Extend Pivots...\", options = ['Until Mitigated', 'Past Mitigation'], group = g_LABELS)\r\next_which           = input.string(\"Most Recent\", \"...From Which Sessions\", options = ['Most Recent', 'All'], group = g_LABELS)\r\n\r\nash_str             = input.string(\"AS.H\", \"Killzone 1 Labels\", inline = \"L_AS\", group = g_LABELS)\r\nasl_str             = input.string(\"AS.L\", \"\", inline = \"L_AS\", group = g_LABELS)\r\n\r\nloh_str             = input.string(\"LO.H\", \"Killzone 2 Labels\", inline = \"L_LO\", group = g_LABELS)\r\nlol_str             = input.string(\"LO.L\", \"\", inline = \"L_LO\", group = g_LABELS)\r\n\r\nnah_str             = input.string(\"NYAM.H\", \"Killzone 3 Labels\", inline = \"L_NA\", group = g_LABELS)\r\nnal_str             = input.string(\"NYAM.L\", \"\", inline = \"L_NA\", group = g_LABELS)\r\n\r\nnlh_str             = input.string(\"NYL.H\", \"Killzone 4 Labels\", inline = \"L_NL\", group = g_LABELS)\r\nnll_str             = input.string(\"NYL.L\", \"\", inline = \"L_NL\", group = g_LABELS)\r\n\r\nnph_str             = input.string(\"NYPM.H\", \"Killzone 5 Labels\", inline = \"L_NP\", group = g_LABELS)\r\nnpl_str             = input.string(\"NYPM.L\", \"\", inline = \"L_NP\", group = g_LABELS)\r\n\r\nkzp_style           = get_line_type(input.string(defval = 'Solid', title = \"Pivot Style\", options = ['Solid', 'Dotted', 'Dashed'], inline = \"KZP\", group = g_LABELS))\r\nkzp_width           = input.int(1, \"\", inline = \"KZP\", group = g_LABELS)\r\nkzm_style           = get_line_type(input.string(defval = 'Dotted', title = \"Midpoint Style\", options = ['Solid', 'Dotted', 'Dashed'], inline = \"KZM\", group = g_LABELS))\r\nkzm_width           = input.int(1, \"\", inline = \"KZM\", group = g_LABELS)\r\n\r\n\r\nvar g_RNG           = \"Killzone Range\"\r\nshow_range          = input.bool(false, \"Show Killzone Range\", tooltip = \"Show the most recent ranges of each selected killzone, from high to low\", group = g_RNG)\r\nshow_range_avg      = input.bool(true, \"Show Average\", tooltip = \"Show the average range of each selected killzone\", group = g_RNG)\r\nrange_avg           = input.int(5, \"Average Length\", 0, tooltip = \"This many previous sessions will be used to calculate the average. If there isn't enough data on the current chart, it will use as many sessions as possible\", group = g_RNG)\r\nrange_pos           = get_table_pos(input.string('Top Right', \"Table Position\", options = ['Bottom Center', 'Bottom Left', 'Bottom Right', 'Middle Center', 'Middle Left', 'Middle Right', 'Top Center', 'Top Left', 'Top Right'], group = g_RNG))\r\nrange_size          = get_size(input.string('Normal', \"Table Size\", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], group = g_RNG))\r\n\r\n\r\nvar g_DWM           = \"Day - Week - Month\"\r\ndow_labels          = input.bool(true, \"Day of Week Labels\", inline = \"DOW\", group = g_DWM)\r\ndow_yloc            = input.string('Bottom', \"\", options = ['Top', 'Bottom'], inline = \"DOW\", group = g_DWM)\r\ndow_xloc            = input.string('Midnight', \"\", options = ['Midnight', 'Midday'], inline = \"DOW\", group = g_DWM)\r\nsep_unlimited       = input.bool(true, \"Unlimited\", tooltip = \"Unlimited will show as many of the selected lines as possible. Otherwise, the session drawing limit will be used\", group = g_DWM)\r\n\r\nshow_d_open         = input.bool(false, \"D Open\", inline = \"DO\", group = g_DWM)\r\ndhl                 = input.bool(false, \"High/Low\", inline = \"DO\", tooltip = \"\", group = g_DWM)\r\nds                  = input.bool(false, \"Separators\", inline = \"DO\", tooltip = \"Mark where a new day begins\", group = g_DWM)\r\nd_color             = input.color(color.blue, \"\", inline = \"DO\", group = g_DWM)\r\n\r\nshow_w_open         = input.bool(false, \"W Open\", inline = \"WO\", group = g_DWM)\r\nwhl                 = input.bool(false, \"High/Low\", inline = \"WO\", tooltip = \"\", group = g_DWM)\r\nws                  = input.bool(false, \"Separators\", inline = \"WO\", tooltip = \"Mark where a new week begins\", group = g_DWM)\r\nw_color             = input.color(#089981, \"\", inline = \"WO\", group = g_DWM)\r\n\r\nshow_m_open         = input.bool(false, \"M Open\", inline = \"MO\", group = g_DWM)\r\nmhl                 = input.bool(false, \"High/Low\", inline = \"MO\", tooltip = \"\", group = g_DWM)\r\nms                  = input.bool(false, \"Separators\", inline = \"MO\", tooltip = \"Mark where a new month begins\", group = g_DWM)\r\nm_color             = input.color(color.red, \"\", inline = \"MO\", group = g_DWM)\r\n\r\nhtf_style           = get_line_type(input.string(defval = 'Solid', title = \"Style\", options = ['Solid', 'Dotted', 'Dashed'], inline = \"D0\", group = g_DWM))\r\nhtf_width           = input.int(1, \"\", inline = \"D0\", group = g_DWM)\r\n\r\n\r\nvar g_OPEN          = \"Opening Prices\"\r\nopen_unlimited      = input.bool(true, \"Unlimited\", tooltip = \"Unlimited will show as many of the selected lines as possible. Otherwise, the session drawing limit will be used\", group = g_OPEN)\r\n\r\nuse_h1              = input.bool(true, \"\", inline = \"H1\", group = g_OPEN)\r\nh1_text             = input.string(\"True Day Open\", \"\", inline = \"H1\", group = g_OPEN)\r\nh1                  = input.session(\"0000-0001\", \"\", inline = \"H1\", group = g_OPEN)\r\nh1_color            = input.color(color.black, \"\", inline = \"H1\", group = g_OPEN)\r\n\r\nuse_h2              = input.bool(false, \"\", inline = \"H2\", group = g_OPEN)\r\nh2_text             = input.string(\"06:00\", \"\", inline = \"H2\", group = g_OPEN)\r\nh2                  = input.session(\"0600-0601\", \"\", inline = \"H2\", group = g_OPEN)\r\nh2_color            = input.color(color.black, \"\", inline = \"H2\", group = g_OPEN)\r\n\r\nuse_h3              = input.bool(false, \"\", inline = \"H3\", group = g_OPEN)\r\nh3_text             = input.string(\"10:00\", \"\", inline = \"H3\", group = g_OPEN)\r\nh3                  = input.session(\"1000-1001\", \"\", inline = \"H3\", group = g_OPEN)\r\nh3_color            = input.color(color.black, \"\", inline = \"H3\", group = g_OPEN)\r\n\r\nuse_h4              = input.bool(false, \"\", inline = \"H4\", group = g_OPEN)\r\nh4_text             = input.string(\"14:00\", \"\", inline = \"H4\", group = g_OPEN)\r\nh4                  = input.session(\"1400-1401\", \"\", inline = \"H4\", group = g_OPEN)\r\nh4_color            = input.color(color.black, \"\", inline = \"H4\", group = g_OPEN)\r\n\r\nhz_style            = get_line_type(input.string(defval = 'Dotted', title = \"Style\", options = ['Solid', 'Dotted', 'Dashed'], inline = \"H0\", group = g_OPEN))\r\nhz_width            = input.int(1, \"\", inline = \"H0\", group = g_OPEN)\r\n\r\n\r\nvar g_VERTICAL      = \"Timestamps\"\r\nuse_v1              = input.bool(false, \"\", inline = \"V1\", group = g_VERTICAL)\r\nv1                  = input.session(\"0000-0001\", \"\", inline = \"V1\", group = g_VERTICAL)\r\nv1_color            = input.color(color.black, \"\", inline = \"V1\", group = g_VERTICAL)\r\n\r\nuse_v2              = input.bool(false, \"\", inline = \"V2\", group = g_VERTICAL)\r\nv2                  = input.session(\"0800-0801\", \"\", inline = \"V2\", group = g_VERTICAL)\r\nv2_color            = input.color(color.black, \"\", inline = \"V2\", group = g_VERTICAL)\r\n\r\nuse_v3              = input.bool(false, \"\", inline = \"V3\", group = g_VERTICAL)\r\nv3                  = input.session(\"1000-1001\", \"\", inline = \"V3\", group = g_VERTICAL)\r\nv3_color            = input.color(color.black, \"\", inline = \"V3\", group = g_VERTICAL)\r\n\r\nuse_v4              = input.bool(true, \"\", inline = \"V4\", group = g_VERTICAL)\r\nv4                  = input.session(\"1200-1201\", \"\", inline = \"V4\", group = g_VERTICAL)\r\nv4_color            = input.color(color.black, \"\", inline = \"V4\", group = g_VERTICAL)\r\n\r\nvl_style            = get_line_type(input.string(defval = 'Dotted', title = \"Style\", options = ['Solid', 'Dotted', 'Dashed'], inline = \"V0\", group = g_VERTICAL))\r\nvl_width            = input.int(1, \"\", inline = \"V0\", group = g_VERTICAL)\r\n// ---------------------------------------- Inputs --------------------------------------------------\r\n\r\n\r\n// ---------------------------------------- Variables & Constants --------------------------------------------------\r\ntype kz\r\n    string _title\r\n\r\n    box[] _box\r\n\r\n    line[] _hi_line\r\n    line[] _md_line\r\n    line[] _lo_line\r\n\r\n    label[] _hi_label\r\n    label[] _lo_label\r\n\r\n    bool[] _hi_valid\r\n    bool[] _md_valid\r\n    bool[] _lo_valid\r\n\r\n    float[] _range_store\r\n    float _range_current\r\n\r\ntype hz\r\n    line[] LN\r\n    label[] LB\r\n    bool[] CO\r\n\r\ntype dwm_hl\r\n    line[] hi_line\r\n    line[] lo_line\r\n    label[] hi_label\r\n    label[] lo_label\r\n\r\ntype dwm_info\r\n    string tf\r\n    float o = na\r\n    float h = na\r\n    float l = na\r\n    float ph = na\r\n    float pl = na\r\n\r\nvar as_kz = kz.new(as_txt, array.new_box(), array.new_line(), array.new_line(), array.new_line(), array.new_label(), array.new_label(), array.new_bool(), array.new_bool(), array.new_bool(), array.new_float())\r\nvar lo_kz = kz.new(lo_txt, array.new_box(), array.new_line(), array.new_line(), array.new_line(), array.new_label(), array.new_label(), array.new_bool(), array.new_bool(), array.new_bool(), array.new_float())\r\nvar na_kz = kz.new(na_txt, array.new_box(), array.new_line(), array.new_line(), array.new_line(), array.new_label(), array.new_label(), array.new_bool(), array.new_bool(), array.new_bool(), array.new_float())\r\nvar nl_kz = kz.new(nl_txt, array.new_box(), array.new_line(), array.new_line(), array.new_line(), array.new_label(), array.new_label(), array.new_bool(), array.new_bool(), array.new_bool(), array.new_float())\r\nvar np_kz = kz.new(np_txt, array.new_box(), array.new_line(), array.new_line(), array.new_line(), array.new_label(), array.new_label(), array.new_bool(), array.new_bool(), array.new_bool(), array.new_float())\r\n\r\nvar hz_1 = hz.new(array.new_line(), array.new_label(), array.new_bool())\r\nvar hz_2 = hz.new(array.new_line(), array.new_label(), array.new_bool())\r\nvar hz_3 = hz.new(array.new_line(), array.new_label(), array.new_bool())\r\nvar hz_4 = hz.new(array.new_line(), array.new_label(), array.new_bool())\r\n\r\nvar d_hl = dwm_hl.new(array.new_line(), array.new_line(), array.new_label(), array.new_label())\r\nvar w_hl = dwm_hl.new(array.new_line(), array.new_line(), array.new_label(), array.new_label())\r\nvar m_hl = dwm_hl.new(array.new_line(), array.new_line(), array.new_label(), array.new_label())\r\n\r\nvar d_info = dwm_info.new(\"D\")\r\nvar w_info = dwm_info.new(\"W\")\r\nvar m_info = dwm_info.new(\"M\")\r\n\r\nt_as = not na(time(\"\", asia, gmt_tz))\r\nt_lo = not na(time(\"\", london, gmt_tz))\r\nt_na = not na(time(\"\", nyam, gmt_tz))\r\nt_nl = not na(time(\"\", nylu, gmt_tz))\r\nt_np = not na(time(\"\", nypm, gmt_tz))\r\nt_co = not na(time(\"\", cutoff, gmt_tz))\r\n\r\nt_h1 = not na(time(\"\", h1, gmt_tz))\r\nt_h2 = not na(time(\"\", h2, gmt_tz))\r\nt_h3 = not na(time(\"\", h3, gmt_tz))\r\nt_h4 = not na(time(\"\", h4, gmt_tz))\r\n\r\nt_v1 = not na(time(\"\", v1, gmt_tz))\r\nt_v2 = not na(time(\"\", v2, gmt_tz))\r\nt_v3 = not na(time(\"\", v3, gmt_tz))\r\nt_v4 = not na(time(\"\", v4, gmt_tz))\r\n\r\nvar d_sep_line = array.new_line()\r\nvar w_sep_line = array.new_line()\r\nvar m_sep_line = array.new_line()\r\n\r\nvar d_line = array.new_line()\r\nvar w_line = array.new_line()\r\nvar m_line = array.new_line()\r\n\r\nvar d_label = array.new_label()\r\nvar w_label = array.new_label()\r\nvar m_label = array.new_label()\r\n\r\nvar v1_line = array.new_line()\r\nvar v2_line = array.new_line()\r\nvar v3_line = array.new_line()\r\nvar v4_line = array.new_line()\r\n\r\nvar transparent = #ffffff00\r\nvar ext_current = ext_which == 'Most Recent'\r\nvar ext_past = ext_pivots == 'Past Mitigation'\r\n\r\nupdate_dwm_info(dwm_info n) =>\r\n    if timeframe.change(n.tf)\r\n        n.ph := n.h\r\n        n.pl := n.l\r\n        n.o := open\r\n        n.h := high\r\n        n.l := low\r\n    else\r\n        n.h := math.max(high, n.h)\r\n        n.l := math.min(low,  n.l)\r\n\r\nif dhl or show_d_open\r\n    update_dwm_info(d_info)\r\nif whl or show_w_open\r\n    update_dwm_info(w_info)\r\nif mhl or show_m_open\r\n    update_dwm_info(m_info)\r\n// ---------------------------------------- Variables & Constants --------------------------------------------------\r\n\r\n\r\n// ---------------------------------------- Functions --------------------------------------------------\r\nget_box_color(color c) =>\r\n    result = color.new(c, box_transparency)\r\n    \r\nget_text_color(color c) =>\r\n    result = color.new(c, text_transparency)\r\n// ---------------------------------------- Functions --------------------------------------------------\r\n\r\n\r\n// ---------------------------------------- Core Logic --------------------------------------------------\r\ndwm_sep(string tf, bool use, line[] arr, color col) =>\r\n    if use\r\n        if timeframe.change(tf)\r\n            arr.unshift(line.new(bar_index, high*1.0001, bar_index, low, style = htf_style, width = htf_width, extend = extend.both, color = col))\r\n            if not sep_unlimited and arr.size() > max_days\r\n                arr.pop().delete()\r\n                \r\n\r\ndwm_open(string tf, bool use, line[] lns, label[] lbls, dwm_info n, color col) =>\r\n    if use\r\n        if timeframe.change(tf)\r\n            lns.unshift(line.new(time, n.o, time, n.o, xloc = xloc.bar_time, style = htf_style, width = htf_width, color = col))\r\n            lbls.unshift(label.new(time, n.o, tf + \" OPEN\", xloc = xloc.bar_time, style = label.style_label_left, color = transparent, textcolor = txt_color, size = lbl_size))\r\n            if not sep_unlimited and lns.size() > max_days\r\n                lns.pop().delete()\r\n                lbls.pop().delete()\r\n        else if lns.size() > 0\r\n            lns.get(0).set_x2(time)\r\n            lbls.get(0).set_x(time)\r\n\r\n\r\ndwm_hl(string tf, bool use, dwm_hl hl, dwm_info n, color col) =>\r\n    if use\r\n        if timeframe.change(tf)\r\n            hl.hi_line.unshift(line.new(time, n.ph, time, n.ph, xloc = xloc.bar_time, style = htf_style, width = htf_width, color = col))\r\n            hl.lo_line.unshift(line.new(time, n.pl, time, n.pl, xloc = xloc.bar_time, style = htf_style, width = htf_width, color = col))\r\n            hl.hi_label.unshift(label.new(time, n.ph, \"P\"+tf+\"H\", xloc = xloc.bar_time, style = label.style_label_left, color = transparent, textcolor = txt_color, size = lbl_size))\r\n            hl.lo_label.unshift(label.new(time, n.pl, \"P\"+tf+\"L\", xloc = xloc.bar_time, style = label.style_label_left, color = transparent, textcolor = txt_color, size = lbl_size))\r\n            if not sep_unlimited and hl.hi_line.size() > max_days\r\n                hl.hi_line.pop().delete()\r\n                hl.lo_line.pop().delete()\r\n                hl.hi_label.pop().delete()\r\n                hl.lo_label.pop().delete()\r\n        else if hl.hi_line.size() > 0\r\n            hl.hi_line.get(0).set_x2(time)\r\n            hl.lo_line.get(0).set_x2(time)\r\n            hl.hi_label.get(0).set_x(time)\r\n            hl.lo_label.get(0).set_x(time)\r\n\r\n\r\ndwm() =>\r\n    if timeframe.in_seconds(\"\") <= timeframe.in_seconds(tf_limit)\r\n        // DWM - Separators\r\n        dwm_sep(\"D\", ds, d_sep_line, d_color)\r\n        dwm_sep(\"W\", ws, w_sep_line, w_color)\r\n        dwm_sep(\"M\", ms, m_sep_line, m_color)\r\n\r\n        // DWM - Open Lines\r\n        dwm_open(\"D\", show_d_open, d_line, d_label, d_info, d_color)\r\n        dwm_open(\"W\", show_w_open, w_line, w_label, w_info, w_color)\r\n        dwm_open(\"M\", show_m_open, m_line, m_label, m_info, m_color)\r\n\r\n        // DWM - Highs and Lows\r\n        dwm_hl(\"D\", dhl, d_hl, d_info, d_color)\r\n        dwm_hl(\"W\", whl, w_hl, w_info, w_color)\r\n        dwm_hl(\"M\", mhl, m_hl, m_info, m_color)\r\n\r\n\r\nvline(bool use, bool t, line[] arr, color col) =>\r\n    if use\r\n        if t and not t[1]\r\n            arr.unshift(line.new(bar_index, high*1.0001, bar_index, low, style = vl_style, width = vl_width, extend = extend.both, color = col))\r\n\r\n                \r\nvlines() =>\r\n    if timeframe.in_seconds(\"\") <= timeframe.in_seconds(tf_limit)\r\n        vline(use_v1, t_v1, v1_line, v1_color)\r\n        vline(use_v2, t_v2, v2_line, v2_color)\r\n        vline(use_v3, t_v3, v3_line, v3_color)\r\n        vline(use_v4, t_v4, v4_line, v4_color)\r\n\r\n\r\nhz_line(bool use, bool t, hz hz, string txt, color col) =>\r\n    if use\r\n        if t and not t[1]\r\n            hz.LN.unshift(line.new(bar_index, open, bar_index, open, style = hz_style, width = hz_width, color = col))\r\n            hz.LB.unshift(label.new(bar_index, open, txt, style = label.style_label_left, color = transparent, textcolor = txt_color, size = lbl_size))\r\n            array.unshift(hz.CO, false)\r\n            if not open_unlimited and hz.LN.size() > max_days\r\n                hz.LN.pop().delete()\r\n                hz.LB.pop().delete()\r\n                hz.CO.pop()\r\n        if not t and hz.CO.size() > 0\r\n            if not hz.CO.get(0)\r\n                hz.LN.get(0).set_x2(bar_index)\r\n                hz.LB.get(0).set_x(bar_index)\r\n                if (use_cutoff ? t_co : false)\r\n                    hz.CO.set(0, true)\r\n\r\n\r\nhz_lines() =>\r\n    if timeframe.in_seconds(\"\") <= timeframe.in_seconds(tf_limit)\r\n        hz_line(use_h1, t_h1, hz_1, h1_text, h1_color)\r\n        hz_line(use_h2, t_h2, hz_2, h2_text, h2_color)\r\n        hz_line(use_h3, t_h3, hz_3, h3_text, h3_color)\r\n        hz_line(use_h4, t_h4, hz_4, h4_text, h4_color)\r\n\r\n\r\ndel_kz(kz k) =>\r\n    if k._box.size() > max_days\r\n        k._box.pop().delete()\r\n    if k._hi_line.size() > max_days\r\n        k._hi_line.pop().delete()\r\n        k._lo_line.pop().delete()\r\n        k._hi_valid.pop()\r\n        k._lo_valid.pop()\r\n        if show_midpoints\r\n            k._md_line.pop().delete()\r\n            k._md_valid.pop()\r\n    if k._hi_label.size() > max_days\r\n        k._hi_label.pop().delete()\r\n        k._lo_label.pop().delete()\r\n    \r\n\r\nadjust_in_kz(kz kz, bool t) =>\r\n    if t\r\n        kz._box.get(0).set_right(time)\r\n        kz._box.get(0).set_top(math.max(kz._box.get(0).get_top(), high))\r\n        kz._box.get(0).set_bottom(math.min(kz._box.get(0).get_bottom(), low))\r\n\r\n        kz._range_current := kz._box.get(0).get_top() - kz._box.get(0).get_bottom()\r\n\r\n        if show_pivots and kz._hi_line.size() > 0\r\n            if high > kz._hi_line.get(0).get_y1()\r\n                kz._hi_line.get(0).set_xy1(time, high)\r\n                kz._hi_line.get(0).set_xy2(time, high)\r\n\r\n            if low < kz._lo_line.get(0).get_y1()\r\n                kz._lo_line.get(0).set_xy1(time, low)\r\n                kz._lo_line.get(0).set_xy2(time, low)\r\n                \r\n            if show_midpoints\r\n                kz._md_line.get(0).set_xy1(time, math.avg(kz._hi_line.get(0).get_y2(), kz._lo_line.get(0).get_y2()))\r\n                kz._md_line.get(0).set_xy2(time, math.avg(kz._hi_line.get(0).get_y2(), kz._lo_line.get(0).get_y2()))\r\n\r\n        if show_labels and kz._hi_label.size() > 0\r\n            if high > kz._hi_label.get(0).get_y()\r\n                kz._hi_label.get(0).set_xy(time, high)\r\n            if low < kz._lo_label.get(0).get_y()\r\n                kz._lo_label.get(0).set_xy(time, low)\r\n    \r\n\r\nadjust_out_kz(kz kz, bool t) =>\r\n    if not t and kz._box.size() > 0\r\n        if t[1]\r\n            array.unshift(kz._range_store, kz._range_current)\r\n            if kz._range_store.size() > range_avg\r\n                kz._range_store.pop()\r\n\r\n    if kz._box.size() > 0 and show_pivots\r\n        for i = 0 to kz._box.size() - 1\r\n            if not ext_current or (ext_current and i == 0)\r\n                if ext_past ? true : (kz._hi_valid.get(i) == true)\r\n                    kz._hi_line.get(i).set_x2(time)\r\n                if high > kz._hi_line.get(i).get_y1() and kz._hi_valid.get(i) == true\r\n                    if use_alerts and i == 0\r\n                        alert(\"Broke \"+kz._title+\" High\", alert.freq_once_per_bar)\r\n                    kz._hi_valid.set(i, false)\r\n                else if (use_cutoff ? t_co : false)\r\n                    kz._hi_valid.set(i, false)\r\n                    \r\n                if ext_past ? true : (kz._lo_valid.get(i) == true)\r\n                    kz._lo_line.get(i).set_x2(time)\r\n                if low < kz._lo_line.get(i).get_y1() and kz._lo_valid.get(i) == true\r\n                    if use_alerts and i == 0\r\n                        alert(\"Broke \"+kz._title+\" Low\", alert.freq_once_per_bar)\r\n                    kz._lo_valid.set(i, false)\r\n                else if (use_cutoff ? t_co : false)\r\n                    kz._lo_valid.set(i, false)\r\n                    \r\n                if show_midpoints\r\n                    kz._md_line.get(i).set_x2(time)\r\n            else\r\n                break\r\n\r\n\r\nmanage_kz(kz kz, bool use, bool t, color c, string box_txt, string hi_txt, string lo_txt) => \r\n    if timeframe.in_seconds(\"\") <= timeframe.in_seconds(tf_limit) and use\r\n        if t and not t[1]\r\n            _c = get_box_color(c)\r\n            _t = get_text_color(c)\r\n            kz._box.unshift(box.new(time, high, time, low, xloc = xloc.bar_time, border_color = show_kz ? _c : na, bgcolor = show_kz ? _c : na, text = (show_kz and show_kz_text) ? box_txt : na, text_color = _t))\r\n\r\n            if show_pivots\r\n                kz._hi_line.unshift(line.new(time, high, time, high, xloc = xloc.bar_time, style = kzp_style, color = c, width = kzp_width))\r\n                kz._lo_line.unshift(line.new(time, low, time, low, xloc = xloc.bar_time, style = kzp_style, color = c, width = kzp_width))\r\n                if show_midpoints\r\n                    kz._md_line.unshift(line.new(time, math.avg(high, low), time, math.avg(high, low), xloc = xloc.bar_time, style = kzm_style, color = c, width = kzm_width))\r\n                    array.unshift(kz._md_valid, true)\r\n                \r\n                array.unshift(kz._hi_valid, true)\r\n                array.unshift(kz._lo_valid, true) \r\n\r\n                if show_labels\r\n                    kz._hi_label.unshift(label.new(time, high, hi_txt, xloc = xloc.bar_time, color = transparent, textcolor = txt_color, style = label.style_label_down, size = lbl_size))\r\n                    kz._lo_label.unshift(label.new(time, low,  lo_txt, xloc = xloc.bar_time, color = transparent, textcolor = txt_color, style = label.style_label_up, size = lbl_size))\r\n\r\n            del_kz(kz)\r\n        adjust_in_kz(kz, t)\r\n        adjust_out_kz(kz, t)\r\n\r\n\r\nmanage_kz(as_kz, use_asia, t_as, as_color, as_txt, ash_str, asl_str)\r\nmanage_kz(lo_kz, use_london, t_lo, lo_color, lo_txt, loh_str, lol_str)\r\nmanage_kz(na_kz, use_nyam, t_na, na_color, na_txt, nah_str, nal_str)\r\nmanage_kz(nl_kz, use_nylu, t_nl, nl_color, nl_txt, nlh_str, nll_str)\r\nmanage_kz(np_kz, use_nypm, t_np, np_color, np_txt, nph_str, npl_str)\r\n\r\ndwm() \r\nvlines()\r\nhz_lines()\r\n\r\nnew_dow_time = dow_xloc == 'Midday' ? time - timeframe.in_seconds(\"D\") / 2 * 1000 : time\r\nnew_day = dayofweek(new_dow_time, gmt_tz) != dayofweek(new_dow_time, gmt_tz)[1]\r\n\r\nvar dow_top = dow_yloc == 'Top'\r\n\r\nvar sunday = \"SUNDAY\"\r\nvar monday = \"MONDAY\"\r\nvar tuesday = \"TUESDAY\"\r\nvar wednesday = \"WEDNESDAY\"\r\nvar thursday = \"THURSDAY\"\r\nvar friday = \"FRIDAY\"\r\n\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 1 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = sunday)\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 2 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = monday)\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 3 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = tuesday)\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 4 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = wednesday)\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 5 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = thursday)\r\nplotchar(dow_labels and timeframe.isintraday and dayofweek(new_dow_time, gmt_tz) == 6 and new_day, location = dow_top ? location.top : location.bottom, char = \"\", textcolor = txt_color, text = friday)\r\n\r\nget_min_days_stored() =>\r\n    store = array.new_int()\r\n    if as_kz._range_store.size() > 0 \r\n        store.push(as_kz._range_store.size())\r\n    if lo_kz._range_store.size() > 0 \r\n        store.push(lo_kz._range_store.size())\r\n    if na_kz._range_store.size() > 0 \r\n        store.push(na_kz._range_store.size())\r\n    if nl_kz._range_store.size() > 0 \r\n        store.push(nl_kz._range_store.size())\r\n    if np_kz._range_store.size() > 0 \r\n        store.push(np_kz._range_store.size())\r\n    result = store.min()\r\n\r\nset_table(table tbl, kz kz, int row, string txt, bool use, bool t, color col) =>\r\n    if use\r\n        table.cell(tbl, 0, row, txt, text_size = range_size, bgcolor = get_box_color(col), text_color = txt_color)\r\n        table.cell(tbl, 1, row, str.tostring(kz._range_current), text_size = range_size, bgcolor = t ? get_box_color(col) : na, text_color = txt_color)\r\n        if show_range_avg\r\n            table.cell(tbl, 2, row, str.tostring(kz._range_store.avg()), text_size = range_size, text_color = txt_color)\r\n\r\nif show_range and barstate.islast\r\n    var tbl = table.new(range_pos, 10, 10, chart.bg_color, chart.fg_color, 2, chart.fg_color, 1)\r\n\r\n    table.cell(tbl, 0, 0, \"Killzone\", text_size = range_size, text_color = txt_color)\r\n    table.cell(tbl, 1, 0, \"Range\", text_size = range_size, text_color = txt_color)\r\n    if show_range_avg\r\n        table.cell(tbl, 2, 0, \"Avg (\"+str.tostring(get_min_days_stored())+\")\", text_size = range_size, text_color = txt_color)\r\n\r\n    set_table(tbl, as_kz, 1, as_txt, use_asia, t_as, as_color)\r\n    set_table(tbl, lo_kz, 2, lo_txt, use_london, t_lo, lo_color)\r\n    set_table(tbl, na_kz, 3, na_txt, use_nyam, t_na, na_color)\r\n    set_table(tbl, nl_kz, 4, nl_txt, use_nylu, t_nl, nl_color)\r\n    set_table(tbl, np_kz, 5, np_txt, use_nypm, t_np, np_color)\r\n// ---------------------------------------- Core Logic --------------------------------------------------","updated":"2024-02-23T16:34:36.542031Z","version":"13.0"}