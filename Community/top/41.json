{"created":"2023-10-11T16:10:33.325879Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"14.0","scriptAccess":"open_no_auth","scriptName":"Volume-based Support & Resistance Zones V2","source":"//@version=5\r\n// Original script is thanks to synapticex and additional modifications is thanks to Lij_MC. Credit to both of them for most of the logic behind this script. Since then I have made many changes to this script as noted below.\r\n// Changed default S/R lines from plots to lines, and gave option to user to change between solid line, dashed line, or dotted line for both S/R lines.\r\n// Added additional time frame and gave more TF options for TF1 other than current TF. Now you will have 4 time frames to plot S/R zones from.\r\n// Gave user option to easily change line thickness for all S/R lines.\r\n// Made it easier to change colors of S/R lines and zones by consolidating the options under settings (rather than under style).\r\n// Added extensions to active SR Zones to extend all the way right. \r\n// Added option to extend or not extend the previous S/R zones up to next S/R zone.\r\n// Added optional time frame labels to active S/R zones, with left and right options as well as option to adjust how far to the right label is set.\r\n// Fixed issue where the higher time frame S/R zone was not properly starting from the high/low of fractal. Now any higher time frame S/R will begin exactly at the High/Low points.\r\n// Added to script a function that will prevent S/R zones from lower time frames displaying while on a higher time frame. This helps clean up the chart quite a bit.\r\n// Created arrays for each time frame's lines and labels so that the number of S/R zones can be controlled for each time frame and limit memory consumption.\r\n// New alert options added and customized alert messages.\r\n\r\nindicator('Volume-based Support & Resistance Zones V2', shorttitle='Vol S/R Zones V2', overlay=true, max_bars_back=4999, max_lines_count=500, max_labels_count=10)\r\n\r\n// Inputs\r\nExtendLines1 = input.bool(title='Extend all S/R Zones to Next Zone', defval=true, inline='extline', group='*** General Settings ***')\r\next_active = input.bool(title='Extend active S/R Zones to Right', defval=true, inline='extline', group='*** General Settings ***')\r\nShowLabel = input.bool(title='Show Time Frame Label?', defval=true, group='*** General Settings ***')\r\nlabel_loc = input.string(title='Label Location', defval='Right', options=['Left', 'Right'], inline='1', group='*** General Settings ***')\r\nlabel_offset = input.int(title='  Right Label Offset', defval=15, inline='1', tooltip='Adjust how far to the right you\\'d like the time frame label to appear.', group='*** General Settings ***')\r\nshow_HL = input.bool(title='Show High/Low Line     ', defval=true, inline='1b', group='*** General Settings ***')\r\nshow_close = input.bool(title='Show Open/Close Line', defval=true, inline='1b', group='*** General Settings ***')\r\nLineStyleHLInput = input.string(title='Line Style (H/L)', defval='Solid', options=['Solid', 'Dotted', 'Dashed'], inline='2', group='*** General Settings ***')\r\nLineWidthHLInput = input.int(title='  Line Width (H/L)', defval=1, inline='2', group='*** General Settings ***')\r\nLineStyleCloseInput = input.string(title='Line Style (O/C)', defval='Solid', options=['Solid', 'Dotted', 'Dashed'], inline='3', group='*** General Settings ***')\r\nLineWidthCloseInput = input.int(title='  Line Width (O/C)', defval=1, inline='3', group='*** General Settings ***')\r\n\r\nvar string LineStyleHL = na\r\n\r\nLineStyleHL := if LineStyleHLInput == 'Solid'\r\n    line.style_solid\r\nelse if LineStyleHLInput == 'Dotted'\r\n    line.style_dotted\r\nelse if LineStyleHLInput == 'Dashed'\r\n    line.style_dashed\r\n\r\nvar string LineStyleClose = na\r\n\r\nLineStyleClose := if LineStyleCloseInput == 'Solid'\r\n    line.style_solid\r\nelse if LineStyleCloseInput == 'Dotted'\r\n    line.style_dotted\r\nelse if LineStyleCloseInput == 'Dashed'\r\n    line.style_dashed\r\n\r\n// Time Frame 1 = TF1\r\nTF1_Menu = input.string(title='Display Lines Only, With Zones, or Disable     ', defval='S/R Zones', options=['S/R', 'S/R Zones', 'Disable'], group='*** Time Frame 1 ***')\r\nTF1_input = input.string(title='Time Frame 1', defval='Chart', options=['Chart', '1m', '3m', '5m', '15m', '30m', '45m', '1h', '2h', '3h', '4h', '6h', '8h', '12h', 'D', '3D', 'W', '2W', '1M', '12M'], group='*** Time Frame 1 ***')\r\nTF1_VolMA1Input = input.int(title='Volume MA - Threshold', defval=6, group='*** Time Frame 1 ***')\r\nTF1_NumZones = input.int(title='Number of Zones Back', defval=30, minval=1, maxval=100, group='*** Time Frame 1 ***',\r\n tooltip='Change how many zones back you would like on the chart for time frame 1 (this number applies to both # of support zones and # of resistance zones back). Be mindful of setting too high with other zones, as the maximum total lines allowed on the chart is 500.')\r\nTF1_extRight = input.bool(title='Extend S/R Zones to Right', defval=false, group='*** Time Frame 1 ***')\r\nTF1_ResLinesColor = input.color(color.new(color.red, 20), 'Resistance Lines Color', inline='1', group='*** Time Frame 1 ***')\r\nTF1_ResZoneColor = input.color(color.new(color.red, 90), 'Resistance Zone Color', inline='2', group='*** Time Frame 1 ***')\r\nTF1_SupLinesColor = input.color(color.new(color.lime, 20), '        Support Lines Color', inline='1', group='*** Time Frame 1 ***')\r\nTF1_SupZoneColor = input.color(color.new(color.lime, 90), '         Support Zone Color', inline='2', group='*** Time Frame 1 ***')\r\nTF1_Alerts = input.string(title='Alerts', defval='None', \r\n  options=['None', 'Price Enters Resistance Zone', 'Price Enters Support Zone', 'Price Enters Either S/R Zone', 'Price Breaks Up Resistance', 'Price Breaks Down Support', 'Price Breaks Either S/R', 'New S/R Zone Found', 'All Alerts On'], \r\n  tooltip='Select the type of alert you would like, then save settings. On chart, right click on SR indicator and click \\'Add Alert\\' then save. If you would like to change the alert, delete existing alert, change alert settings on indicator, then create new alert', \r\n  group='*** Time Frame 1 ***')\r\n\r\n// Time Frame 2 = TF2\r\nTF2_Menu = input.string(title='Display Lines Only, With Zones, or Disable     ', defval='S/R Zones', options=['S/R', 'S/R Zones', 'Disable'], group='*** Time Frame 2 ***')\r\nTF2_input = input.string(title='Time Frame 2', defval='4h', options=['1m', '3m', '5m', '15m', '30m', '45m', '1h', '2h', '3h', '4h', '6h', '8h', '12h', 'D', '3D', 'W', '2W', '1M', '12M'], group='*** Time Frame 2 ***')\r\nTF2_VolMA1Input = input.int(title='Volume MA - Threshold', defval=6, group='*** Time Frame 2 ***')\r\nTF2_NumZones = input.int(title='Number of Zones Back', defval=30, minval=1, maxval=100, group='*** Time Frame 2 ***',\r\n tooltip='Change how many zones back you would like on the chart for time frame 2 (this number applies to both # of support zones and # of resistance zones back). Be mindful of setting too high with other zones, as the maximum total lines allowed on the chart is 500.')\r\nTF2_extRight = input.bool(title='Extend S/R Zones to Right', defval=false, group='*** Time Frame 2 ***')\r\nTF2_ResLinesColor = input.color(color.new(color.fuchsia, 20), 'Resistance Lines Color', inline='1', group='*** Time Frame 2 ***')\r\nTF2_ResZoneColor = input.color(color.new(color.fuchsia, 90), 'Resistance Zone Color', inline='2', group='*** Time Frame 2 ***')\r\nTF2_SupLinesColor = input.color(color.new(color.green, 20), '        Support Lines Color', inline='1', group='*** Time Frame 2 ***')\r\nTF2_SupZoneColor = input.color(color.new(color.green, 90), '         Support Zone Color', inline='2', group='*** Time Frame 2 ***')\r\nTF2_Alerts = input.string(title='Alerts', defval='None', \r\n  options=['None', 'Price Enters Resistance Zone', 'Price Enters Support Zone', 'Price Enters Either S/R Zone', 'Price Breaks Up Resistance', 'Price Breaks Down Support', 'Price Breaks Either S/R', 'New S/R Zone Found', 'All Alerts On'], \r\n  tooltip='Select the type of alert you would like, then save settings. On chart, right click on SR indicator and click \\'Add Alert\\' then save. If you would like to change the alert, delete existing alert, change alert settings on indicator, then create new alert', \r\n  group='*** Time Frame 2 ***')\r\n\r\n// Time Frame 3 = TF3\r\nTF3_Menu = input.string(title='Display Lines Only, With Zones, or Disable     ', defval='S/R Zones', options=['S/R', 'S/R Zones', 'Disable'], group='*** Time Frame 3 ***')\r\nTF3_input = input.string(title='Time Frame 3', defval='D', options=['1m', '3m', '5m', '15m', '30m', '45m', '1h', '2h', '3h', '4h', '6h', '8h', '12h', 'D', '3D', 'W', '2W', '1M', '12M'], group='*** Time Frame 3 ***')\r\nTF3_VolMA1Input = input.int(title='Volume MA - Threshold', defval=6, group='*** Time Frame 3 ***')\r\nTF3_NumZones = input.int(title='Number of Zones Back', defval=30, minval=1, maxval=100, group='*** Time Frame 3 ***',\r\n tooltip='Change how many zones back you would like on the chart for time frame 3 (this number applies to both # of support zones and # of resistance zones back). Be mindful of setting too high with other zones, as the maximum total lines allowed on the chart is 500.')\r\nTF3_extRight = input.bool(title='Extend S/R Zones to Right', defval=false, group='*** Time Frame 3 ***')\r\nTF3_ResLinesColor = input.color(color.new(color.orange, 20), 'Resistance Lines Color', inline='1', group='*** Time Frame 3 ***')\r\nTF3_ResZoneColor = input.color(color.new(color.orange, 90), 'Resistance Zone Color', inline='2', group='*** Time Frame 3 ***')\r\nTF3_SupLinesColor = input.color(color.new(color.blue, 20), '        Support Lines Color', inline='1', group='*** Time Frame 3 ***')\r\nTF3_SupZoneColor = input.color(color.new(color.blue, 90), '         Support Zone Color', inline='2', group='*** Time Frame 3 ***')\r\nTF3_Alerts = input.string(title='Alerts', defval='None', \r\n  options=['None', 'Price Enters Resistance Zone', 'Price Enters Support Zone', 'Price Enters Either S/R Zone', 'Price Breaks Up Resistance', 'Price Breaks Down Support', 'Price Breaks Either S/R', 'New S/R Zone Found', 'All Alerts On'], \r\n  tooltip='Select the type of alert you would like, then save settings. On chart, right click on SR indicator and click \\'Add Alert\\' then save. If you would like to change the alert, delete existing alert, change alert settings on indicator, then create new alert', \r\n  group='*** Time Frame 3 ***')\r\n\r\n// Time Frame 4 = TF4\r\nTF4_Menu = input.string(title='Display Lines Only, With Zones, or Disable     ', defval='S/R Zones', options=['S/R', 'S/R Zones', 'Disable'], group='*** Time Frame 4 ***')\r\nTF4_input = input.string(title='Time Frame 4', defval='W', options=['1m', '3m', '5m', '15m', '30m', '45m', '1h', '2h', '3h', '4h', '6h', '8h', '12h', 'D', '3D', 'W', '2W', '1M', '12M'], group='*** Time Frame 4 ***')\r\nTF4_VolMA1Input = input.int(title='Volume MA - Threshold', defval=6, group='*** Time Frame 4 ***')\r\nTF4_NumZones = input.int(title='Number of Zones Back', defval=30, minval=1, maxval=100, group='*** Time Frame 4 ***',\r\n tooltip='Change how many zones back you would like on the chart for time frame 4 (this number applies to both # of support zones and # of resistance zones back). Be mindful of setting too high with other zones, as the maximum total lines allowed on the chart is 500.')\r\nTF4_extRight = input.bool(title='Extend S/R Zones to Right', defval=false, group='*** Time Frame 4 ***')\r\nTF4_ResLinesColor = input.color(color.new(color.maroon, 20), 'Resistance Lines Color', inline='1', group='*** Time Frame 4 ***')\r\nTF4_ResZoneColor = input.color(color.new(color.maroon, 90), 'Resistance Zone Color', inline='2', group='*** Time Frame 4 ***')\r\nTF4_SupLinesColor = input.color(color.new(color.teal, 20), '        Support Lines Color', inline='1', group='*** Time Frame 4 ***')\r\nTF4_SupZoneColor = input.color(color.new(color.teal, 90), '         Support Zone Color', inline='2', group='*** Time Frame 4 ***')\r\nTF4_Alerts = input.string(title='Alerts', defval='None', \r\n  options=['None', 'Price Enters Resistance Zone', 'Price Enters Support Zone', 'Price Enters Either S/R Zone', 'Price Breaks Up Resistance', 'Price Breaks Down Support', 'Price Breaks Either S/R', 'New S/R Zone Found', 'All Alerts On'],\r\n  tooltip='Select the type of alert you would like, then save settings. On chart, right click on SR indicator and click \\'Add Alert\\' then save. If you would like to change the alert, delete existing alert, change alert settings on indicator, then create new alert', \r\n  group='*** Time Frame 4 ***')\r\n\r\nf_TFx(_TF_input) =>\r\n    if _TF_input == 'Chart'\r\n        timeframe.period\r\n    else if _TF_input == '1m'\r\n        '1'\r\n    else if _TF_input == '3m'\r\n        '3'\r\n    else if _TF_input == '5m'\r\n        '5'\r\n    else if _TF_input == '15m'\r\n        '15'\r\n    else if _TF_input == '30m'\r\n        '30'\r\n    else if _TF_input == '45m'\r\n        '45'\r\n    else if _TF_input == '1h'\r\n        '60'\r\n    else if _TF_input == '2h'\r\n        '120'\r\n    else if _TF_input == '3h'\r\n        '180'\r\n    else if _TF_input == '4h'\r\n        '240'\r\n    else if _TF_input == '6h'\r\n        '360'\r\n    else if _TF_input == '8h'\r\n        '480'\r\n    else if _TF_input == '12h'\r\n        '720'\r\n    else if _TF_input == 'D'\r\n        'D'\r\n    else if _TF_input == '3D'\r\n        '3D'\r\n    else if _TF_input == 'W'\r\n        'W'\r\n    else if _TF_input == '2W'\r\n        '2W'\r\n    else if _TF_input == '1M'\r\n        '1M'\r\n    else if _TF_input == '12M'\r\n        '12M'  \r\n\r\nTF1 = f_TFx(TF1_input)\r\nTF2 = f_TFx(TF2_input)\r\nTF3 = f_TFx(TF3_input)\r\nTF4 = f_TFx(TF4_input)\r\n\r\nvol_check = na(volume) or volume[1]==0\r\nvar table vol_check_table = na\r\nif barstate.islast and vol_check\r\n    table.delete(vol_check_table)\r\n    vol_check_table := table.new(position=position.middle_right, columns=1, rows=1, frame_color=color.red, frame_width=1)\r\n    table.cell(vol_check_table, column=0, row=0, text='There is no volume data for this symbol' + ' (' + syminfo.tickerid + ')' + '\\n Please use a different symbol with volume data', text_color=color.red)\r\n\r\n// // --------- This ensures that no plots from lower time frames will be plotted on higher time frames.\r\n// ————— Converts current chart resolution into a float minutes value.\r\nf_resInMinutes() =>\r\n    _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)\r\n    _resInMinutes\r\n// ————— Returns the float minutes value of the string _res.\r\nf_tfResInMinutes(_res) =>\r\n    // _res: resolution of any TF (in \"timeframe.period\" string format).\r\n    // Dependency: f_resInMinutes().\r\n    request.security(syminfo.tickerid, _res, f_resInMinutes())\r\n\r\n// —————————— Determine if current timeframe is smaller that higher timeframe selected in Inputs.\r\n// Get higher timeframe in minutes.\r\nTF1InMinutes = f_tfResInMinutes(TF1)\r\nTF2InMinutes = f_tfResInMinutes(TF2)\r\nTF3InMinutes = f_tfResInMinutes(TF3)\r\nTF4InMinutes = f_tfResInMinutes(TF4)\r\n\r\n// Get current timeframe in minutes.\r\ncurrentTFInMinutes = f_resInMinutes()\r\n// Compare current TF to higher TF to make sure it is smaller, otherwise our plots don't make sense.\r\nchartOnLowerTF1 = currentTFInMinutes <= TF1InMinutes\r\nchartOnLowerTF2 = currentTFInMinutes <= TF2InMinutes\r\nchartOnLowerTF3 = currentTFInMinutes <= TF3InMinutes\r\nchartOnLowerTF4 = currentTFInMinutes <= TF4InMinutes\r\n\r\nchartEqualTF2 = currentTFInMinutes == TF2InMinutes and TF2_Menu != 'Disable'\r\nchartEqualTF3 = currentTFInMinutes == TF3InMinutes and TF3_Menu != 'Disable'\r\nchartEqualTF4 = currentTFInMinutes == TF4InMinutes and TF4_Menu != 'Disable'\r\n\r\nTF1_inH = str.tostring(TF1InMinutes / 60)\r\nTF1_text = TF1InMinutes >= 60 and TF1InMinutes < 1440 ? TF1_inH + 'h' : TF1InMinutes < 60 ? TF1 + 'm' : TF1\r\n\r\n//--- In order to get the left side of SR zone on higher time frames to line up directly on the bar with the fractal high or fractal low, we need to perform\r\n//--- a series of calculations to find the pivot high/low. Since the FractalUp or FractalDown condition is found after 2 confirming bars, the SR zone would begin\r\n//--- at the opening of the 3rd bar following the pivot high/low). For example, if there is a 4hr Fractal confirmed while on the 1hr chart, it would take 3 4hr bars to confirm. \r\n//--- That means the high/low point could've occured anywhere between 8-12 1hr bars ago.\r\n// // --------- To get the correct bar_index for higher time frame SR zones placed on lower time frame candles, first the range of candles to scan needs to be established.\r\n// // --------- Then find the highest/lowest bar within that range of bars for bar_index on the x1 (left) coordinates of lines (next steps below)\r\nbool TF1_newbar = ta.change(time(TF1)) != 0, bool TF2_newbar = ta.change(time(TF2)) != 0, bool TF3_newbar = ta.change(time(TF3)) != 0, bool TF4_newbar = ta.change(time(TF4)) != 0 \r\nTF1_bi1 = ta.valuewhen(TF1_newbar, bar_index, 1), TF2_bi1 = ta.valuewhen(TF2_newbar, bar_index, 1), TF3_bi1 = ta.valuewhen(TF3_newbar, bar_index, 1), TF4_bi1 = ta.valuewhen(TF4_newbar, bar_index, 1)\r\nTF1_bi5 = ta.valuewhen(TF1_newbar, bar_index, 5), TF2_bi5 = ta.valuewhen(TF2_newbar, bar_index, 5), TF3_bi5 = ta.valuewhen(TF3_newbar, bar_index, 5), TF4_bi5 = ta.valuewhen(TF4_newbar, bar_index, 5)\r\nTF1_bb1 = bar_index-TF1_bi1, TF2_bb1 = bar_index-TF2_bi1, TF3_bb1 = bar_index-TF3_bi1, TF4_bb1 = bar_index-TF4_bi1\r\nTF1_bb5 = bar_index-TF1_bi5, TF2_bb5 = bar_index-TF2_bi5, TF3_bb5 = bar_index-TF3_bi5, TF4_bb5 = bar_index-TF4_bi5\r\nTF1_br = TF1_bb5 - TF1_bb1, TF2_br = TF2_bb5 - TF2_bb1, TF3_br = TF3_bb5 - TF3_bb1, TF4_br = TF4_bb5 - TF4_bb1\r\n\r\n// Get offset value for the highest high or lowest low found within the specified range , using [] to establish the starting point back to begin scanning past bars for highest high or lowest low. \r\n// Moving the starting point back ensures it scans within the range in which the high/low was found by FractalUp/FractalDown condition.\r\n// Output by default is negative, make positive with absolute value for bar_index.\r\n// Adding the TFx_bar_index back in accounts for the number of bars skipped back in [].\r\n// First check if the number of bars back to scan for pivot high/low is going to be over the max bars back, and if so set the bar_index to the max bars back, \r\n// otherwise get exact bar index value for pivot high/low.\r\n\r\nvar int TF1_Hi_Bi = na\r\nvar int TF1_Lo_Bi = na\r\nvar int TF2_Hi_Bi = na\r\nvar int TF2_Lo_Bi = na\r\nvar int TF3_Hi_Bi = na\r\nvar int TF3_Lo_Bi = na\r\nvar int TF4_Hi_Bi = na\r\nvar int TF4_Lo_Bi = na\r\n\r\nif TF1_bb1 > 4999 or (TF1_bb1 + TF1_br) > 4999\r\n    TF1_Hi_Bi := 4999\r\n    TF1_Lo_Bi := 4999\r\nelse\r\n    TF1_Hi_Bi := math.abs(ta.highestbars(high, nz(TF1_br, 1)))[TF1_bb1] + TF1_bb1\r\n    TF1_Lo_Bi := math.abs(ta.lowestbars(low, nz(TF1_br, 1)))[TF1_bb1] + TF1_bb1\r\n\r\nif TF2_bb1 > 4999 or (TF2_bb1 + TF2_br) > 4999\r\n    TF2_Hi_Bi := 4999\r\n    TF2_Lo_Bi := 4999\r\nelse\r\n    TF2_Hi_Bi := math.abs(ta.highestbars(high, nz(TF2_br, 1)))[TF2_bb1] + TF2_bb1\r\n    TF2_Lo_Bi := math.abs(ta.lowestbars(low, nz(TF2_br, 1)))[TF2_bb1] + TF2_bb1\r\n\r\nif TF3_bb1 > 4999 or (TF3_bb1 + TF3_br) > 4999\r\n    TF3_Hi_Bi := 4999\r\n    TF3_Lo_Bi := 4999\r\nelse\r\n    TF3_Hi_Bi := math.abs(ta.highestbars(high, nz(TF3_br, 1)))[TF3_bb1] + TF3_bb1\r\n    TF3_Lo_Bi := math.abs(ta.lowestbars(low, nz(TF3_br, 1)))[TF3_bb1] + TF3_bb1\r\n\r\nif TF4_bb1 > 4999 or (TF4_bb1 + TF4_br) > 4999\r\n    TF4_Hi_Bi := 4999\r\n    TF4_Lo_Bi := 4999\r\nelse\r\n    TF4_Hi_Bi := math.abs(ta.highestbars(high, nz(TF4_br, 1)))[TF4_bb1] + TF4_bb1\r\n    TF4_Lo_Bi := math.abs(ta.lowestbars(low, nz(TF4_br, 1)))[TF4_bb1] + TF4_bb1\r\n\r\n\r\n// TFUp and TFDown Calculations\r\nf_tfUp(_TF_High, _TF_Vol, _TF_VolMA) =>\r\n    _TF_High[3] > _TF_High[4] and _TF_High[4] > _TF_High[5] and _TF_High[2] < _TF_High[3] and _TF_High[1] < _TF_High[2] and _TF_Vol[3] > _TF_VolMA[3]\r\nf_tfDown(_TF_Low, _TF_Vol, _TF_VolMA) =>\r\n    _TF_Low[3] < _TF_Low[4] and _TF_Low[4] < _TF_Low[5] and _TF_Low[2] > _TF_Low[3] and _TF_Low[1] > _TF_Low[2] and _TF_Vol[3] > _TF_VolMA[3]\r\n\r\n// Function for each time frame's various sources used in FractalUp and FractalDown calculations.\r\nf_tfSources(_res, _source) =>\r\n    request.security(syminfo.tickerid, _res, _source)\r\n\r\n// Line and label arrays\r\nvar TF1_UpperSupportLine_array = array.new_line(TF1_NumZones), var TF2_UpperSupportLine_array = array.new_line(TF2_NumZones), var TF3_UpperSupportLine_array = array.new_line(TF3_NumZones), var TF4_UpperSupportLine_array = array.new_line(TF4_NumZones)\r\nvar TF1_LowerSupportLine_array = array.new_line(TF1_NumZones), var TF2_LowerSupportLine_array = array.new_line(TF2_NumZones), var TF3_LowerSupportLine_array = array.new_line(TF3_NumZones), var TF4_LowerSupportLine_array = array.new_line(TF4_NumZones)\r\nvar TF1SupLabel_array = array.new_label(1), var TF2SupLabel_array = array.new_label(1), var TF3SupLabel_array = array.new_label(1), var TF4SupLabel_array = array.new_label(1)\r\n\r\nvar TF1_UpperResLine_array = array.new_line(TF1_NumZones), var TF2_UpperResLine_array = array.new_line(TF2_NumZones), var TF3_UpperResLine_array = array.new_line(TF3_NumZones), var TF4_UpperResLine_array = array.new_line(TF4_NumZones)\r\nvar TF1_LowerResLine_array = array.new_line(TF1_NumZones), var TF2_LowerResLine_array = array.new_line(TF2_NumZones), var TF3_LowerResLine_array = array.new_line(TF3_NumZones), var TF4_LowerResLine_array = array.new_line(TF4_NumZones)\r\nvar TF1ResLabel_array = array.new_label(1), var TF2ResLabel_array = array.new_label(1), var TF3ResLabel_array = array.new_label(1), var TF4ResLabel_array = array.new_label(1)\r\n\r\n// Resistance Line Functions\r\nTF_ResistanceLineA(TF_input,TF_FractalUp,TF_ResLineColor,TF_UpperResLine_array,TF_NumZones,TF_ResZone, TF_LowerResLine_array,TF_text,TF_ResLabel_array,bi_hi,bi_3,bi,bi_2,ext_right) =>\r\n    if show_HL\r\n        UpperResistanceLine = line.new(x1=TF_input != 'Chart' ? bi_hi : bi_3, y1=TF_FractalUp, x2=bi, y2=TF_FractalUp, color=TF_ResLineColor, style=LineStyleHL, width=LineWidthHLInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_UpperResLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_UpperResLine_array, TF_NumZones-1), x=TF_input != 'Chart' ? bi_hi : bi_3)\r\n        array.push(TF_UpperResLine_array, UpperResistanceLine)\r\n        line.delete(array.shift(TF_UpperResLine_array))\r\n    if show_close\r\n        LowerResistanceLine = line.new(x1=TF_input != 'Chart' ? bi_hi : bi_3, y1=TF_ResZone, x2=bi, y2=TF_ResZone, color=TF_ResLineColor, style=LineStyleClose, width=LineWidthCloseInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_LowerResLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_LowerResLine_array, TF_NumZones-1), x=TF_input != 'Chart' ? bi_hi : bi_3)\r\n        array.push(TF_LowerResLine_array, LowerResistanceLine)\r\n        line.delete(array.shift(TF_LowerResLine_array))\r\n    if ShowLabel == true and label_loc == 'Left'\r\n        TFResLabel = label.new(TF_input != 'Chart' ? bi_hi : bi_2, TF_FractalUp, text=TF_text + \"(R)\", color=color.new(color.white, 100), size=size.normal, style=label.style_label_right, textcolor=TF_ResLineColor)\r\n        array.push(TF_ResLabel_array, TFResLabel)\r\n        label.delete(array.shift(TF_ResLabel_array))\r\n\r\nTF_ResistanceLineB(TF_FractalUp,TF_ResLineColor,TF_UpperResLine_array,TF_NumZones,TF_ResZone,TF_LowerResLine_array,TF_text,TF_ResLabel_array,bi3,bi,ext_right) =>\r\n    if show_HL\r\n        UpperResistanceLine = line.new(x1=bi3, y1=TF_FractalUp, x2=bi, y2=TF_FractalUp, color=TF_ResLineColor, style=LineStyleHL, width=LineWidthHLInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_UpperResLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_UpperResLine_array, TF_NumZones-1), x=bi3)\r\n        array.push(TF_UpperResLine_array, UpperResistanceLine)\r\n        line.delete(array.shift(TF_UpperResLine_array))\r\n    if show_close\r\n        LowerResistanceLine = line.new(x1=bi3, y1=TF_ResZone, x2=bi, y2=TF_ResZone, color=TF_ResLineColor, style=LineStyleClose, width=LineWidthCloseInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_LowerResLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_LowerResLine_array, TF_NumZones-1), x=bi3)\r\n        array.push(TF_LowerResLine_array, LowerResistanceLine)\r\n        line.delete(array.shift(TF_LowerResLine_array))\r\n    if ShowLabel == true and label_loc == 'Left'\r\n        TFResLabel = label.new(bi3, TF_FractalUp, text=TF_text + \"(R)\", color=color.new(color.white, 100), size=size.normal, style=label.style_label_right, textcolor=TF_ResLineColor)\r\n        array.push(TF_ResLabel_array, TFResLabel)\r\n        label.delete(array.shift(TF_ResLabel_array))\r\n\r\n// Support Line Functions\r\nTF_SupportLineA(TF_input, TF_FractalDown,TF_SupLinesColor,TF_UpperSupportLine_array,TF_NumZones,TF_SupportZone, TF_LowerSupportLine_array,TF_text,TF_SupLabel_array,bi_lo,bi_3,bi,bi_2,ext_right) =>\r\n    if show_close\r\n        UpperSupportLine = line.new(x1=TF_input != 'Chart' ? bi_lo : bi_3, y1=TF_SupportZone, x2=bi, y2=TF_SupportZone, color=TF_SupLinesColor, style=LineStyleClose, width=LineWidthCloseInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_UpperSupportLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_UpperSupportLine_array, TF_NumZones-1), x=TF_input != 'Chart' ? bi_lo : bi_3)\r\n        array.push(TF_UpperSupportLine_array, UpperSupportLine)\r\n        line.delete(array.shift(TF_UpperSupportLine_array))\r\n    if show_HL\r\n        LowerSupportLine = line.new(x1=TF_input != 'Chart' ? bi_lo : bi_3, y1=TF_FractalDown, x2=bi, y2=TF_FractalDown, color=TF_SupLinesColor, style=LineStyleHL, width=LineWidthHLInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_LowerSupportLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_LowerSupportLine_array, TF_NumZones-1), x=TF_input != 'Chart' ? bi_lo : bi_3)\r\n        array.push(TF_LowerSupportLine_array, LowerSupportLine)\r\n        line.delete(array.shift(TF_LowerSupportLine_array))\r\n    if ShowLabel == true and label_loc == 'Left'\r\n        SupLabel = label.new(TF_input != 'Chart' ? bi_lo : bi_2, TF_FractalDown, text=TF_text + \"(S)\", color=color.new(color.white, 100), size=size.normal, style=label.style_label_right, textcolor=TF_SupLinesColor)\r\n        array.push(TF_SupLabel_array, SupLabel)\r\n        label.delete(array.shift(TF_SupLabel_array))\r\n\r\nTF_SupportLineB(TF_FractalDown,TF_SupLinesColor,TF_UpperSupportLine_array,TF_NumZones,TF_SupportZone,TF_LowerSupportLine_array,TF_text,TF_SupLabel_array,bi3,bi,ext_right) =>\r\n    if show_close\r\n        UpperSupportLine = line.new(x1=bi3, y1=TF_SupportZone, x2=bi, y2=TF_SupportZone, color=TF_SupLinesColor, style=LineStyleClose, width=LineWidthCloseInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_UpperSupportLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_UpperSupportLine_array, TF_NumZones-1), x=bi3)\r\n        array.push(TF_UpperSupportLine_array, UpperSupportLine)\r\n        line.delete(array.shift(TF_UpperSupportLine_array))\r\n    if show_HL\r\n        LowerSupportLine = line.new(x1=bi3, y1=TF_FractalDown, x2=bi, y2=TF_FractalDown, color=TF_SupLinesColor, style=LineStyleHL, width=LineWidthHLInput, extend=extend.right)\r\n        line.set_extend(id=array.get(TF_LowerSupportLine_array, TF_NumZones-1), extend=ext_right ? extend.right : extend.none)\r\n        if ExtendLines1 == true\r\n            line.set_x2(id=array.get(TF_LowerSupportLine_array, TF_NumZones-1), x=bi3)\r\n        array.push(TF_LowerSupportLine_array, LowerSupportLine)\r\n        line.delete(array.shift(TF_LowerSupportLine_array))\r\n    if ShowLabel == true and label_loc == 'Left'\r\n        SupLabel = label.new(bi3, TF_FractalDown, text=TF_text + \"(S)\", color=color.new(color.white, 100), size=size.normal, style=label.style_label_right, textcolor=TF_SupLinesColor)\r\n        array.push(TF_SupLabel_array, SupLabel)\r\n        label.delete(array.shift(TF_SupLabel_array))\r\n\r\n// Label Function\r\nTFLabel(bi, TF_Fractal, txt, txtcolor, TFLabel_array) =>\r\n    Label = label.new(bi, TF_Fractal, text=txt, size=size.normal, style=label.style_none, textcolor=txtcolor)\r\n    array.push(TFLabel_array, Label)\r\n    label.delete(array.shift(TFLabel_array))\r\n\r\n// S/R  = Time Frame 1 = TF1\r\nTF1_Vol = f_tfSources(TF1, volume)\r\nTF1_VolMA = ta.sma(TF1_Vol, TF1_VolMA1Input)\r\nTF1_High = f_tfSources(TF1, high)\r\nTF1_Low = f_tfSources(TF1, low)\r\nTF1_Open = f_tfSources(TF1, open)\r\nTF1_Close = f_tfSources(TF1, close)\r\n\r\nTF1_Up = f_tfUp(TF1_High, TF1_Vol, TF1_VolMA)\r\nTF1_Down = f_tfDown(TF1_Low, TF1_Vol, TF1_VolMA)\r\n\r\nTF1_CalcFractalUp() =>\r\n    TF1_FractalUp = 0.0\r\n    TF1_FractalUp := TF1_Up ? TF1_High[3] : TF1_FractalUp[1]\r\n    TF1_FractalUp\r\n\r\nTF1_CalcFractalDown() =>\r\n    TF1_FractalDown = 0.0\r\n    TF1_FractalDown := TF1_Down ? TF1_Low[3] : TF1_FractalDown[1]\r\n    TF1_FractalDown\r\n\r\nTF1_FractalUp = request.security(syminfo.tickerid, TF1, TF1_CalcFractalUp())\r\nTF1_FractalDown = request.security(syminfo.tickerid, TF1, TF1_CalcFractalDown())\r\n\r\n// Zones - Current Time Frame = Time Frame 1 = TF1\r\n// Fractal Up Zones\r\nTF1_CalcFractalUpZone() =>\r\n    TF1_FractalUpZone = 0.0\r\n    TF1_FractalUpZone := TF1_Up and TF1_Close[3] >= TF1_Open[3] ? TF1_Close[3] : TF1_Up and TF1_Close[3] < TF1_Open[3] ? TF1_Open[3] : TF1_FractalUpZone[1]\r\n    TF1_FractalUpZone\r\n\r\nTF1_FractalUpZone = request.security(syminfo.tickerid, TF1, TF1_CalcFractalUpZone())\r\nTF1_ResZone = TF1_FractalUpZone\r\n\r\n// Fractal Down Zones\r\nTF1_CalcFractalDownZone() =>\r\n    TF1_FractalDownZone = 0.0\r\n    TF1_FractalDownZone := TF1_Down and TF1_Close[3] >= TF1_Open[3] ? TF1_Open[3] : TF1_Down and TF1_Close[3] < TF1_Open[3] ? TF1_Close[3] : TF1_FractalDownZone[1]\r\n    TF1_FractalDownZone\r\n\r\nTF1_FractalDownZone = request.security(syminfo.tickerid, TF1, TF1_CalcFractalDownZone())\r\nTF1_SupportZone = TF1_FractalDownZone\r\n\r\n// Time Frame 1 = TF1 Resistance\r\nif (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and TF1_FractalUp != TF1_FractalUp[1] and chartOnLowerTF1 and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4\r\n    TF_ResistanceLineA(TF1_input,TF1_FractalUp,TF1_ResLinesColor,TF1_UpperResLine_array,TF1_NumZones,TF1_ResZone, TF1_LowerResLine_array,TF1_text,TF1ResLabel_array,bar_index[TF1_Hi_Bi], bar_index[3], bar_index,bar_index[2], TF1_extRight)\r\nelse if (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and na(TF1_FractalUp != TF1_FractalUp[1]) and chartOnLowerTF1 and na(ta.barssince(TF1_FractalUp != TF1_FractalUp[1])) and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4\r\n    TF_ResistanceLineB(TF1_FractalUp,TF1_ResLinesColor,TF1_UpperResLine_array,TF1_NumZones,TF1_ResZone,TF1_LowerResLine_array,TF1_text,TF1ResLabel_array,bar_index[3],bar_index, TF1_extRight)\r\n\r\nif (TF1_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF1_UpperResLine_array, TF1_NumZones-1), array.get(TF1_LowerResLine_array, TF1_NumZones-1), TF1_ResZoneColor)\r\n\r\nif ShowLabel == true and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF1_FractalUp, TF1_text+\"(R)\", TF1_ResLinesColor, TF1ResLabel_array)\r\n\r\n\r\n// Time Frame 1 = TF1 Support\r\nif (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and TF1_FractalDown != TF1_FractalDown[1] and chartOnLowerTF1 and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4\r\n    TF_SupportLineA(TF1_input,TF1_FractalDown,TF1_SupLinesColor,TF1_UpperSupportLine_array,TF1_NumZones,TF1_SupportZone, TF1_LowerSupportLine_array,TF1_text,TF1SupLabel_array,bar_index[TF1_Lo_Bi], bar_index[3], bar_index,bar_index[2], TF1_extRight)\r\nelse if (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and na(TF1_FractalDown != TF1_FractalDown[1]) and chartOnLowerTF1 and na(ta.barssince(TF1_FractalDown != TF1_FractalDown[1])) and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4\r\n    TF_SupportLineB(TF1_FractalDown,TF1_SupLinesColor,TF1_UpperSupportLine_array,TF1_NumZones,TF1_SupportZone,TF1_LowerSupportLine_array,TF1_text,TF1SupLabel_array,bar_index[3],bar_index, TF1_extRight)\r\n\r\nif (TF1_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF1_UpperSupportLine_array, TF1_NumZones-1), array.get(TF1_LowerSupportLine_array, TF1_NumZones-1), TF1_SupZoneColor)\r\n\r\nif ShowLabel == true and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and not chartEqualTF2 and not chartEqualTF3 and not chartEqualTF4 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF1_FractalDown, TF1_text+\"(S)\", TF1_SupLinesColor, TF1SupLabel_array)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF1_UpperResLine_array, TF1_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF1_UpperResLine_array, TF1_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF1_LowerResLine_array, TF1_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF1_LowerResLine_array, TF1_NumZones-1), bar_index)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF1_UpperSupportLine_array, TF1_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF1_UpperSupportLine_array, TF1_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF1_LowerSupportLine_array, TF1_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF1_LowerSupportLine_array, TF1_NumZones-1), bar_index)\r\n\r\n// S/R  = Time Frame 2 = TF2\r\nTF2_Vol = f_tfSources(TF2, volume)\r\nTF2_VolMA = ta.sma(TF2_Vol, TF2_VolMA1Input)\r\nTF2_High = f_tfSources(TF2, high)\r\nTF2_Low = f_tfSources(TF2, low)\r\nTF2_Open = f_tfSources(TF2, open)\r\nTF2_Close = f_tfSources(TF2, close)\r\n\r\nTF2_Up = f_tfUp(TF2_High, TF2_Vol, TF2_VolMA)\r\nTF2_Down = f_tfDown(TF2_Low, TF2_Vol, TF2_VolMA)\r\n\r\nTF2_CalcFractalUp() =>\r\n    TF2_FractalUp = 0.0\r\n    TF2_FractalUp := TF2_Up ? TF2_High[3] : TF2_FractalUp[1]\r\n    TF2_FractalUp\r\n\r\nTF2_CalcFractalDown() =>\r\n    TF2_FractalDown = 0.0\r\n    TF2_FractalDown := TF2_Down ? TF2_Low[3] : TF2_FractalDown[1]\r\n    TF2_FractalDown\r\n\r\nTF2_FractalUp = request.security(syminfo.tickerid, TF2, TF2_CalcFractalUp())\r\nTF2_FractalDown = request.security(syminfo.tickerid, TF2, TF2_CalcFractalDown())\r\n\r\n// Zones - Current Time Frame = Time Frame 2 = TF2\r\n// Fractal Up Zones\r\nTF2_CalcFractalUpZone() =>\r\n    TF2_FractalUpZone = 0.0\r\n    TF2_FractalUpZone := TF2_Up and TF2_Close[3] >= TF2_Open[3] ? TF2_Close[3] : TF2_Up and TF2_Close[3] < TF2_Open[3] ? TF2_Open[3] : TF2_FractalUpZone[1]\r\n    TF2_FractalUpZone\r\n\r\nTF2_FractalUpZone = request.security(syminfo.tickerid, TF2, TF2_CalcFractalUpZone())\r\nTF2_ResZone = TF2_FractalUpZone\r\n\r\n// Fractal Down Zones\r\nTF2_CalcFractalDownZone() =>\r\n    TF2_FractalDownZone = 0.0\r\n    TF2_FractalDownZone := TF2_Down and TF2_Close[3] >= TF2_Open[3] ? TF2_Open[3] : TF2_Down and TF2_Close[3] < TF2_Open[3] ? TF2_Close[3] : TF2_FractalDownZone[1]\r\n    TF2_FractalDownZone\r\n\r\nTF2_FractalDownZone = request.security(syminfo.tickerid, TF2, TF2_CalcFractalDownZone())\r\nTF2_SupportZone = TF2_FractalDownZone\r\n\r\n// Time Frame 2 = TF2 Resistance\r\nif (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and TF2_FractalUp != TF2_FractalUp[1] and chartOnLowerTF2\r\n    TF_ResistanceLineA(TF2_input,TF2_FractalUp,TF2_ResLinesColor,TF2_UpperResLine_array,TF2_NumZones,TF2_ResZone, TF2_LowerResLine_array,TF2_input,TF2ResLabel_array,bar_index[TF2_Hi_Bi], bar_index[3], bar_index,bar_index[2], TF2_extRight)\r\nelse if (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and na(TF2_FractalUp != TF2_FractalUp[1]) and chartOnLowerTF2 and na(ta.barssince(TF2_FractalUp != TF2_FractalUp[1]))\r\n    TF_ResistanceLineB(TF2_FractalUp,TF2_ResLinesColor,TF2_UpperResLine_array,TF2_NumZones,TF2_ResZone,TF2_LowerResLine_array,TF2_input,TF2ResLabel_array,bar_index[3],bar_index, TF2_extRight)\r\n\r\nif (TF2_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF2_UpperResLine_array, TF2_NumZones-1), array.get(TF2_LowerResLine_array, TF2_NumZones-1), TF2_ResZoneColor)\r\n\r\nif ShowLabel == true and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF2_FractalUp, TF2_input+\"(R)\", TF2_ResLinesColor, TF2ResLabel_array)\r\n\r\n\r\n// Time Frame 2 = TF2 Support\r\nif (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and TF2_FractalDown != TF2_FractalDown[1] and chartOnLowerTF2\r\n    TF_SupportLineA(TF2_input,TF2_FractalDown,TF2_SupLinesColor,TF2_UpperSupportLine_array,TF2_NumZones,TF2_SupportZone, TF2_LowerSupportLine_array,TF2_input,TF2SupLabel_array,bar_index[TF2_Lo_Bi], bar_index[3], bar_index,bar_index[2], TF2_extRight)\r\nelse if (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and na(TF2_FractalDown != TF2_FractalDown[1]) and chartOnLowerTF2 and na(ta.barssince(TF2_FractalDown != TF2_FractalDown[1])) \r\n    TF_SupportLineB(TF2_FractalDown,TF2_SupLinesColor,TF2_UpperSupportLine_array,TF2_NumZones,TF2_SupportZone,TF2_LowerSupportLine_array,TF2_input,TF2SupLabel_array,bar_index[3],bar_index, TF2_extRight)\r\n\r\nif (TF2_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF2_UpperSupportLine_array, TF2_NumZones-1), array.get(TF2_LowerSupportLine_array, TF2_NumZones-1), TF2_SupZoneColor)\r\n\r\nif ShowLabel == true and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF2_FractalDown, TF2_input+\"(S)\", TF2_SupLinesColor, TF2SupLabel_array)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF2_UpperResLine_array, TF2_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF2_UpperResLine_array, TF2_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF2_LowerResLine_array, TF2_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF2_LowerResLine_array, TF2_NumZones-1), bar_index)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF2_UpperSupportLine_array, TF2_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF2_UpperSupportLine_array, TF2_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF2_LowerSupportLine_array, TF2_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF2_LowerSupportLine_array, TF2_NumZones-1), bar_index)\r\n\r\n// S/R  = Time Frame 3 = TF3\r\nTF3_Vol = f_tfSources(TF3, volume)\r\nTF3_VolMA = ta.sma(TF3_Vol, TF3_VolMA1Input)\r\nTF3_High = f_tfSources(TF3, high)\r\nTF3_Low = f_tfSources(TF3, low)\r\nTF3_Open = f_tfSources(TF3, open)\r\nTF3_Close = f_tfSources(TF3, close)\r\n\r\nTF3_Up = f_tfUp(TF3_High, TF3_Vol, TF3_VolMA)\r\nTF3_Down = f_tfDown(TF3_Low, TF3_Vol, TF3_VolMA)\r\n\r\nTF3_CalcFractalUp() =>\r\n    TF3_FractalUp = 0.0\r\n    TF3_FractalUp := TF3_Up ? TF3_High[3] : TF3_FractalUp[1]\r\n    TF3_FractalUp\r\n\r\nTF3_CalcFractalDown() =>\r\n    TF3_FractalDown = 0.0\r\n    TF3_FractalDown := TF3_Down ? TF3_Low[3] : TF3_FractalDown[1]\r\n    TF3_FractalDown\r\n\r\nTF3_FractalUp = request.security(syminfo.tickerid, TF3, TF3_CalcFractalUp())\r\nTF3_FractalDown = request.security(syminfo.tickerid, TF3, TF3_CalcFractalDown())\r\n\r\n// Zones - Current Time Frame = Time Frame 3 = TF3\r\n// Fractal Up Zones\r\nTF3_CalcFractalUpZone() =>\r\n    TF3_FractalUpZone = 0.0\r\n    TF3_FractalUpZone := TF3_Up and TF3_Close[3] >= TF3_Open[3] ? TF3_Close[3] : TF3_Up and TF3_Close[3] < TF3_Open[3] ? TF3_Open[3] : TF3_FractalUpZone[1]\r\n    TF3_FractalUpZone\r\n\r\nTF3_FractalUpZone = request.security(syminfo.tickerid, TF3, TF3_CalcFractalUpZone())\r\nTF3_ResZone = TF3_FractalUpZone\r\n\r\n// Fractal Down Zones\r\nTF3_CalcFractalDownZone() =>\r\n    TF3_FractalDownZone = 0.0\r\n    TF3_FractalDownZone := TF3_Down and TF3_Close[3] >= TF3_Open[3] ? TF3_Open[3] : TF3_Down and TF3_Close[3] < TF3_Open[3] ? TF3_Close[3] : TF3_FractalDownZone[1]\r\n    TF3_FractalDownZone\r\n\r\nTF3_FractalDownZone = request.security(syminfo.tickerid, TF3, TF3_CalcFractalDownZone())\r\nTF3_SupportZone = TF3_FractalDownZone\r\n\r\n// Time Frame 3 = TF3 Resistance\r\nif (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and TF3_FractalUp != TF3_FractalUp[1] and chartOnLowerTF3\r\n    TF_ResistanceLineA(TF3_input,TF3_FractalUp,TF3_ResLinesColor,TF3_UpperResLine_array,TF3_NumZones,TF3_ResZone, TF3_LowerResLine_array,TF3_input,TF3ResLabel_array,bar_index[TF3_Hi_Bi], bar_index[3], bar_index,bar_index[2], TF3_extRight)\r\nelse if (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and na(TF3_FractalUp != TF3_FractalUp[1]) and chartOnLowerTF3 and na(ta.barssince(TF3_FractalUp != TF3_FractalUp[1]))\r\n    TF_ResistanceLineB(TF3_FractalUp,TF3_ResLinesColor,TF3_UpperResLine_array,TF3_NumZones,TF3_ResZone,TF3_LowerResLine_array,TF3_input,TF3ResLabel_array,bar_index[3],bar_index, TF3_extRight)\r\n\r\nif (TF3_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF3_UpperResLine_array, TF3_NumZones-1), array.get(TF3_LowerResLine_array, TF3_NumZones-1), TF3_ResZoneColor)\r\n\r\nif ShowLabel == true and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF3_FractalUp, TF3_input+\"(R)\", TF3_ResLinesColor, TF3ResLabel_array)\r\n\r\n\r\n// Time Frame 3 = TF3 Support\r\nif (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and TF3_FractalDown != TF3_FractalDown[1] and chartOnLowerTF3\r\n    TF_SupportLineA(TF3_input,TF3_FractalDown,TF3_SupLinesColor,TF3_UpperSupportLine_array,TF3_NumZones,TF3_SupportZone, TF3_LowerSupportLine_array,TF3_input,TF3SupLabel_array,bar_index[TF3_Lo_Bi], bar_index[3], bar_index,bar_index[2], TF3_extRight)\r\nelse if (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and na(TF3_FractalDown != TF3_FractalDown[1]) and chartOnLowerTF3 and na(ta.barssince(TF3_FractalDown != TF3_FractalDown[1])) \r\n    TF_SupportLineB(TF3_FractalDown,TF3_SupLinesColor,TF3_UpperSupportLine_array,TF3_NumZones,TF3_SupportZone,TF3_LowerSupportLine_array,TF3_input,TF3SupLabel_array,bar_index[3],bar_index, TF3_extRight)\r\n\r\nif (TF3_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF3_UpperSupportLine_array, TF3_NumZones-1), array.get(TF3_LowerSupportLine_array, TF3_NumZones-1), TF3_SupZoneColor)\r\n\r\nif ShowLabel == true and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF3_FractalDown, TF3_input+\"(S)\", TF3_SupLinesColor, TF3SupLabel_array)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF3_UpperResLine_array, TF3_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF3_UpperResLine_array, TF3_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF3_LowerResLine_array, TF3_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF3_LowerResLine_array, TF3_NumZones-1), bar_index)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF3_UpperSupportLine_array, TF3_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF3_UpperSupportLine_array, TF3_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF3_LowerSupportLine_array, TF3_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF3_LowerSupportLine_array, TF3_NumZones-1), bar_index)\r\n\r\n// S/R  = Time Frame 4 = TF4\r\nTF4_Vol = f_tfSources(TF4, volume)\r\nTF4_VolMA = ta.sma(TF4_Vol, TF4_VolMA1Input)\r\nTF4_High = f_tfSources(TF4, high)\r\nTF4_Low = f_tfSources(TF4, low)\r\nTF4_Open = f_tfSources(TF4, open)\r\nTF4_Close = f_tfSources(TF4, close)\r\n\r\nTF4_Up = f_tfUp(TF4_High, TF4_Vol, TF4_VolMA)\r\nTF4_Down = f_tfDown(TF4_Low, TF4_Vol, TF4_VolMA)\r\n\r\nTF4_CalcFractalUp() =>\r\n    TF4_FractalUp = 0.0\r\n    TF4_FractalUp := TF4_Up ? TF4_High[3] : TF4_FractalUp[1]\r\n    TF4_FractalUp\r\n\r\nTF4_CalcFractalDown() =>\r\n    TF4_FractalDown = 0.0\r\n    TF4_FractalDown := TF4_Down ? TF4_Low[3] : TF4_FractalDown[1]\r\n    TF4_FractalDown\r\n\r\nTF4_FractalUp = request.security(syminfo.tickerid, TF4, TF4_CalcFractalUp())\r\nTF4_FractalDown = request.security(syminfo.tickerid, TF4, TF4_CalcFractalDown())\r\n\r\n// Zones - Current Time Frame = Time Frame 4 = TF4\r\n// Fractal Up Zones\r\nTF4_CalcFractalUpZone() =>\r\n    TF4_FractalUpZone = 0.0\r\n    TF4_FractalUpZone := TF4_Up and TF4_Close[3] >= TF4_Open[3] ? TF4_Close[3] : TF4_Up and TF4_Close[3] < TF4_Open[3] ? TF4_Open[3] : TF4_FractalUpZone[1]\r\n    TF4_FractalUpZone\r\n\r\nTF4_FractalUpZone = request.security(syminfo.tickerid, TF4, TF4_CalcFractalUpZone())\r\nTF4_ResZone = TF4_FractalUpZone\r\n\r\n// Fractal Down Zones\r\nTF4_CalcFractalDownZone() =>\r\n    TF4_FractalDownZone = 0.0\r\n    TF4_FractalDownZone := TF4_Down and TF4_Close[3] >= TF4_Open[3] ? TF4_Open[3] : TF4_Down and TF4_Close[3] < TF4_Open[3] ? TF4_Close[3] : TF4_FractalDownZone[1]\r\n    TF4_FractalDownZone\r\n\r\nTF4_FractalDownZone = request.security(syminfo.tickerid, TF4, TF4_CalcFractalDownZone())\r\nTF4_SupportZone = TF4_FractalDownZone\r\n\r\n// Time Frame 4 = TF4 Resistance\r\nif (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and TF4_FractalUp != TF4_FractalUp[1] and chartOnLowerTF4\r\n    TF_ResistanceLineA(TF4_input,TF4_FractalUp,TF4_ResLinesColor,TF4_UpperResLine_array,TF4_NumZones,TF4_ResZone, TF4_LowerResLine_array,TF4_input,TF4ResLabel_array,bar_index[TF4_Hi_Bi], bar_index[3], bar_index,bar_index[2], TF4_extRight)\r\nelse if (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and na(TF4_FractalUp != TF4_FractalUp[1]) and chartOnLowerTF4 and na(ta.barssince(TF4_FractalUp != TF4_FractalUp[1]))\r\n    TF_ResistanceLineB(TF4_FractalUp,TF4_ResLinesColor,TF4_UpperResLine_array,TF4_NumZones,TF4_ResZone,TF4_LowerResLine_array,TF4_input,TF4ResLabel_array,bar_index[3],bar_index, TF4_extRight)\r\n\r\nif (TF4_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF4_UpperResLine_array, TF4_NumZones-1), array.get(TF4_LowerResLine_array, TF4_NumZones-1), TF4_ResZoneColor)\r\n\r\nif ShowLabel == true and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and chartOnLowerTF4 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF4_FractalUp, TF4_input+\"(R)\", TF4_ResLinesColor, TF4ResLabel_array)\r\n\r\n\r\n// Time Frame 4 = TF4 Support\r\nif (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and TF4_FractalDown != TF4_FractalDown[1] and chartOnLowerTF4\r\n    TF_SupportLineA(TF4_input,TF4_FractalDown,TF4_SupLinesColor,TF4_UpperSupportLine_array,TF4_NumZones,TF4_SupportZone, TF4_LowerSupportLine_array,TF4_input,TF4SupLabel_array,bar_index[TF4_Lo_Bi], bar_index[3], bar_index,bar_index[2], TF4_extRight)\r\nelse if (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and na(TF4_FractalDown != TF4_FractalDown[1]) and chartOnLowerTF4 and na(ta.barssince(TF4_FractalDown != TF4_FractalDown[1])) \r\n    TF_SupportLineB(TF4_FractalDown,TF4_SupLinesColor,TF4_UpperSupportLine_array,TF4_NumZones,TF4_SupportZone,TF4_LowerSupportLine_array,TF4_input,TF4SupLabel_array,bar_index[3],bar_index, TF4_extRight)\r\n\r\nif (TF4_Menu == 'S/R Zones')\r\n    linefill.new(array.get(TF4_UpperSupportLine_array, TF4_NumZones-1), array.get(TF4_LowerSupportLine_array, TF4_NumZones-1), TF4_SupZoneColor)\r\n\r\nif ShowLabel == true and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and chartOnLowerTF4 and label_loc == 'Right'\r\n    TFLabel(bar_index+label_offset, TF4_FractalDown, TF4_input+\"(S)\", TF4_SupLinesColor, TF4SupLabel_array)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF4_UpperResLine_array, TF4_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF4_UpperResLine_array, TF4_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF4_LowerResLine_array, TF4_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF4_LowerResLine_array, TF4_NumZones-1), bar_index)\r\n\r\nif ext_active == false and barstate.islast\r\n    line.set_extend(array.get(TF4_UpperSupportLine_array, TF4_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF4_UpperSupportLine_array, TF4_NumZones-1), bar_index)\r\n    line.set_extend(array.get(TF4_LowerSupportLine_array, TF4_NumZones-1), extend.none)\r\n    line.set_x2(array.get(TF4_LowerSupportLine_array, TF4_NumZones-1), bar_index)\r\n\r\n// ---------- The following lines modify the labels when there is the same S/R zone found on 2 different time frames, to combine both into one label and take the color of the higher time frame.\r\n// ---------- This prevents 2 labels from being displayed on top of each other. For left labels, extra lines are required to reset the labels back to their original form once the SR changes for the lower time frame.\r\n\r\nif label_loc == 'Right'\r\n    if TF4_FractalUp == TF3_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF3ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF3_input + '/' + TF4_input + \"(R)\")\r\n    if TF4_FractalUp == TF2_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF2ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF2_input + '/' + TF4_input + \"(R)\")\r\n    if TF4_FractalUp == TF1_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF4 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF1_text + '/' + TF4_input + \"(R)\")\r\n    if TF3_FractalUp == TF2_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF2ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF2_input + '/' + TF3_input + \"(R)\")\r\n    if TF3_FractalUp == TF1_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF3 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF1_text + '/' + TF3_input + \"(R)\")\r\n    if TF2_FractalUp == TF1_FractalUp and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF2 and not chartEqualTF2\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF2ResLabel_array, 0), text=TF1_text + '/' + TF2_input + \"(R)\")\r\n    if TF4_FractalDown == TF3_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF3SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF3_input + '/' + TF4_input + \"(S)\")\r\n    if TF4_FractalDown == TF2_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF2SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF2_input + '/' + TF4_input + \"(S)\")\r\n    if TF4_FractalDown == TF1_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF4 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF1_text + '/' + TF4_input + \"(S)\")\r\n    if TF3_FractalDown == TF2_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF2SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF2_input + '/' + TF3_input + \"(S)\")\r\n    if TF3_FractalDown == TF1_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF3 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF1_text + '/' + TF3_input + \"(S)\")\r\n    if TF2_FractalDown == TF1_FractalDown and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF2 and not chartEqualTF2\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF2SupLabel_array, 0), text=TF1_text + '/' + TF2_input + \"(S)\")\r\n\r\n// Left Labels\r\nif label_loc == 'Left'\r\n    if TF4_FractalUp == TF3_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF3ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF3_input + '/' + TF4_input + \"(R)\")\r\n    if TF4_FractalUp[1] == TF3_FractalUp[1] and TF4_FractalUp != TF3_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF4_input + \"(R)\")\r\n    if TF4_FractalUp == TF2_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF2ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF2_input + '/' + TF4_input + \"(R)\")\r\n    if TF4_FractalUp[1] == TF2_FractalUp[1] and TF4_FractalUp != TF2_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF4_input + \"(R)\")\r\n    if TF4_FractalUp == TF1_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF4 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF1_text + '/' + TF4_input + \"(R)\")\r\n    if TF4_FractalUp[1] == TF1_FractalUp[1] and TF4_FractalUp != TF1_FractalUp and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4ResLabel_array, 0), text=TF4_input + \"(R)\")\r\n    if TF3_FractalUp == TF2_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF2ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF2_input + '/' + TF3_input + \"(R)\")\r\n    if TF3_FractalUp[1] == TF2_FractalUp[1] and TF3_FractalUp != TF2_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF3_input + \"(R)\")\r\n    if TF3_FractalUp == TF1_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF3 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF1_text + '/' + TF3_input + \"(R)\")\r\n    if TF3_FractalUp[1] == TF1_FractalUp[1] and TF3_FractalUp != TF1_FractalUp and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF3ResLabel_array, 0), text=TF3_input + \"(R)\")\r\n    if TF2_FractalUp == TF1_FractalUp and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF2 and not chartEqualTF2\r\n        label.set_textcolor(id=array.get(TF1ResLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF2ResLabel_array, 0), text=TF1_text + '/' + TF2_input + \"(R)\")\r\n    if TF2_FractalUp[1] == TF1_FractalUp[1] and TF2_FractalUp != TF1_FractalUp and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF2ResLabel_array, 0), text=TF2_input + \"(R)\")\r\n    if TF4_FractalDown == TF3_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and chartOnLowerTF3 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF3SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF3_input + '/' + TF4_input + \"(S)\")\r\n    if TF4_FractalDown[1] == TF3_FractalDown[1] and TF4_FractalDown != TF3_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF4_input + \"(S)\")\r\n    if TF4_FractalDown == TF2_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF2SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF2_input + '/' + TF4_input + \"(S)\")\r\n    if TF4_FractalDown[1] == TF2_FractalDown[1] and TF4_FractalDown != TF2_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF4_input + \"(S)\")\r\n    if TF4_FractalDown == TF1_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF4 and not chartEqualTF4\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF1_text + '/' + TF4_input + \"(S)\")\r\n    if TF4_FractalDown[1] == TF1_FractalDown[1] and TF4_FractalDown != TF1_FractalDown and (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF4SupLabel_array, 0), text=TF4_input + \"(S)\")\r\n    if TF3_FractalDown == TF2_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and chartOnLowerTF2 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF2SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF2_input + '/' + TF3_input + \"(S)\")\r\n    if TF3_FractalDown[1] == TF2_FractalDown[1] and TF2_FractalDown != TF3_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF3_input + \"(S)\")\r\n    if TF3_FractalDown == TF1_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF3 and not chartEqualTF3\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF1_text + '/' + TF3_input + \"(S)\")\r\n    if TF3_FractalDown[1] == TF1_FractalDown[1] and TF3_FractalDown != TF1_FractalDown and (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF3SupLabel_array, 0), text=TF3_input + \"(S)\")\r\n    if TF2_FractalDown == TF1_FractalDown and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and chartOnLowerTF1 and chartOnLowerTF2 and not chartEqualTF2\r\n        label.set_textcolor(id=array.get(TF1SupLabel_array, 0), textcolor=color.new(color.white, 100))\r\n        label.set_text(id=array.get(TF2SupLabel_array, 0), text=TF1_text + '/' + TF2_input + \"(S)\")\r\n    if TF2_FractalDown[1] == TF1_FractalDown[1] and TF2_FractalDown != TF1_FractalDown and (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R')\r\n        label.set_text(id=array.get(TF2SupLabel_array, 0), text=TF2_input + \"(S)\")\r\n\r\n// ---------------- Alerts\r\n// TF1\r\nPriceEntersTF1ResZone = ta.crossover(close, TF1_ResZone)\r\nPriceTestResAsSupportTF1 = ta.crossunder(close, TF1_FractalUp)\r\nPriceEntersTF1SupZone = ta.crossunder(close, TF1_SupportZone)\r\nPriceTestSupportAsResTF1 = ta.crossover(close, TF1_FractalDown)\r\nPriceBreakingTF1Resistance = ta.crossover(close, TF1_FractalUp)\r\nPriceBreakingTF1Support = ta.crossunder(close, TF1_FractalDown)\r\nNewResFoundTF1 = (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and TF1_FractalUp != TF1_FractalUp[1]\r\nNewSupFoundTF1 = (TF1_Menu == 'S/R Zones' or TF1_Menu == 'S/R') and TF1_FractalDown != TF1_FractalDown[1]\r\n\r\nif (TF1_Alerts == 'Price Enters Resistance Zone' or TF1_Alerts == 'Price Enters Either S/R Zone' or TF1_Alerts == 'All Alerts On') and PriceEntersTF1ResZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF1_text + ' Resistance Zone', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'Price Enters Resistance Zone' or TF1_Alerts == 'Price Enters Either S/R Zone' or TF1_Alerts == 'All Alerts On') and PriceTestResAsSupportTF1\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF1_text + ' resistance as support', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'Price Enters Support Zone' or TF1_Alerts == 'Price Enters Either S/R Zone' or TF1_Alerts == 'All Alerts On') and PriceEntersTF1SupZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF1_text + ' Support Zone', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'Price Enters Support Zone' or TF1_Alerts == 'Price Enters Either S/R Zone' or TF1_Alerts == 'All Alerts On') and PriceTestSupportAsResTF1\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF1_text + ' support as resistance', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'Price Breaks Resistance' or TF1_Alerts == 'Price Breaks Either S/R' or TF1_Alerts == 'All Alerts On') and PriceBreakingTF1Resistance\r\n    alert(syminfo.ticker + ' - Price is breaking out ' + TF1_text + ' Resistance', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'Price Breaks Support' or TF1_Alerts == 'Price Breaks Either S/R' or TF1_Alerts == 'All Alerts On') and PriceBreakingTF1Support\r\n    alert(syminfo.ticker + ' - Price is breaking down ' + TF1_text + ' Support', alert.freq_once_per_bar)\r\n\r\nif (TF1_Alerts == 'New S/R Zone Found' or TF1_Alerts == 'All Alerts On')\r\n    if NewResFoundTF1\r\n        alert(syminfo.ticker + ' - New ' + TF1_text + ' Resistance Zone Found', alert.freq_once_per_bar)\r\n    if NewSupFoundTF1\r\n        alert(syminfo.ticker + ' - New ' + TF1_text + ' Support Zone Found', alert.freq_once_per_bar)\r\n\r\n// TF2\r\nPriceEntersTF2ResZone = ta.crossover(close, TF2_ResZone)\r\nPriceTestResAsSupportTF2 = ta.crossunder(close, TF2_FractalUp)\r\nPriceEntersTF2SupZone = ta.crossunder(close, TF2_SupportZone)\r\nPriceTestSupportAsResTF2 = ta.crossover(close, TF2_FractalDown)\r\nPriceBreakingTF2Resistance = ta.crossover(close, TF2_FractalUp)\r\nPriceBreakingTF2Support = ta.crossunder(close, TF2_FractalDown)\r\nNewResFoundTF2 = (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and TF2_FractalUp != TF2_FractalUp[1]\r\nNewSupFoundTF2 = (TF2_Menu == 'S/R Zones' or TF2_Menu == 'S/R') and TF2_FractalDown != TF2_FractalDown[1]\r\n\r\nif (TF2_Alerts == 'Price Enters Resistance Zone' or TF2_Alerts == 'Price Enters Either S/R Zone' or TF2_Alerts == 'All Alerts On') and PriceEntersTF2ResZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF2_input + ' Resistance Zone', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'Price Enters Resistance Zone' or TF2_Alerts == 'Price Enters Either S/R Zone' or TF2_Alerts == 'All Alerts On') and PriceTestResAsSupportTF2\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF2_input + ' resistance as support', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'Price Enters Support Zone' or TF2_Alerts == 'Price Enters Either S/R Zone' or TF2_Alerts == 'All Alerts On') and PriceEntersTF2SupZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF2_input + ' Support Zone', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'Price Enters Support Zone' or TF2_Alerts == 'Price Enters Either S/R Zone' or TF2_Alerts == 'All Alerts On') and PriceTestSupportAsResTF2\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF2_input + ' support as resistance', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'Price Breaks Resistance' or TF2_Alerts == 'Price Breaks Either S/R' or TF2_Alerts == 'All Alerts On') and PriceBreakingTF2Resistance\r\n    alert(syminfo.ticker + ' - Price is breaking out ' + TF2_input + ' Resistance', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'Price Breaks Support' or TF2_Alerts == 'Price Breaks Either S/R' or TF2_Alerts == 'All Alerts On') and PriceBreakingTF2Support\r\n    alert(syminfo.ticker + ' - Price is breaking down ' + TF2_input + ' Support', alert.freq_once_per_bar)\r\n\r\nif (TF2_Alerts == 'New S/R Zone Found' or TF2_Alerts == 'All Alerts On')\r\n    if NewResFoundTF2\r\n        alert(syminfo.ticker + ' - New ' + TF2_input + ' Resistance Zone Found', alert.freq_once_per_bar)\r\n    if NewSupFoundTF2\r\n        alert(syminfo.ticker + ' - New ' + TF2_input + ' Support Zone Found', alert.freq_once_per_bar)\r\n\r\n// TF3\r\nPriceEntersTF3ResZone = ta.crossover(close, TF3_ResZone)\r\nPriceTestResAsSupportTF3 = ta.crossunder(close, TF3_FractalUp)\r\nPriceEntersTF3SupZone = ta.crossunder(close, TF3_SupportZone)\r\nPriceTestSupportAsResTF3 = ta.crossover(close, TF3_FractalDown)\r\nPriceBreakingTF3Resistance = ta.crossover(close, TF3_FractalUp)\r\nPriceBreakingTF3Support = ta.crossunder(close, TF3_FractalDown)\r\nNewResFoundTF3 = (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and TF3_FractalUp != TF3_FractalUp[1]\r\nNewSupFoundTF3 = (TF3_Menu == 'S/R Zones' or TF3_Menu == 'S/R') and TF3_FractalDown != TF3_FractalDown[1]\r\n\r\nif (TF3_Alerts == 'Price Enters Resistance Zone' or TF3_Alerts == 'Price Enters Either S/R Zone' or TF3_Alerts == 'All Alerts On') and PriceEntersTF3ResZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF3_input + ' Resistance Zone', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'Price Enters Resistance Zone' or TF3_Alerts == 'Price Enters Either S/R Zone' or TF3_Alerts == 'All Alerts On') and PriceTestResAsSupportTF3\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF3_input + ' resistance as support', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'Price Enters Support Zone' or TF3_Alerts == 'Price Enters Either S/R Zone' or TF3_Alerts == 'All Alerts On') and PriceEntersTF3SupZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF3_input + ' Support Zone', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'Price Enters Support Zone' or TF3_Alerts == 'Price Enters Either S/R Zone' or TF3_Alerts == 'All Alerts On') and PriceTestSupportAsResTF3\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF3_input + ' support as resistance', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'Price Breaks Resistance' or TF3_Alerts == 'Price Breaks Either S/R' or TF3_Alerts == 'All Alerts On') and PriceBreakingTF3Resistance\r\n    alert(syminfo.ticker + ' - Price is breaking out ' + TF3_input + ' Resistance', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'Price Breaks Support' or TF3_Alerts == 'Price Breaks Either S/R' or TF3_Alerts == 'All Alerts On') and PriceBreakingTF3Support\r\n    alert(syminfo.ticker + ' - Price is breaking down ' + TF3_input + ' Support', alert.freq_once_per_bar)\r\n\r\nif (TF3_Alerts == 'New S/R Zone Found' or TF3_Alerts == 'All Alerts On')\r\n    if NewResFoundTF3\r\n        alert(syminfo.ticker + ' - New ' + TF3_input + ' Resistance Zone Found', alert.freq_once_per_bar)\r\n    if NewSupFoundTF3\r\n        alert(syminfo.ticker + ' - New ' + TF3_input + ' Support Zone Found', alert.freq_once_per_bar)\r\n\r\n// TF4\r\nPriceEntersTF4ResZone = ta.crossover(close, TF4_ResZone)\r\nPriceTestResAsSupportTF4 = ta.crossunder(close, TF4_FractalUp)\r\nPriceEntersTF4SupZone = ta.crossunder(close, TF4_SupportZone)\r\nPriceTestSupportAsResTF4 = ta.crossover(close, TF4_FractalDown)\r\nPriceBreakingTF4Resistance = ta.crossover(close, TF4_FractalUp)\r\nPriceBreakingTF4Support = ta.crossunder(close, TF4_FractalDown)\r\nNewResFoundTF4 = (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and TF4_FractalUp != TF4_FractalUp[1]\r\nNewSupFoundTF4 = (TF4_Menu == 'S/R Zones' or TF4_Menu == 'S/R') and TF4_FractalDown != TF4_FractalDown[1]\r\n\r\nif (TF4_Alerts == 'Price Enters Resistance Zone' or TF4_Alerts == 'Price Enters Either S/R Zone' or TF4_Alerts == 'All Alerts On') and PriceEntersTF4ResZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF4_input + ' Resistance Zone', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'Price Enters Resistance Zone' or TF4_Alerts == 'Price Enters Either S/R Zone' or TF4_Alerts == 'All Alerts On') and PriceTestResAsSupportTF4\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF4_input + ' resistance as support', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'Price Enters Support Zone' or TF4_Alerts == 'Price Enters Either S/R Zone' or TF4_Alerts == 'All Alerts On') and PriceEntersTF4SupZone\r\n    alert(syminfo.ticker + ' - Price enters ' + TF4_input + ' Support Zone', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'Price Enters Support Zone' or TF4_Alerts == 'Price Enters Either S/R Zone' or TF4_Alerts == 'All Alerts On') and PriceTestSupportAsResTF4\r\n    alert(syminfo.ticker + ' - Price is testing ' + TF4_input + ' support as resistance', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'Price Breaks Resistance' or TF4_Alerts == 'Price Breaks Either S/R' or TF4_Alerts == 'All Alerts On') and PriceBreakingTF4Resistance\r\n    alert(syminfo.ticker + ' - Price is breaking out ' + TF4_input + ' Resistance', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'Price Breaks Support' or TF4_Alerts == 'Price Breaks Either S/R' or TF4_Alerts == 'All Alerts On') and PriceBreakingTF4Support\r\n    alert(syminfo.ticker + ' - Price is breaking down ' + TF4_input + ' Support', alert.freq_once_per_bar)\r\n\r\nif (TF4_Alerts == 'New S/R Zone Found' or TF4_Alerts == 'All Alerts On')\r\n    if NewResFoundTF4\r\n        alert(syminfo.ticker + ' - New ' + TF4_input + ' Resistance Zone Found', alert.freq_once_per_bar)\r\n    if NewSupFoundTF4\r\n        alert(syminfo.ticker + ' - New ' + TF4_input + ' Support Zone Found', alert.freq_once_per_bar)","updated":"2023-10-11T16:10:33.325879Z","version":"14.0"}