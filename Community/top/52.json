{"created":"2023-03-30T14:39:53.902619Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"2.0","scriptAccess":"open_no_auth","scriptName":"Breakout Probability (Expo)","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\r\n// Â© Zeiierman\r\n\r\n//@version=5\r\nindicator(\"Breakout Probability (Expo)\",overlay=true,max_bars_back=5000)\r\n\r\n// ~~ Tooltips {\r\nt1 = \"The space between the levels can be adjusted with a percentage step. 1% means that each level is located 1% above/under the previous one.\"\r\nt2 = \"Set the number of levels you want to display.\"\r\nt3 = \"If a level got 0 % likelihood of being hit, the level is not displayed as default. Enable the option if you want to see all levels regardless of their values.\"\r\nt4 = \"Enable this option if you want to display the backtest statistics for that a new high or low is made.\"\r\nstring [] tbl_tips = array.from(\"Number of times price has reached the first highest percentage level\",\r\n \"Number of times price failed to reach the first highest percentage level\",\r\n \"Win/Loss ratio\")\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Inputs {\r\nperc                    = input.float(1.0,title=\"Percentage Step\",step=.1,minval=0,group=\"Settings\",tooltip=t1)\r\nnbr                     = input.int(5, title=\"Number of Lines\",maxval=5,minval=1,group=\"Settings\",tooltip=t2)\r\nupCol                   = input.color(color.new(color.green,0),title=\"\",inline=\"col\"),dnCol=input.color(color.new(color.red,0),title=\"\",inline=\"col\"),fill=input.bool(true,title=\"BG Color\",inline=\"col\")\r\nvar bool [] bools       = array.from(input.bool(true,title=\"Disable 0.00%\",group=\"Settings\",tooltip=t3),input.bool(true, title=\"Show Statistic Panel\",group=\"Settings\",tooltip=t4))\r\nvar bool [] alert_bool  = array.from(\r\n input.bool(true,title=\"Ticker ID\",group=\"Any alert() function call\"),\r\n input.bool(true,title=\"High/Low Price\",group=\"Any alert() function call\"),\r\n input.bool(true,title=\"Bullish/Bearish Bias\",group=\"Any alert() function call\"),\r\n input.bool(true,title=\"Bullish/Bearish Percentage\",group=\"Any alert() function call\"))\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Variables {\r\nb = bar_index\r\no = open\r\nh = high\r\nl = low\r\nc = close\r\nstep = c*(perc/100)\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Save Values In Matrix {\r\nvar total  = matrix.new<int>(7,4,0)\r\nvar vals   = matrix.new<float>(5,4,0.0)\r\nvar lines  = matrix.new<line>(1,10,line(na))\r\nvar labels = matrix.new<label>(1,10,label(na))\r\nvar tbl    = matrix.new<table>(1,1,table.new(position.top_right,2,3,\r\n frame_color=color.new(color.gray,50),frame_width=3,\r\n border_color=chart.bg_color,border_width=-2))\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Save Number Of Green & Red Candles {\r\ngreen = c[1]>o[1]\r\nred   = c[1]<o[1]\r\nif green\r\n    prev = matrix.get(total,5,0)\r\n    matrix.set(total,5,0,prev+1)\r\nif red\r\n    prev = matrix.get(total,5,1)\r\n    matrix.set(total,5,1,prev+1)\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Functions {\r\n//Lines\r\nCreateLine(p,i,c)=>\r\n    prevLine = matrix.get(lines,0,i)\r\n    line.delete(prevLine)\r\n    li = line.new(b[1],p,b,p,color=c,width=2)\r\n    matrix.set(lines,0,i,li)\r\n//Labels\r\nCreateLabel(p,i,c,r,v)=>\r\n    prevLabel = matrix.get(labels,0,i)\r\n    label.delete(prevLabel)\r\n    la = label.new(b+1,p,text=str.tostring(matrix.get(vals,r,v),format.percent),\r\n     style=label.style_label_left,color=color.new(color.black,100),textcolor=c)\r\n    matrix.set(labels,0,i,la)\r\n//Score Calculation\r\nScore(x,i)=>\r\n    ghh = matrix.get(total,i,0)\r\n    gll = matrix.get(total,i,1)\r\n    rhh = matrix.get(total,i,2)\r\n    rll = matrix.get(total,i,3)\r\n    gtotal = matrix.get(total,5,0)\r\n    rtotal = matrix.get(total,5,1)\r\n    hh = h>=h[1] + x\r\n    ll = l<=l[1] - x\r\n    if green and hh\r\n        matrix.set(total,i,0,ghh+1)\r\n        matrix.set(vals,i,0,math.round(((ghh+1)/gtotal)*100,2))\r\n    if green and ll\r\n        matrix.set(total,i,1,gll+1)\r\n        matrix.set(vals,i,1,math.round(((gll+1)/gtotal)*100,2))\r\n    if red and hh\r\n        matrix.set(total,i,2,rhh+1)\r\n        matrix.set(vals,i,2,math.round(((rhh+1)/rtotal)*100,2))\r\n    if red and ll\r\n        matrix.set(total,i,3,rll+1)\r\n        matrix.set(vals,i,3,math.round(((rll+1)/rtotal)*100,2))\r\n//Backtest\r\nBacktest(v)=>\r\n    p1 = matrix.get(total,6,0)\r\n    p2 = matrix.get(total,6,1)\r\n    if v==h[1]\r\n        if h>=v\r\n            matrix.set(total,6,0,p1+1)\r\n        else\r\n            matrix.set(total,6,1,p2+1)\r\n    else\r\n        if l<=v\r\n            matrix.set(total,6,0,p1+1)\r\n        else \r\n            matrix.set(total,6,1,p2+1)\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Code {\r\n//Run Score Function\r\nScore(0,0)\r\nScore(step,1)\r\nScore(step*2,2)\r\nScore(step*3,3)\r\nScore(step*4,4)\r\n\r\n//Fetch Score Values\r\na1 = matrix.get(vals,0,0)\r\nb1 = matrix.get(vals,0,1)\r\na2 = matrix.get(vals,0,2)\r\nb2 = matrix.get(vals,0,3)\r\n\r\n//Lines & Labels & Alerts\r\nfor i=0 to nbr-1\r\n    hide = array.get(bools,0)\r\n    if not hide or (hide and (green?math.min(matrix.get(vals,i,0),\r\n     matrix.get(vals,i,1))>0:\r\n     math.min(matrix.get(vals,i,2),\r\n     matrix.get(vals,i,3))>0))\r\n        hi = h[1]+(step*i)\r\n        lo = l[1]-(step*i)\r\n        //Plot Lines\r\n        CreateLine(hi,i,upCol)\r\n        CreateLine(lo,5+i,dnCol)\r\n        //Plot Labels\r\n        if green\r\n            CreateLabel(hi,i,upCol,i,0)\r\n            CreateLabel(lo,5+i,dnCol,i,1)\r\n        else \r\n            CreateLabel(hi,i,upCol,i,2)\r\n            CreateLabel(lo,5+i,dnCol,i,3)\r\n        //Create Alert\r\n        if array.includes(alert_bool, true)\r\n            s1 = str.tostring(syminfo.ticker)\r\n            s2 = \"High Price: \"+str.tostring(math.round_to_mintick(h[1]))+\r\n             \" | Low Price: \"+str.tostring(math.round_to_mintick(l[1]))\r\n            s3 = green?(math.max(a1,b1)==a1?\"BULLISH\":\"BEARISH\"):\r\n             (math.max(a2,b2)==a2?\"BULLISH\":\"BEARISH\")\r\n            s4 = green?(math.max(a1,b1)==a1?a1:b1):(math.min(a2,b2)==a2?a2:b2)\r\n            s5 = red  ?(math.max(a2,b2)==a2?a2:b2):(math.min(a1,b1)==a1?a1:b1)\r\n            string [] str_vals = array.from(s1,s2,\"BIAS: \"+s3,\r\n             \"Percentage: High: \"+str.tostring(s4,format.percent)\r\n             +\" | Low: \"+str.tostring(s5,format.percent))\r\n            output = array.new_string()\r\n            for x=0 to array.size(alert_bool)-1\r\n                if array.get(alert_bool,x)\r\n                    array.push(output,array.get(str_vals,x))\r\n            //Alert Is Triggered On Every Bar Open With Bias And Percentage Ratio\r\n            alert(array.join(output,'\\n'),alert.freq_once_per_bar)\r\n    else\r\n        //Delete Old Lines & Labels\r\n        line.delete(matrix.get(lines,0,i))\r\n        line.delete(matrix.get(lines,0,5+i))\r\n        label.delete(matrix.get(labels,0,i))\r\n        label.delete(matrix.get(labels,0,5+i))\r\n\r\n//Run Backtest Function\r\nBacktest(green?(math.max(a1,b1)==a1?h[1]:l[1]):(math.max(a2,b2)==a2?h[1]:l[1]))\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Linefill {\r\nif fill\r\n    var filler = linefill(na)\r\n    for i=0 to 8\r\n        get = matrix.get(lines,0,i)\r\n        get1= matrix.get(lines,0,i+1)\r\n        col = i>4?color.new(dnCol,80) : i==4?color.new(color.gray,100) : color.new(upCol,80)\r\n        filler := linefill.new(get,get1,color=col)\r\n        linefill.delete(filler[1])\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Table {\r\nif barstate.islast and array.get(bools,1)\r\n    //Calulate WinRatio\r\n    W  = matrix.get(total,6,0)\r\n    L  = matrix.get(total,6,1)\r\n    WR = math.round(W/(W+L)*100,2)\r\n    string [] tbl_vals = array.from(\"WIN: \"+str.tostring(W),\r\n     \"LOSS: \"+str.tostring(L),\r\n     \"Profitability: \"+str.tostring(WR,format.percent))\r\n    color [] tbl_col = array.from(color.green,color.red,chart.fg_color)\r\n    for i=0 to 2\r\n        table.cell(matrix.get(tbl,0,0),0,i,array.get(tbl_vals,i),\r\n         text_halign=text.align_center,bgcolor=chart.bg_color,\r\n         text_color=array.get(tbl_col,i),text_size=size.auto,\r\n         tooltip=array.get(tbl_tips,i))\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}","updated":"2023-03-30T14:39:53.902619Z","version":"2.0"}