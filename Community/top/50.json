{"created":"2022-05-10T17:01:46.408489Z","extra":{"kind":"study","sourceInputsCount":0},"scriptAccess":"open_no_auth","scriptName":"Super OrderBlock / FVG / BoS Tools by makuchaku & eFe","source":"//@version=5\r\n//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\nindicator('Super OrderBlock / FVG / BoS Tools by makuchaku & eFe', overlay=true, max_boxes_count=500, max_lines_count=500)\r\n\r\nplotOB = input.bool(defval=true, title='Plot OB', group='Order Blocks')\r\nobBullColor = input.color(defval=color.new(color.green, 90), title='Bullish OB Color', inline='Set Custom Color', group='Order Blocks')\r\nobBearColor = input.color(defval=color.new(color.red, 90), title='Bearish OB Color', inline='Set Custom Color', group='Order Blocks')\r\nobBoxBorder = input.string(defval=line.style_solid, title='OB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Order Blocks', tooltip='To disable border, set Border Width below to 0')\r\nobBorderTransparency = input.int(defval=80, title='OB Border Box Transparency', minval=0, maxval=100, group='Order Blocks')\r\nobMaxBoxSet = input.int(defval=10, title='Maximum OB Box Displayed', minval=1, maxval=100, group='Order Blocks', tooltip='Minimum = 1, Maximum = 100')\r\nfilterMitOB = input.bool(defval=false, title='Custom Color Mitigated OB', group='Order Blocks')\r\nmitOBColor = input.color(defval=color.new(color.gray, 90), title='Mitigated OB Color', group='Order Blocks', inline='Set Custom Color Mit OB', tooltip='Set Transparency to 0 to make mitigated OB disappear')\r\n\r\nplotFVG = input.bool(defval=true, title='Plot FVG', group='Fair Value Gaps', inline='FVG sets')\r\nplotStructureBreakingFVG = input.bool(defval=true, title='Plot Structure Breaking FVG', group='Fair Value Gaps', inline='FVG sets')\r\nfvgBullColor = input.color(defval=color.new(color.black, 90), title='Bullish FVG Color', inline='Set Custom Color', group='Fair Value Gaps')\r\nfvgBearColor = input.color(defval=color.new(color.black, 90), title='Bearish FVG Color', inline='Set Custom Color', group='Fair Value Gaps')\r\nfvgStructBreakingColor = input.color(defval=color.new(color.blue, 90), title='Structure Breaking FVG Color', inline='Set Custom Color', group='Fair Value Gaps')\r\nfvgBoxBorder = input.string(defval=line.style_solid, title='FVG Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Fair Value Gaps', tooltip='To disable border, set Border Width below to 0')\r\nfvgBorderTransparency = input.int(defval=80, title='FVG Border Box Transparency', minval=0, maxval=100, group='Fair Value Gaps')\r\nfvgMaxBoxSet = input.int(defval=10, title='Maximum FVG Box Displayed', minval=1, maxval=100, group='Fair Value Gaps', tooltip='Minimum = 1, Maximum = 100')\r\nfilterMitFVG = input.bool(defval=false, title='Custom Color Mitigated FVG', group='Fair Value Gaps')\r\nmitFVGColor = input.color(defval=color.new(color.gray, 90), title='Mitigated FVG Color', group='Fair Value Gaps', inline='Set Custom Color Mit FVG', tooltip='Set Transparency to 0 to make mitigated FVG disappear')\r\n\r\nplotRJB = input.bool(defval=false, title='Plot RJB', group='Rejection Blocks', inline='RJB sets')\r\nrjbBullColor = input.color(defval=color.new(color.green, 90), title='Bullish RJB Color', inline='Set Custom Color', group='Rejection Blocks')\r\nrjbBearColor = input.color(defval=color.new(color.red, 90), title='Bearish RJB Color', inline='Set Custom Color', group='Rejection Blocks')\r\nrjbBoxBorder = input.string(defval=line.style_solid, title='RJB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Rejection Blocks', tooltip='To disable border, set Border Width below to 0')\r\nrjbBorderTransparency = input.int(defval=80, title='RJB Border Box Transparency', minval=0, maxval=100, group='Rejection Blocks')\r\nrjbMaxBoxSet = input.int(defval=10, title='Maximum RJB Box Displayed', minval=1, maxval=100, group='Rejection Blocks', tooltip='Minimum = 1, Maximum = 100')\r\nfilterMitRJB = input.bool(defval=false, title='Custom Color Mitigated RJB', group='Rejection Blocks')\r\nmitRJBColor = input.color(defval=color.new(color.gray, 90), title='Mitigated RJB Color', group='Rejection Blocks', inline='Set Custom Color Mit RJB', tooltip='Set to 100 to make mitigated RJB disappear')\r\n\r\nplotPVT = input.bool(defval=true, title='Plot Pivots', group='Pivots')\r\npivotLookup  = input.int(defval=1, minval=1, maxval=5,title='Pivot Lookup', group='Pivots', tooltip='Minimum = 1, Maximum = 5')\r\npvtTopColor = input.color(defval=color.new(color.silver, 0), title='Pivot Top Color', group='Pivots', inline='PVT Color')\r\npvtBottomColor = input.color(defval=color.new(color.silver, 0), title='Pivot Bottom Color', group='Pivots', inline='PVT Color')\r\n\r\nplotBOS = input.bool(defval=false, title='Plot BoS', group='Crossovers', inline='BOS sets')\r\nuseHighLowForBullishBoS = input.bool(defval=false, title='Use High/Low for Bullish BoS (for Bearish setup)', group='Crossovers')\r\nuseHighLowForBearishBoS = input.bool(defval=false, title='Use High/Low for Bearish BoS (for Bullish setup)', group='Crossovers')\r\nbosBoxFlag  = input.bool(title='BoS Box Length Manually', defval=false, group='Crossovers', tooltip='If activated the BoS Boxes will not extend unitl crossed by price. Instead will extend by the amount of bars choosen in the \"Set BoS Box Length Manually\" option')\r\nbosBoxLength  = input.int(title='BoS Box Length Manually', defval=3, minval=1, maxval=5, group='Crossovers', inline='BoS Boxes', tooltip='If \"Set BoS Box Length Manually\" is marked, choose by how many bars. Minimum = 1, Maximum = 5')\r\nbosBullColor = input.color(defval=color.new(color.green, 90), title='Bullish BoS Color', inline='Set Custom Color', group='Crossovers')\r\nbosBearColor = input.color(defval=color.new(color.red, 90), title='Bearish BoS Color', inline='Set Custom Color', group='Crossovers')\r\nbosBoxBorder = input.string(defval=line.style_solid, title='BoS Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Crossovers', tooltip='To disable border, set Border Width below to 0')\r\nbosBorderTransparency = input.int(defval=80, title='BoS Border Box Transparency', minval=0, maxval=100, group='Crossovers')\r\nbosMaxBoxSet = input.int(defval=10, title='Maximum BoS Box Displayed', minval=1, maxval=100, group='Crossovers', tooltip='Minimum = 1, Maximum = 100')\r\n\r\nplotHVB = input.bool(defval=true, title='Plot HVB', group='High Volume Bar', tooltip='A candle where the average volume is higher than last few bars.')\r\nhvbBullColor = input.color(defval=color.green, title='Bullish HVB Color', inline='Set Custom Color', group='High Volume Bar')\r\nhvbBearColor = input.color(defval=color.red, title='Bearish HVB Color', inline='Set Custom Color', group='High Volume Bar')\r\nhvbEMAPeriod = input.int(defval=12, minval=1, title='Volume EMA Period', group='High Volume Bar')\r\nhvbMultiplier = input.float(defval=1.5, title='Volume Multiplier', minval=1, maxval=100, group='High Volume Bar')\r\n\r\nplotPPDD = input.bool(defval=true, title=\"Plot PPDD OB's\", group='Qualitative indicators', tooltip='Premium Premium Discount Discount (PPDD) is an OB formed after liquidity sweep. It will show up by default as a triangle (Bull ▲ / Bear ▼). Also PPDD1 (by deafult maked with a x-cross ⨯) which is a weak OB formed after liquidity sweep, that fails to completely engulf the high/low, but closes beyond the trapped candles open price.')\r\nppddBullColor = input.color(defval=color.new(color.green, 0), title=\"Bullish PPDD OB's Color\", group='Qualitative indicators', inline='PPDD Color')\r\nppddBearColor = input.color(defval=color.new(color.red, 0), title=\"Bearish PPDD OB's Color\", group='Qualitative indicators', inline='PPDD Color')\r\n\r\nplotOBFVG = input.bool(defval=true, title='Plot Stacked OB+FVG', group='Qualitative indicators', tooltip='Marks the candle (default with a diamond ◆) when an OB & FVG are stacked, showing momentum')\r\nobfvgBullColor = input.color(defval=color.new(color.green, 0), title='Bullish Stacked OB+FVG Color', group='Qualitative indicators', inline='OBFVG Color')\r\nobfvgBearColor = input.color(defval=color.new(color.red, 0), title='Bearish Stacked OB+FVG Color', group='Qualitative indicators', inline='OBFVG Color')\r\n\r\nplotLabelOB = input.bool(defval=true, title='Plot OB Label', inline='OB label', group='Label Options')\r\nobLabelColor = input.color(defval=color.gray, title='Color', inline='OB label', group='Label Options')\r\nobLabelSize = input.string(defval=size.tiny, title=\"Size\", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='OB label', group='Label Options')\r\nplotLabelFVG = input.bool(defval=true, title='Plot FVG Label', inline='FVG label', group='Label Options')\r\nfvgLabelColor = input.color(defval=color.gray, title='Color', inline='FVG label', group='Label Options')\r\nfvgLabelSize = input.string(defval=size.tiny, title=\"Size\", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='FVG label', group='Label Options')\r\nplotLabelRJB = input.bool(defval=true, title='Plot RJB Label', inline='RJB label', group='Label Options')\r\nrjbLabelColor = input.color(defval=color.gray, title='Color', inline='RJB label', group='Label Options')\r\nrjbLabelSize = input.string(defval=size.tiny, title=\"Size\", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='RJB label', group='Label Options')\r\nplotLabelBOS = input.bool(defval=true, title='Plot BoS Label', inline='BOS label', group='Label Options')\r\nbosLabelColor = input.color(defval=color.gray, title='Color', inline='BOS label', group='Label Options')\r\nbosLabelSize = input.string(defval=size.tiny, title=\"Size\", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='BOS label', group='Label Options')\r\n\r\n//Box Types\r\nvar int _ob  = 1\r\nvar int _fvg = 2\r\nvar int _rjb = 3\r\nvar int _bos = 4\r\n\r\n//Box Labels\r\nvar string _obLabel  = \"OB\"\r\nvar string _fvgLabel = \"FVG\"\r\nvar string _rjbLabel = \"RJB\"\r\nvar string _bosLabel = \"BoS\"\r\nvar string _plus     = \"+\"\r\nvar string _minus    = \"-\"\r\nvar string _empty    = \"\"\r\n\r\n//Box Arrays\r\nvar box[] _bearBoxesOB  = array.new_box()\r\nvar box[] _bullBoxesOB  = array.new_box()\r\nvar box[] _bearBoxesFVG = array.new_box()\r\nvar box[] _bullBoxesFVG = array.new_box()\r\nvar box[] _bearBoxesRJB = array.new_box()\r\nvar box[] _bullBoxesRJB = array.new_box()\r\nvar box[] _bearBoxesBOS = array.new_box()\r\nvar box[] _bullBoxesBOS = array.new_box()\r\n\r\n//Functions\r\nisUp(index) =>\r\n    close[index] > open[index]\r\n\r\nisDown(index) =>\r\n    close[index] < open[index]\r\n\r\nisObUp(index) =>\r\n    isDown(index + 1) and isUp(index) and close[index] > high[index + 1]\r\n\r\nisObDown(index) =>\r\n    isUp(index + 1) and isDown(index) and close[index] < low[index + 1]\r\n\r\nisFvgUp(index) =>\r\n    (low[index] > high[index + 2])\r\n\r\nisFvgDown(index) =>\r\n    (high[index] < low[index + 2])\r\n\r\n//Function to Calculte Box Length\r\n_controlBox(_boxes, _high, _low, _type) =>\r\n    if array.size(_boxes) > 0\r\n        for i = array.size(_boxes) - 1 to 0 by 1\r\n            _box = array.get(_boxes, i)\r\n            _boxLow = box.get_bottom(_box)\r\n            _boxHigh = box.get_top(_box)\r\n            _boxRight = box.get_right(_box)\r\n            if bosBoxFlag and _type == _bos\r\n                if na or (bar_index + bosBoxLength - 1 == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))\r\n                    box.set_right(_box, bar_index + bosBoxLength - 1)\r\n            else if (filterMitOB and _type == _ob) or (filterMitFVG and _type == _fvg) or (filterMitRJB and _type == _rjb)\r\n                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))\r\n                    box.set_right(_box, bar_index + 1)\r\n                else\r\n                    if _type == _ob\r\n                        box.set_bgcolor(_box, mitOBColor)\r\n                        box.set_border_color(_box, mitOBColor)\r\n                    else if _type == _fvg\r\n                        box.set_bgcolor(_box, mitFVGColor)\r\n                        box.set_border_color(_box, mitFVGColor)\r\n                    else if _type == _rjb\r\n                        box.set_bgcolor(_box, mitRJBColor)\r\n                        box.set_border_color(_box, mitRJBColor)\r\n            else\r\n                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))\r\n                    box.set_right(_box, bar_index + 1)\r\n\r\n//////////////////// Pivots //////////////////// \r\nhih = ta.pivothigh(high, pivotLookup, pivotLookup)\r\nlol = ta.pivotlow(low , pivotLookup, pivotLookup)\r\ntop = ta.valuewhen(hih, high[pivotLookup], 0)\r\nbottom = ta.valuewhen(lol, low [pivotLookup], 0)\r\nplot(top, offset=-pivotLookup, linewidth=1, color=(top != top[1] ? na : (plotPVT ? pvtTopColor : na)), title=\"Pivot Top\")\r\nplot(bottom, offset=-pivotLookup, linewidth=1, color=(bottom != bottom[1] ? na : (plotPVT ? pvtBottomColor : na)), title=\"Pivot Bottom\")\r\n\r\n//////////////////// Order Block //////////////////\r\n//Bullish OB Box Plotting\r\nif isObUp(1) and plotOB\r\n    _bullboxOB = box.new(left=bar_index - 2, top=high[2], right=bar_index, bottom=math.min(low[2], low[1]), border_color=color.new(obBullColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBullColor, \r\n     text=plotLabelOB ? _obLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)\r\n    if array.size(_bullBoxesOB) > obMaxBoxSet\r\n        box.delete(array.shift(_bullBoxesOB))\r\n    array.push(_bullBoxesOB, _bullboxOB)\r\n\r\n//Bearish OB Box Plotting\r\nif isObDown(1) and plotOB\r\n    _bearboxOB = box.new(left=bar_index - 2, top=math.max(high[2], high[1]), right=bar_index, bottom=low[2], border_color=color.new(obBearColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBearColor, \r\n     text=plotLabelOB ? _obLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)\r\n    if array.size(_bearBoxesOB) > obMaxBoxSet\r\n        box.delete(array.shift(_bearBoxesOB))\r\n    array.push(_bearBoxesOB, _bearboxOB)\r\n    \r\nif plotOB\r\n    _controlBox(_bearBoxesOB, high, low, _ob)\r\n    _controlBox(_bullBoxesOB, high, low, _ob)\r\n\r\n//////////////////// Fair Value Gap //////////////////\r\n//Bullish FVG Box Plotting\r\nif isFvgUp(0)\r\n    box _bullboxFVG = na\r\n    if plotStructureBreakingFVG and (close[1] > top) and (low[1] < top) and (high[2] < top) and (low > top)\r\n        _bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,\r\n         text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)        \r\n    else if plotFVG   \r\n        _bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgBullColor, border_color=color.new(fvgBullColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,\r\n         text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    \r\n    if array.size(_bullBoxesFVG) > fvgMaxBoxSet\r\n        box.delete(array.shift(_bullBoxesFVG))\r\n    array.push(_bullBoxesFVG, _bullboxFVG)\r\n\r\n//Bearish FVG Box Plotting    \r\nif isFvgDown(0)\r\n    box _bearboxFVG = na\r\n    if plotStructureBreakingFVG and (close[1] < bottom) and (high[1] > bottom) and (low[2] > bottom) and (high < bottom)\r\n        _bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,\r\n         text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    \r\n    else if plotFVG\r\n        _bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgBearColor, border_color=color.new(fvgBearColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,\r\n         text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    \r\n    if array.size(_bearBoxesFVG) > fvgMaxBoxSet\r\n        box.delete(array.shift(_bearBoxesFVG))\r\n    array.push(_bearBoxesFVG, _bearboxFVG)\r\n    \r\nif plotFVG or plotStructureBreakingFVG\r\n    _controlBox(_bearBoxesFVG, high, low, _fvg)\r\n    _controlBox(_bullBoxesFVG, high, low, _fvg)\r\n\r\n//////////////////// Rejection Block //////////////////\r\nif plotRJB\r\n    isDownRjbObCondition = isObDown(1)\r\n    isDownRjb1 = isDownRjbObCondition and  (high[1] < (close[2] + 0.2*(high[2]-close[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal\r\n    isDownRjb2 = isDownRjbObCondition and (high[1] > high[2]) // RJB is on signal's wick\r\n    if isDownRjb1 and plotRJB\r\n        _bearboxRJB = box.new(left=bar_index-2, top=high[2], right=bar_index, bottom=close[2], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,\r\n         text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)\r\n        if array.size(_bearBoxesRJB) > rjbMaxBoxSet\r\n            box.delete(array.shift(_bearBoxesRJB))\r\n        array.push(_bearBoxesRJB, _bearboxRJB)\r\n        \r\n    if isDownRjb2 and plotRJB\r\n        _bearboxRJB = box.new(left=bar_index-1, top=high[1], right=bar_index, bottom=open[1], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,\r\n         text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)\r\n        if array.size(_bearBoxesRJB) > rjbMaxBoxSet\r\n            box.delete(array.shift(_bearBoxesRJB))\r\n        array.push(_bearBoxesRJB, _bearboxRJB)\r\n\r\n//Bullish RJB Box Plotting\r\nif plotRJB\r\n    isUpRjbObCondition = isObUp(1)\r\n    isUpRjb1 = isUpRjbObCondition and (low[1] > (close[2] - 0.2*(close[2]-low[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal\r\n    isUpRjb2 = isUpRjbObCondition and (low[1] < low[2]) // RJB is on signal's wick\r\n    if isUpRjb1 and plotRJB\r\n        _bullboxRJB = box.new(left=bar_index-2, top=close[2], right=bar_index, bottom=low[2], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,\r\n         text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)\r\n        if array.size(_bullBoxesRJB) > rjbMaxBoxSet\r\n            box.delete(array.shift(_bullBoxesRJB))\r\n        array.push(_bullBoxesRJB, _bullboxRJB)\r\n    \r\n    if isUpRjb2 and plotRJB\r\n        _bullboxRJB = box.new(left=bar_index-1, top=open[1], right=bar_index, bottom=low[1], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1, \r\n         text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)\r\n        if array.size(_bullBoxesRJB) > rjbMaxBoxSet\r\n            box.delete(array.shift(_bullBoxesRJB))\r\n        array.push(_bullBoxesRJB, _bullboxRJB)\r\n\r\nif plotRJB\r\n    _controlBox(_bearBoxesRJB, high, low, _rjb)\r\n    _controlBox(_bullBoxesRJB, high, low, _rjb)\r\n\r\n//////////////////// Crossovers a.k.a. Break of Structure ////////////////////\r\n//Bullish BOS Box Plotting\r\nif plotBOS\r\n    if ta.crossover(useHighLowForBullishBoS ? high : close, top)\r\n        _bullboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBullColor, border_color=color.new(bosBullColor, bosBorderTransparency), border_style=bosBoxBorder, border_width=1, \r\n         text=plotLabelBOS ? _bosLabel + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=bosLabelSize, text_color=bosLabelColor)\r\n        if array.size(_bullBoxesBOS) > bosMaxBoxSet\r\n            box.delete(array.shift(_bullBoxesBOS))\r\n        array.push(_bullBoxesBOS, _bullboxBOS)\r\n\r\n//Bearish BOS Box Plotting        \r\nif plotBOS \r\n    if ta.crossunder(useHighLowForBearishBoS ? low : close, bottom)\r\n        _bearboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBearColor, border_color=color.new(bosBearColor, bosBorderTransparency), border_style=bosBoxBorder, border_width=1, \r\n         text=plotLabelBOS ? _bosLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=bosLabelSize, text_color=bosLabelColor)\r\n        if array.size(_bearBoxesBOS) > bosMaxBoxSet\r\n            box.delete(array.shift(_bearBoxesBOS))\r\n        array.push(_bearBoxesBOS, _bearboxBOS)\r\n\r\nif plotBOS\r\n    _controlBox(_bearBoxesBOS, high, low, _bos)\r\n    _controlBox(_bullBoxesBOS, high, low, _bos)\r\n\r\n//////////////////// Premium Premium & Discount Discount //////////////////\r\npremiumPremium = plotPPDD and isObDown(0) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1]))\r\ndiscountDiscount = plotPPDD and isObUp(0) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1]))\r\nplotshape(premiumPremium, \"Bearish PPDD OB\", style=shape.triangledown , location=location.abovebar, color=ppddBearColor, size=size.tiny)\r\nplotshape(discountDiscount, \"Bullish PPDD OB\", style=shape.triangleup , location=location.belowbar, color=ppddBullColor, size=size.tiny)\r\n\r\npremiumPremium1 = plotPPDD and (isUp(1) and isDown(0) and close[0] < open[1]) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1])) and not premiumPremium\r\ndiscountDiscount1 = plotPPDD and (isDown(1) and isUp(0) and close[0] > open[1]) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1])) and not discountDiscount\r\nplotshape(premiumPremium1, \"Bearish PPDD Weak OB\", style=shape.xcross, location=location.abovebar, color=ppddBearColor, size=size.tiny)\r\nplotshape(discountDiscount1, \"Bullish PPDD Weak OB\", style=shape.xcross, location=location.belowbar, color=ppddBullColor, size=size.tiny)\r\n\r\n////////////////// High Volume Bars //////////////////\r\nvolEma = ta.ema(volume, hvbEMAPeriod)\r\nisHighVolume = volume > (hvbMultiplier * volEma)\r\nbarcolor(plotHVB and isUp(0) and isHighVolume ? hvbBullColor : na, title=\"Bullish HVB\")\r\nbarcolor(plotHVB and isDown(0) and isHighVolume ? hvbBearColor : na, title=\"Bearish HVB\")\r\n\r\n///////////////// Stacked OB + FVG //////////////////\r\nplotshape(plotOBFVG and isFvgDown(0) and isObDown(1), \"Bearish OB+FVG Stack\", style=shape.diamond, location=location.abovebar, color=obfvgBearColor, size=size.tiny)\r\nplotshape(plotOBFVG and isFvgUp(0) and isObUp(1), \"Bullish OB+FVG Stack\", style=shape.diamond, location=location.belowbar, color=obfvgBullColor, size=size.tiny)","updated":"2022-05-10T17:01:46.408489Z","version":"6.0"}