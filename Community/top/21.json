{"created":"2021-10-05T13:32:55.124839Z","extra":{"kind":"study","sourceInputsCount":1},"lastVersionMaj":"10.0","scriptAccess":"open_no_auth","scriptName":"Divergence for Many Indicators v4","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// Â© LonesomeTheBlue\r\n\r\n//@version=4\r\nstudy(\"Divergence for Many Indicators v4\", overlay = true, max_bars_back = 1000, max_lines_count = 400, max_labels_count = 400)\r\nprd = input(defval = 5, title = \"Pivot Period\", minval = 1, maxval = 50)\r\nsource = input(defval = \"Close\", title = \"Source for Pivot Points\", options = [\"Close\", \"High/Low\"])\r\nsearchdiv = input(defval = \"Regular\", title = \"Divergence Type\", options = [\"Regular\", \"Hidden\", \"Regular/Hidden\"])\r\nshowindis = input(defval = \"Full\", title = \"Show Indicator Names\", options = [\"Full\", \"First Letter\", \"Don't Show\"])\r\nshowlimit = input(1, title=\"Minimum Number of Divergence\", minval = 1, maxval = 11)\r\nmaxpp = input(defval = 10, title = \"Maximum Pivot Points to Check\", minval = 1, maxval = 20)\r\nmaxbars = input(defval = 100, title = \"Maximum Bars to Check\", minval = 30, maxval = 200)\r\nshownum = input(defval = true, title = \"Show Divergence Number\")\r\nshowlast = input(defval = false, title = \"Show Only Last Divergence\")\r\ndontconfirm = input(defval = false, title = \"Don't Wait for Confirmation\")\r\nshowlines = input(defval = true, title = \"Show Divergence Lines\")\r\nshowpivot = input(defval = false, title = \"Show Pivot Points\")\r\ncalcmacd = input(defval = true, title = \"MACD\")\r\ncalcmacda = input(defval = true, title = \"MACD Histogram\")\r\ncalcrsi = input(defval = true, title = \"RSI\")\r\ncalcstoc = input(defval = true, title = \"Stochastic\")\r\ncalccci = input(defval = true, title = \"CCI\")\r\ncalcmom = input(defval = true, title = \"Momentum\")\r\ncalcobv = input(defval = true, title = \"OBV\")\r\ncalcvwmacd = input(true, title = \"VWmacd\")\r\ncalccmf = input(true, title = \"Chaikin Money Flow\")\r\ncalcmfi = input(true, title = \"Money Flow Index\")\r\ncalcext = input(false, title = \"Check External Indicator\")\r\nexternalindi = input(defval = close, title = \"External Indicator\")\r\npos_reg_div_col = input(defval = color.yellow, title = \"Positive Regular Divergence\")\r\nneg_reg_div_col = input(defval = color.navy, title = \"Negative Regular Divergence\")\r\npos_hid_div_col = input(defval = color.lime, title = \"Positive Hidden Divergence\")\r\nneg_hid_div_col = input(defval = color.red, title = \"Negative Hidden Divergence\")\r\npos_div_text_col = input(defval = color.black, title = \"Positive Divergence Text Color\")\r\nneg_div_text_col = input(defval = color.white, title = \"Negative Divergence Text Color\")\r\nreg_div_l_style_ = input(defval = \"Solid\", title = \"Regular Divergence Line Style\", options = [\"Solid\", \"Dashed\", \"Dotted\"])\r\nhid_div_l_style_ = input(defval = \"Dashed\", title = \"Hdden Divergence Line Style\", options = [\"Solid\", \"Dashed\", \"Dotted\"])\r\nreg_div_l_width = input(defval = 2, title = \"Regular Divergence Line Width\", minval = 1, maxval = 5)\r\nhid_div_l_width = input(defval = 1, title = \"Hidden Divergence Line Width\", minval = 1, maxval = 5)\r\nshowmas = input(defval = false, title = \"Show MAs 50 & 200\", inline = \"ma12\")\r\ncma1col = input(defval = color.lime, title = \"\", inline = \"ma12\")\r\ncma2col = input(defval = color.red, title = \"\", inline = \"ma12\")\r\n\r\nplot(showmas ? sma(close, 50) : na, color = showmas ? cma1col : na)\r\nplot(showmas ? sma(close, 200) : na, color = showmas ? cma2col: na)\r\n\r\n// set line styles\r\nvar reg_div_l_style = reg_div_l_style_ == \"Solid\" ? line.style_solid : \r\n                       reg_div_l_style_ == \"Dashed\" ? line.style_dashed :\r\n                       line.style_dotted\r\nvar hid_div_l_style = hid_div_l_style_ == \"Solid\" ? line.style_solid : \r\n                       hid_div_l_style_ == \"Dashed\" ? line.style_dashed :\r\n                       line.style_dotted\r\n\r\n\r\n// get indicators\r\nrsi = rsi(close, 14) // RSI\r\n[macd, signal, deltamacd] = macd(close, 12, 26, 9) // MACD\r\nmoment = mom(close, 10) // Momentum\r\ncci = cci(close, 10) // CCI\r\nObv = obv // OBV\r\nstk = sma(stoch(close, high, low, 14), 3) // Stoch\r\nmaFast = vwma(close, 12), maSlow = vwma(close, 26), vwmacd = maFast - maSlow // volume weighted macd\r\nCmfm = ((close-low) - (high-close)) / (high - low), Cmfv = Cmfm * volume, cmf = sma(Cmfv, 21) / sma(volume,21) // Chaikin money flow\r\nMfi = mfi(close, 14) // Moneyt Flow Index\r\n\r\n// keep indicators names and colors in arrays\r\nvar indicators_name = array.new_string(11)\r\nvar div_colors = array.new_color(4)\r\nif barstate.isfirst\r\n    // names\r\n    array.set(indicators_name, 0, showindis == \"Full\" ? \"MACD\" : \"M\")\r\n    array.set(indicators_name, 1, showindis == \"Full\" ? \"Hist\" : \"H\")\r\n    array.set(indicators_name, 2, showindis == \"Full\" ? \"RSI\" : \"E\")\r\n    array.set(indicators_name, 3, showindis == \"Full\" ? \"Stoch\" : \"S\")\r\n    array.set(indicators_name, 4, showindis == \"Full\" ? \"CCI\" : \"C\")\r\n    array.set(indicators_name, 5, showindis == \"Full\" ? \"MOM\" : \"M\")\r\n    array.set(indicators_name, 6, showindis == \"Full\" ? \"OBV\" : \"O\")\r\n    array.set(indicators_name, 7, showindis == \"Full\" ? \"VWMACD\" : \"V\")\r\n    array.set(indicators_name, 8, showindis == \"Full\" ? \"CMF\" : \"C\")\r\n    array.set(indicators_name, 9, showindis == \"Full\" ? \"MFI\" : \"M\")\r\n    array.set(indicators_name,10, showindis == \"Full\" ? \"Extrn\" : \"X\")\r\n    //colors\r\n    array.set(div_colors, 0, pos_reg_div_col)\r\n    array.set(div_colors, 1, neg_reg_div_col)\r\n    array.set(div_colors, 2, pos_hid_div_col)\r\n    array.set(div_colors, 3, neg_hid_div_col)\r\n\r\n// Check if we get new Pivot High Or Pivot Low\r\nfloat ph = pivothigh((source == \"Close\" ? close : high), prd, prd)\r\nfloat pl = pivotlow((source == \"Close\" ? close : low), prd, prd)\r\nplotshape(ph and showpivot, text = \"H\",  style = shape.labeldown, color = color.new(color.white, 100), textcolor = color.red, location = location.abovebar, offset = -prd)\r\nplotshape(pl and showpivot, text = \"L\",  style = shape.labelup, color = color.new(color.white, 100), textcolor = color.lime, location = location.belowbar, offset = -prd)\r\n\r\n// keep values and positions of Pivot Highs/Lows in the arrays\r\nvar int maxarraysize = 20\r\nvar ph_positions = array.new_int(maxarraysize, 0)\r\nvar pl_positions = array.new_int(maxarraysize, 0)\r\nvar ph_vals = array.new_float(maxarraysize, 0.)\r\nvar pl_vals = array.new_float(maxarraysize, 0.)\r\n\r\n// add PHs to the array\r\nif ph\r\n    array.unshift(ph_positions, bar_index)\r\n    array.unshift(ph_vals, ph)\r\n    if array.size(ph_positions) > maxarraysize\r\n        array.pop(ph_positions)\r\n        array.pop(ph_vals)\r\n\r\n// add PLs to the array\r\nif pl\r\n    array.unshift(pl_positions, bar_index)\r\n    array.unshift(pl_vals, pl)\r\n    if array.size(pl_positions) > maxarraysize\r\n        array.pop(pl_positions)\r\n        array.pop(pl_vals)\r\n\r\n// functions to check Regular Divergences and Hidden Divergences\r\n\r\n// function to check positive regular or negative hidden divergence\r\n// cond == 1 => positive_regular, cond == 2=> negative_hidden\r\npositive_regular_positive_hidden_divergence(src, cond)=>\r\n    divlen = 0\r\n    prsc = source == \"Close\" ? close : low\r\n    // if indicators higher than last value and close price is higher than las close \r\n    if dontconfirm or src > src[1] or close > close[1]\r\n        startpoint = dontconfirm ? 0 : 1 // don't check last candle\r\n        // we search last 15 PPs\r\n        for x = 0 to maxpp - 1\r\n            len = bar_index - array.get(pl_positions, x) + prd\r\n            // if we reach non valued array element or arrived 101. or previous bars then we don't search more\r\n            if array.get(pl_positions, x) == 0 or len > maxbars\r\n                break\r\n            if len > 5 and \r\n               ((cond == 1 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(pl_vals, x))) or\r\n               (cond == 2 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(pl_vals, x))))\r\n                slope1 = (src[startpoint] - src[len]) / (len - startpoint)\r\n                virtual_line1 = src[startpoint] - slope1\r\n                slope2 = (close[startpoint] - close[len]) / (len - startpoint)\r\n                virtual_line2 = close[startpoint] - slope2\r\n                arrived = true\r\n                for y = 1 + startpoint to len - 1\r\n                    if src[y] < virtual_line1 or nz(close[y]) < virtual_line2\r\n                        arrived := false\r\n                        break\r\n                    virtual_line1 := virtual_line1 - slope1\r\n                    virtual_line2 := virtual_line2 - slope2\r\n                \r\n                if arrived\r\n                    divlen := len\r\n                    break\r\n    divlen\r\n\r\n// function to check negative regular or positive hidden divergence\r\n// cond == 1 => negative_regular, cond == 2=> positive_hidden\r\nnegative_regular_negative_hidden_divergence(src, cond)=>\r\n    divlen = 0\r\n    prsc = source == \"Close\" ? close : high\r\n    // if indicators higher than last value and close price is higher than las close \r\n    if dontconfirm or src < src[1] or close < close[1]\r\n        startpoint = dontconfirm ? 0 : 1 // don't check last candle\r\n        // we search last 15 PPs\r\n        for x = 0 to maxpp - 1\r\n            len = bar_index - array.get(ph_positions, x) + prd\r\n            // if we reach non valued array element or arrived 101. or previous bars then we don't search more\r\n            if array.get(ph_positions, x) == 0 or len > maxbars\r\n                break\r\n            if len > 5 and \r\n               ((cond == 1 and src[startpoint] < src[len] and prsc[startpoint] > nz(array.get(ph_vals, x))) or \r\n               (cond == 2 and src[startpoint] > src[len] and prsc[startpoint] < nz(array.get(ph_vals, x))))\r\n                slope1 = (src[startpoint] - src[len]) / (len - startpoint)\r\n                virtual_line1 = src[startpoint] - slope1\r\n                slope2 = (close[startpoint] - nz(close[len])) / (len - startpoint)\r\n                virtual_line2 = close[startpoint] - slope2\r\n                arrived = true\r\n                for y = 1 + startpoint to len - 1\r\n                    if src[y] > virtual_line1 or nz(close[y]) > virtual_line2\r\n                        arrived := false\r\n                        break\r\n                    virtual_line1 := virtual_line1 - slope1\r\n                    virtual_line2 := virtual_line2 - slope2\r\n                \r\n                if arrived\r\n                    divlen := len\r\n                    break\r\n    divlen\r\n\r\n// calculate 4 types of divergence if enabled in the options and return divergences in an array\r\ncalculate_divs(cond, indicator)=>\r\n    divs = array.new_int(4, 0)\r\n    array.set(divs, 0, cond and (searchdiv == \"Regular\" or searchdiv == \"Regular/Hidden\") ? positive_regular_positive_hidden_divergence(indicator, 1) : 0)\r\n    array.set(divs, 1, cond and (searchdiv == \"Regular\" or searchdiv == \"Regular/Hidden\") ? negative_regular_negative_hidden_divergence(indicator, 1) : 0)\r\n    array.set(divs, 2, cond and (searchdiv == \"Hidden\" or searchdiv == \"Regular/Hidden\")  ? positive_regular_positive_hidden_divergence(indicator, 2) : 0)\r\n    array.set(divs, 3, cond and (searchdiv == \"Hidden\" or searchdiv == \"Regular/Hidden\")  ? negative_regular_negative_hidden_divergence(indicator, 2) : 0)\r\n    divs\r\n\r\n// array to keep all divergences\r\nvar all_divergences = array.new_int(44) // 11 indicators * 4 divergence = 44 elements\r\n// set related array elements\r\narray_set_divs(div_pointer, index)=>\r\n    for x = 0 to 3\r\n        array.set(all_divergences, index * 4 + x, array.get(div_pointer, x))\r\n\r\n// set divergences array \r\narray_set_divs(calculate_divs(calcmacd, macd), 0)\r\narray_set_divs(calculate_divs(calcmacda, deltamacd), 1)\r\narray_set_divs(calculate_divs(calcrsi, rsi), 2)\r\narray_set_divs(calculate_divs(calcstoc, stk), 3)\r\narray_set_divs(calculate_divs(calccci, cci), 4)\r\narray_set_divs(calculate_divs(calcmom, moment), 5)\r\narray_set_divs(calculate_divs(calcobv, Obv), 6)\r\narray_set_divs(calculate_divs(calcvwmacd, vwmacd), 7)\r\narray_set_divs(calculate_divs(calccmf, cmf), 8)\r\narray_set_divs(calculate_divs(calcmfi, Mfi), 9)\r\narray_set_divs(calculate_divs(calcext, externalindi), 10)\r\n\r\n// check minimum number of divergence, if less than showlimit then delete all divergence\r\ntotal_div = 0\r\nfor x = 0 to array.size(all_divergences) - 1\r\n    total_div := total_div + round(sign(array.get(all_divergences, x)))\r\n\r\nif total_div < showlimit\r\n    array.fill(all_divergences, 0)\r\n\r\n// keep line in an array\r\nvar pos_div_lines = array.new_line(0)\r\nvar neg_div_lines = array.new_line(0)\r\nvar pos_div_labels = array.new_label(0)\r\nvar neg_div_labels = array.new_label(0) \r\n\r\n// remove old lines and labels if showlast option is enabled\r\ndelete_old_pos_div_lines()=>\r\n    if array.size(pos_div_lines) > 0    \r\n        for j = 0 to array.size(pos_div_lines) - 1 \r\n            line.delete(array.get(pos_div_lines, j))\r\n        array.clear(pos_div_lines)\r\n\r\ndelete_old_neg_div_lines()=>\r\n    if array.size(neg_div_lines) > 0    \r\n        for j = 0 to array.size(neg_div_lines) - 1 \r\n            line.delete(array.get(neg_div_lines, j))\r\n        array.clear(neg_div_lines)\r\n\r\ndelete_old_pos_div_labels()=>\r\n    if array.size(pos_div_labels) > 0 \r\n        for j = 0 to array.size(pos_div_labels) - 1 \r\n            label.delete(array.get(pos_div_labels, j))\r\n        array.clear(pos_div_labels)\r\n\r\ndelete_old_neg_div_labels()=>\r\n    if array.size(neg_div_labels) > 0    \r\n        for j = 0 to array.size(neg_div_labels) - 1 \r\n            label.delete(array.get(neg_div_labels, j))\r\n        array.clear(neg_div_labels)\r\n\r\n// delete last creted lines and labels until we met new PH/PV \r\ndelete_last_pos_div_lines_label(n)=>\r\n    if n > 0 and array.size(pos_div_lines) >= n    \r\n        asz = array.size(pos_div_lines)\r\n        for j = 1 to n\r\n            line.delete(array.get(pos_div_lines, asz - j))\r\n            array.pop(pos_div_lines)\r\n        if array.size(pos_div_labels) > 0  \r\n            label.delete(array.get(pos_div_labels, array.size(pos_div_labels) - 1))\r\n            array.pop(pos_div_labels)\r\n\r\ndelete_last_neg_div_lines_label(n)=>\r\n    if n > 0 and array.size(neg_div_lines) >= n    \r\n        asz = array.size(neg_div_lines)\r\n        for j = 1 to n\r\n            line.delete(array.get(neg_div_lines, asz - j))\r\n            array.pop(neg_div_lines)\r\n        if array.size(neg_div_labels) > 0  \r\n            label.delete(array.get(neg_div_labels, array.size(neg_div_labels) - 1))\r\n            array.pop(neg_div_labels)\r\n            \r\n// variables for Alerts\r\npos_reg_div_detected = false\r\nneg_reg_div_detected = false\r\npos_hid_div_detected = false\r\nneg_hid_div_detected = false\r\n\r\n// to remove lines/labels until we met new // PH/PL\r\nvar last_pos_div_lines = 0\r\nvar last_neg_div_lines = 0\r\nvar remove_last_pos_divs = false \r\nvar remove_last_neg_divs = false\r\nif pl\r\n    remove_last_pos_divs := false\r\n    last_pos_div_lines := 0\r\nif ph\r\n    remove_last_neg_divs := false\r\n    last_neg_div_lines := 0\r\n\r\n// draw divergences lines and labels\r\ndivergence_text_top = \"\"\r\ndivergence_text_bottom = \"\"\r\ndistances = array.new_int(0)\r\ndnumdiv_top = 0\r\ndnumdiv_bottom = 0\r\ntop_label_col = color.white\r\nbottom_label_col = color.white\r\nold_pos_divs_can_be_removed = true\r\nold_neg_divs_can_be_removed = true\r\nstartpoint = dontconfirm ? 0 : 1 // used for don't confirm option\r\n\r\nfor x = 0 to 10\r\n    div_type = -1\r\n    for y = 0 to 3\r\n        if array.get(all_divergences, x * 4 + y) > 0 // any divergence?\r\n            div_type := y\r\n            if (y % 2) == 1 \r\n                dnumdiv_top := dnumdiv_top + 1\r\n                top_label_col := array.get(div_colors, y)\r\n            if (y % 2) == 0\r\n                dnumdiv_bottom := dnumdiv_bottom + 1\r\n                bottom_label_col := array.get(div_colors, y)\r\n            if not array.includes(distances, array.get(all_divergences, x * 4 + y))  // line not exist ?\r\n                array.push(distances, array.get(all_divergences, x * 4 + y))\r\n                new_line = showlines ? line.new(x1 = bar_index - array.get(all_divergences, x * 4 + y), \r\n                          y1 = (source == \"Close\" ? close[array.get(all_divergences, x * 4 + y)] : \r\n                                           (y % 2) == 0 ? low[array.get(all_divergences, x * 4 + y)] : \r\n                                                          high[array.get(all_divergences, x * 4 + y)]),\r\n                          x2 = bar_index - startpoint,\r\n                          y2 = (source == \"Close\" ? close[startpoint] : \r\n                                           (y % 2) == 0 ? low[startpoint] : \r\n                                                          high[startpoint]),\r\n                          color = array.get(div_colors, y),\r\n                          style = y < 2 ? reg_div_l_style : hid_div_l_style,\r\n                          width = y < 2 ? reg_div_l_width : hid_div_l_width\r\n                          )\r\n                          : na\r\n                if (y % 2) == 0\r\n                    if old_pos_divs_can_be_removed\r\n                        old_pos_divs_can_be_removed := false\r\n                        if not showlast and remove_last_pos_divs\r\n                            delete_last_pos_div_lines_label(last_pos_div_lines)\r\n                            last_pos_div_lines := 0\r\n                        if showlast\r\n                            delete_old_pos_div_lines()\r\n                    array.push(pos_div_lines, new_line)\r\n                    last_pos_div_lines := last_pos_div_lines + 1\r\n                    remove_last_pos_divs := true\r\n                    \r\n                if (y % 2) == 1\r\n                    if old_neg_divs_can_be_removed\r\n                        old_neg_divs_can_be_removed := false\r\n                        if not showlast and remove_last_neg_divs\r\n                            delete_last_neg_div_lines_label(last_neg_div_lines)\r\n                            last_neg_div_lines := 0\r\n                        if showlast\r\n                            delete_old_neg_div_lines()\r\n                    array.push(neg_div_lines, new_line)\r\n                    last_neg_div_lines := last_neg_div_lines + 1\r\n                    remove_last_neg_divs := true\r\n                    \r\n            // set variables for alerts\r\n            if y == 0\r\n                pos_reg_div_detected := true\r\n            if y == 1\r\n                neg_reg_div_detected := true\r\n            if y == 2\r\n                pos_hid_div_detected := true\r\n            if y == 3\r\n                neg_hid_div_detected := true\r\n    // get text for labels\r\n    if div_type >= 0\r\n        divergence_text_top    := divergence_text_top    + ((div_type % 2) == 1 ? (showindis != \"Don't Show\" ? array.get(indicators_name, x) + \"\\n\" : \"\") : \"\")\r\n        divergence_text_bottom := divergence_text_bottom + ((div_type % 2) == 0 ? (showindis != \"Don't Show\" ? array.get(indicators_name, x) + \"\\n\" : \"\") : \"\")\r\n\r\n\r\n// draw labels\r\nif showindis != \"Don't Show\" or shownum\r\n    if shownum and dnumdiv_top > 0\r\n        divergence_text_top := divergence_text_top + tostring(dnumdiv_top)\r\n    if shownum and dnumdiv_bottom > 0\r\n        divergence_text_bottom := divergence_text_bottom + tostring(dnumdiv_bottom)\r\n    if divergence_text_top != \"\"\r\n        if showlast\r\n            delete_old_neg_div_labels()\r\n        array.push(neg_div_labels, \r\n                      label.new( x = bar_index, \r\n                                 y = max(high, high[1]), \r\n                                 text = divergence_text_top,\r\n                                 color = top_label_col,\r\n                                 textcolor = neg_div_text_col,\r\n                                 style = label.style_label_down\r\n                                 ))\r\n                                 \r\n    if divergence_text_bottom != \"\"\r\n        if showlast\r\n            delete_old_pos_div_labels()\r\n        array.push(pos_div_labels, \r\n                      label.new( x = bar_index, \r\n                                 y = min(low, low[1]), \r\n                                 text = divergence_text_bottom,\r\n                                 color = bottom_label_col, \r\n                                 textcolor = pos_div_text_col,\r\n                                 style = label.style_label_up\r\n                                 ))\r\n                                 \r\n    \r\nalertcondition(pos_reg_div_detected, title='Positive Regular Divergence Detected', message='Positive Regular Divergence Detected')\r\nalertcondition(neg_reg_div_detected, title='Negative Regular Divergence Detected', message='Negative Regular Divergence Detected')\r\nalertcondition(pos_hid_div_detected, title='Positive Hidden Divergence Detected', message='Positive Hidden Divergence Detected')\r\nalertcondition(neg_hid_div_detected, title='Negative Hidden Divergence Detected', message='Negative Hidden Divergence Detected')\r\n\r\nalertcondition(pos_reg_div_detected or pos_hid_div_detected, title='Positive Divergence Detected', message='Positive Divergence Detected')\r\nalertcondition(neg_reg_div_detected or neg_hid_div_detected, title='Negative Divergence Detected', message='Negative Divergence Detected')\r\n","updated":"2021-10-05T13:32:55.124839Z","version":"10.0"}