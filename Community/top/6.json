{"created":"2023-02-09T22:12:13.364896Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"4.0","scriptAccess":"open_no_auth","scriptName":"Smart Money Concepts [LuxAlgo]","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\n// © LuxAlgo\n\n//@version=5\nindicator(\"Smart Money Concepts [LuxAlgo]\", \"Smart Money Concepts [LuxAlgo]\"\n  , overlay = true\n  , max_labels_count = 500\n  , max_lines_count = 500\n  , max_boxes_count = 500\n  , max_bars_back = 500)\n//-----------------------------------------------------------------------------{\n//Constants\n//-----------------------------------------------------------------------------{\ncolor TRANSP_CSS = #ffffff00\n\n//Tooltips\nstring MODE_TOOLTIP          = 'Allows to display historical Structure or only the recent ones'\nstring STYLE_TOOLTIP         = 'Indicator color theme'\nstring COLOR_CANDLES_TOOLTIP = 'Display additional candles with a color reflecting the current trend detected by structure'\nstring SHOW_INTERNAL         = 'Display internal market structure'\nstring CONFLUENCE_FILTER     = 'Filter non significant internal structure breakouts'\nstring SHOW_SWING            = 'Display swing market Structure'\nstring SHOW_SWING_POINTS     = 'Display swing point as labels on the chart'\nstring SHOW_SWHL_POINTS      = 'Highlight most recent strong and weak high/low points on the chart'\nstring INTERNAL_OB           = 'Display internal order blocks on the chart\\n\\nNumber of internal order blocks to display on the chart'\nstring SWING_OB              = 'Display swing order blocks on the chart\\n\\nNumber of internal swing blocks to display on the chart'\nstring FILTER_OB             = 'Method used to filter out volatile order blocks \\n\\nIt is recommended to use the cumulative mean range method when a low amount of data is available'\nstring SHOW_EQHL             = 'Display equal highs and equal lows on the chart'\nstring EQHL_BARS             = 'Number of bars used to confirm equal highs and equal lows'\nstring EQHL_THRESHOLD        = 'Sensitivity threshold in a range (0, 1) used for the detection of equal highs & lows\\n\\nLower values will return fewer but more pertinent results'\nstring SHOW_FVG              = 'Display fair values gaps on the chart'\nstring AUTO_FVG              = 'Filter out non significant fair value gaps'\nstring FVG_TF                = 'Fair value gaps timeframe'\nstring EXTEND_FVG            = 'Determine how many bars to extend the Fair Value Gap boxes on chart'\nstring PED_ZONES             = 'Display premium, discount, and equilibrium zones on chart'\n\n//-----------------------------------------------------------------------------{\n//Settings\n//-----------------------------------------------------------------------------{\n//General\n//----------------------------------------{\nmode = input.string('Historical'\n  , options = ['Historical', 'Present']\n  , group = 'Smart Money Concepts'\n  , tooltip = MODE_TOOLTIP)\n\nstyle = input.string('Colored'\n  , options = ['Colored', 'Monochrome']\n  , group = 'Smart Money Concepts'\n  , tooltip = STYLE_TOOLTIP)\n\nshow_trend = input(false, 'Color Candles'\n  , group = 'Smart Money Concepts'\n  , tooltip = COLOR_CANDLES_TOOLTIP)\n\n//----------------------------------------}\n//Internal Structure\n//----------------------------------------{\nshow_internals = input(true, 'Show Internal Structure'\n  , group = 'Real Time Internal Structure'\n  , tooltip = SHOW_INTERNAL)\n\nshow_ibull = input.string('All', 'Bullish Structure'\n  , options = ['All', 'BOS', 'CHoCH']\n  , inline = 'ibull'\n  , group = 'Real Time Internal Structure')\n\nswing_ibull_css = input(#089981, ''\n  , inline = 'ibull'\n  , group = 'Real Time Internal Structure')\n\n//Bear Structure\nshow_ibear = input.string('All', 'Bearish Structure'\n  , options = ['All', 'BOS', 'CHoCH']\n  , inline = 'ibear'\n  , group = 'Real Time Internal Structure')\n\nswing_ibear_css = input(#f23645, ''\n  , inline = 'ibear'\n  , group = 'Real Time Internal Structure')\n\nifilter_confluence = input(false, 'Confluence Filter'\n  , group = 'Real Time Internal Structure'\n  , tooltip = CONFLUENCE_FILTER)\n\ninternal_structure_size = input.string('Tiny', 'Internal Label Size'\n  , options = ['Tiny', 'Small', 'Normal']\n  , group = 'Real Time Internal Structure')\n\n//----------------------------------------}\n//Swing Structure\n//----------------------------------------{\nshow_Structure = input(true, 'Show Swing Structure'\n  , group = 'Real Time Swing Structure'\n  , tooltip = SHOW_SWING)\n\n//Bull Structure\nshow_bull = input.string('All', 'Bullish Structure'\n  , options = ['All', 'BOS', 'CHoCH']\n  , inline = 'bull'\n  , group = 'Real Time Swing Structure')\n\nswing_bull_css = input(#089981, ''\n  , inline = 'bull'\n  , group = 'Real Time Swing Structure')\n\n//Bear Structure\nshow_bear = input.string('All', 'Bearish Structure'\n  , options = ['All', 'BOS', 'CHoCH']\n  , inline = 'bear'\n  , group = 'Real Time Swing Structure')\n\nswing_bear_css = input(#f23645, ''\n  , inline = 'bear'\n  , group = 'Real Time Swing Structure')\n\nswing_structure_size = input.string('Small', 'Swing Label Size'\n  , options = ['Tiny', 'Small', 'Normal']\n  , group = 'Real Time Swing Structure')\n\n//Swings\nshow_swings = input(false, 'Show Swings Points'\n  , inline = 'swings'\n  , group = 'Real Time Swing Structure'\n  , tooltip = SHOW_SWING_POINTS)\n\nlength = input.int(50, ''\n  , minval = 10\n  , inline = 'swings'\n  , group = 'Real Time Swing Structure')\n\nshow_hl_swings = input(true, 'Show Strong/Weak High/Low'\n  , group = 'Real Time Swing Structure'\n  , tooltip = SHOW_SWHL_POINTS)\n\n//----------------------------------------}\n//Order Blocks\n//----------------------------------------{\nshow_iob = input(true, 'Internal Order Blocks'\n  , inline = 'iob'\n  , group = 'Order Blocks'\n  , tooltip = INTERNAL_OB)\n\niob_showlast = input.int(5, ''\n  , minval = 1\n  , inline = 'iob'\n  , group = 'Order Blocks')\n\nshow_ob = input(false, 'Swing Order Blocks'\n  , inline = 'ob'\n  , group = 'Order Blocks'\n  , tooltip = SWING_OB)\n\nob_showlast = input.int(5, ''\n  , minval = 1\n  , inline = 'ob'\n  , group = 'Order Blocks')\n\nob_filter = input.string('Atr', 'Order Block Filter'\n  , options = ['Atr', 'Cumulative Mean Range']\n  , group = 'Order Blocks'\n  , tooltip = FILTER_OB)\n\nibull_ob_css = input.color(color.new(#3179f5, 80), 'Internal Bullish OB'\n  , group = 'Order Blocks')\n\nibear_ob_css = input.color(color.new(#f77c80, 80), 'Internal Bearish OB'\n  , group = 'Order Blocks')\n\nbull_ob_css = input.color(color.new(#1848cc, 80), 'Bullish OB'\n  , group = 'Order Blocks')\n\nbear_ob_css = input.color(color.new(#b22833, 80), 'Bearish OB'\n  , group = 'Order Blocks')\n\n//----------------------------------------}\n//EQH/EQL\n//----------------------------------------{\nshow_eq = input(true, 'Equal High/Low'\n  , group = 'EQH/EQL'\n  , tooltip = SHOW_EQHL)\n\neq_len = input.int(3, 'Bars Confirmation'\n  , minval = 1\n  , group = 'EQH/EQL'\n  , tooltip = EQHL_BARS)\n\neq_threshold = input.float(0.1, 'Threshold'\n  , minval = 0\n  , maxval = 0.5\n  , step = 0.1\n  , group = 'EQH/EQL'\n  , tooltip = EQHL_THRESHOLD)\n\neq_size = input.string('Tiny', 'Label Size'\n  , options = ['Tiny', 'Small', 'Normal']\n  , group = 'EQH/EQL')\n\n//----------------------------------------}\n//Fair Value Gaps\n//----------------------------------------{\nshow_fvg = input(false, 'Fair Value Gaps'\n  , group = 'Fair Value Gaps'\n  , tooltip = SHOW_FVG)\n  \nfvg_auto = input(true, \"Auto Threshold\"\n  , group = 'Fair Value Gaps'\n  , tooltip = AUTO_FVG)\n\nfvg_tf = input.timeframe('', \"Timeframe\"\n  , group = 'Fair Value Gaps'\n  , tooltip = FVG_TF)\n\nbull_fvg_css = input.color(color.new(#00ff68, 70), 'Bullish FVG'\n  , group = 'Fair Value Gaps')\n\nbear_fvg_css = input.color(color.new(#ff0008, 70), 'Bearish FVG'\n  , group = 'Fair Value Gaps')\n\nfvg_extend = input.int(1, \"Extend FVG\"\n  , minval = 0\n  , group = 'Fair Value Gaps'\n  , tooltip = EXTEND_FVG)\n\n//----------------------------------------}\n//Previous day/week high/low\n//----------------------------------------{\n//Daily\nshow_pdhl = input(false, 'Daily'\n  , inline = 'daily'\n  , group = 'Highs & Lows MTF')\n\npdhl_style = input.string('⎯⎯⎯', ''\n  , options = ['⎯⎯⎯', '----', '····']\n  , inline = 'daily'\n  , group = 'Highs & Lows MTF')\n\npdhl_css = input(#2157f3, ''\n  , inline = 'daily'\n  , group = 'Highs & Lows MTF')\n\n//Weekly\nshow_pwhl = input(false, 'Weekly'\n  , inline = 'weekly'\n  , group = 'Highs & Lows MTF')\n\npwhl_style = input.string('⎯⎯⎯', ''\n  , options = ['⎯⎯⎯', '----', '····']\n  , inline = 'weekly'\n  , group = 'Highs & Lows MTF')\n\npwhl_css = input(#2157f3, ''\n  , inline = 'weekly'\n  , group = 'Highs & Lows MTF')\n\n//Monthly\nshow_pmhl = input(false, 'Monthly'\n  , inline = 'monthly'\n  , group = 'Highs & Lows MTF')\n\npmhl_style = input.string('⎯⎯⎯', ''\n  , options = ['⎯⎯⎯', '----', '····']\n  , inline = 'monthly'\n  , group = 'Highs & Lows MTF')\n\npmhl_css = input(#2157f3, ''\n  , inline = 'monthly'\n  , group = 'Highs & Lows MTF')\n\n//----------------------------------------}\n//Premium/Discount zones\n//----------------------------------------{\nshow_sd = input(false, 'Premium/Discount Zones'\n  , group = 'Premium & Discount Zones'\n  , tooltip = PED_ZONES)\n\npremium_css = input.color(#f23645, 'Premium Zone'\n  , group = 'Premium & Discount Zones')\n\neq_css = input.color(#b2b5be, 'Equilibrium Zone'\n  , group = 'Premium & Discount Zones')\n\ndiscount_css = input.color(#089981, 'Discount Zone'\n  , group = 'Premium & Discount Zones')\n\n//-----------------------------------------------------------------------------}\n//Functions\n//-----------------------------------------------------------------------------{\nn = bar_index\n\natr = ta.atr(200)\ncmean_range = ta.cum(high - low) / n\n\n//HL Output function\nhl() => [high, low]\n\n//Get ohlc values function\nget_ohlc()=> [close[1], open[1], high, low, high[2], low[2]]\n\n//Display Structure function\ndisplay_Structure(x, y, txt, css, dashed, down, lbl_size)=>\n    structure_line = line.new(x, y, n, y\n      , color = css\n      , style = dashed ? line.style_dashed : line.style_solid)\n\n    structure_lbl = label.new(int(math.avg(x, n)), y, txt\n      , color = TRANSP_CSS\n      , textcolor = css\n      , style = down ? label.style_label_down : label.style_label_up\n      , size = lbl_size)\n\n    if mode == 'Present'\n        line.delete(structure_line[1])\n        label.delete(structure_lbl[1])\n\n//Swings detection/measurements\nswings(len)=>\n    var os = 0\n    \n    upper = ta.highest(len)\n    lower = ta.lowest(len)\n\n    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]\n\n    top = os == 0 and os[1] != 0 ? high[len] : 0\n    btm = os == 1 and os[1] != 1 ? low[len] : 0\n\n    [top, btm]\n\n//Order block coordinates function\nob_coord(use_max, loc, target_top, target_btm, target_left, target_type)=>\n    min = 99999999.\n    max = 0.\n    idx = 1\n\n    ob_threshold = ob_filter == 'Atr' ? atr : cmean_range \n\n    //Search for highest/lowest high within the structure interval and get range\n    if use_max\n        for i = 1 to (n - loc)-1\n            if (high[i] - low[i]) < ob_threshold[i] * 2\n                max := math.max(high[i], max)\n                min := max == high[i] ? low[i] : min\n                idx := max == high[i] ? i : idx\n    else\n        for i = 1 to (n - loc)-1\n            if (high[i] - low[i]) < ob_threshold[i] * 2\n                min := math.min(low[i], min)\n                max := min == low[i] ? high[i] : max\n                idx := min == low[i] ? i : idx\n\n    array.unshift(target_top, max)\n    array.unshift(target_btm, min)\n    array.unshift(target_left, time[idx])\n    array.unshift(target_type, use_max ? -1 : 1)\n\n//Set order blocks\ndisplay_ob(boxes, target_top, target_btm, target_left, target_type, show_last, swing, size)=>\n    for i = 0 to math.min(show_last-1, size-1)\n        get_box = array.get(boxes, i)\n\n        box.set_lefttop(get_box, array.get(target_left, i), array.get(target_top, i))\n        box.set_rightbottom(get_box, array.get(target_left, i), array.get(target_btm, i))\n        box.set_extend(get_box, extend.right)\n\n        color css = na\n        \n        if swing \n            if style == 'Monochrome'\n                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)\n                border_css = array.get(target_type, i) == 1 ? #b2b5be : #5d606b\n                box.set_border_color(get_box, border_css)\n            else\n                css := array.get(target_type, i) == 1 ? bull_ob_css : bear_ob_css\n                box.set_border_color(get_box, css)\n\n            box.set_bgcolor(get_box, css)\n        else\n            if style == 'Monochrome'\n                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)\n            else\n                css := array.get(target_type, i) == 1 ? ibull_ob_css : ibear_ob_css\n            \n            box.set_border_color(get_box, css)\n            box.set_bgcolor(get_box, css)\n        \n//Line Style function\nget_line_style(style) =>\n    out = switch style\n        '⎯⎯⎯'  => line.style_solid\n        '----' => line.style_dashed\n        '····' => line.style_dotted\n\n//Set line/labels function for previous high/lows\nphl(h, l, tf, css)=>\n    var line high_line = line.new(na,na,na,na\n      , xloc = xloc.bar_time\n      , color = css\n      , style = get_line_style(pdhl_style))\n\n    var label high_lbl = label.new(na,na\n      , xloc = xloc.bar_time\n      , text = str.format('P{0}H', tf)\n      , color = TRANSP_CSS\n      , textcolor = css\n      , size = size.small\n      , style = label.style_label_left)\n\n    var line low_line = line.new(na,na,na,na\n      , xloc = xloc.bar_time\n      , color = css\n      , style = get_line_style(pdhl_style))\n\n    var label low_lbl = label.new(na,na\n      , xloc = xloc.bar_time\n      , text = str.format('P{0}L', tf)\n      , color = TRANSP_CSS\n      , textcolor = css\n      , size = size.small\n      , style = label.style_label_left)\n\n    hy = ta.valuewhen(h != h[1], h, 1)\n    hx = ta.valuewhen(h == high, time, 1)\n\n    ly = ta.valuewhen(l != l[1], l, 1)\n    lx = ta.valuewhen(l == low, time, 1)\n\n    if barstate.islast\n        ext = time + (time - time[1])*20\n\n        //High\n        line.set_xy1(high_line, hx, hy)\n        line.set_xy2(high_line, ext, hy)\n\n        label.set_xy(high_lbl, ext, hy)\n\n        //Low\n        line.set_xy1(low_line, lx, ly)\n        line.set_xy2(low_line, ext, ly)\n\n        label.set_xy(low_lbl, ext, ly)\n\n//-----------------------------------------------------------------------------}\n//Global variables\n//-----------------------------------------------------------------------------{\nvar trend = 0, var itrend = 0\n\nvar top_y = 0., var top_x = 0\nvar btm_y = 0., var btm_x = 0\n\nvar itop_y = 0., var itop_x = 0\nvar ibtm_y = 0., var ibtm_x = 0\n\nvar trail_up = high, var trail_dn = low\nvar trail_up_x = 0,  var trail_dn_x = 0\n\nvar top_cross = true,  var btm_cross = true\nvar itop_cross = true, var ibtm_cross = true\n\nvar txt_top = '',  var txt_btm = ''\n\n//Alerts\nbull_choch_alert = false \nbull_bos_alert   = false \n\nbear_choch_alert = false \nbear_bos_alert   = false \n\nbull_ichoch_alert = false \nbull_ibos_alert   = false \n\nbear_ichoch_alert = false \nbear_ibos_alert   = false \n\nbull_iob_break = false \nbear_iob_break = false\n\nbull_ob_break = false \nbear_ob_break = false\n\neqh_alert = false \neql_alert = false \n\n//Structure colors\nvar bull_css = style == 'Monochrome' ? #b2b5be \n  : swing_bull_css\n\nvar bear_css = style == 'Monochrome' ? #b2b5be \n  : swing_bear_css\n\nvar ibull_css = style == 'Monochrome' ? #b2b5be \n  : swing_ibull_css\n\nvar ibear_css = style == 'Monochrome' ? #b2b5be \n  : swing_ibear_css\n\n//Labels size\nvar internal_structure_lbl_size = internal_structure_size == 'Tiny' \n  ? size.tiny \n  : internal_structure_size == 'Small' \n  ? size.small \n  : size.normal \n\nvar swing_structure_lbl_size = swing_structure_size == 'Tiny' \n  ? size.tiny \n  : swing_structure_size == 'Small' \n  ? size.small \n  : size.normal \n\nvar eqhl_lbl_size = eq_size == 'Tiny' \n  ? size.tiny \n  : eq_size == 'Small' \n  ? size.small\n  : size.normal \n\n//Swings\n[top, btm] = swings(length)\n\n[itop, ibtm] = swings(5)\n\n//-----------------------------------------------------------------------------}\n//Pivot High\n//-----------------------------------------------------------------------------{\nvar line extend_top = na\n\nvar label extend_top_lbl = label.new(na, na\n  , color = TRANSP_CSS\n  , textcolor = bear_css\n  , style = label.style_label_down\n  , size = size.tiny)\n\nif top\n    top_cross := true\n    txt_top := top > top_y ? 'HH' : 'LH'\n\n    if show_swings\n        top_lbl = label.new(n-length, top, txt_top\n          , color = TRANSP_CSS\n          , textcolor = bear_css\n          , style = label.style_label_down\n          , size = swing_structure_lbl_size)\n\n        if mode == 'Present'\n            label.delete(top_lbl[1])\n\n    //Extend recent top to last bar\n    line.delete(extend_top[1])\n    extend_top := line.new(n-length, top, n, top\n      , color = bear_css)\n\n    top_y := top\n    top_x := n - length\n\n    trail_up := top\n    trail_up_x := n - length\n\nif itop\n    itop_cross := true\n\n    itop_y := itop\n    itop_x := n - 5\n\n//Trailing maximum\ntrail_up := math.max(high, trail_up)\ntrail_up_x := trail_up == high ? n : trail_up_x\n\n//Set top extension label/line\nif barstate.islast and show_hl_swings\n    line.set_xy1(extend_top, trail_up_x, trail_up)\n    line.set_xy2(extend_top, n + 20, trail_up)\n\n    label.set_x(extend_top_lbl, n + 20)\n    label.set_y(extend_top_lbl, trail_up)\n    label.set_text(extend_top_lbl, trend < 0 ? 'Strong High' : 'Weak High')\n\n//-----------------------------------------------------------------------------}\n//Pivot Low\n//-----------------------------------------------------------------------------{\nvar line extend_btm = na \n\nvar label extend_btm_lbl = label.new(na, na\n  , color = TRANSP_CSS\n  , textcolor = bull_css\n  , style = label.style_label_up\n  , size = size.tiny)\n\nif btm\n    btm_cross := true\n    txt_btm := btm < btm_y ? 'LL' : 'HL'\n    \n    if show_swings\n        btm_lbl = label.new(n - length, btm, txt_btm\n          , color = TRANSP_CSS\n          , textcolor = bull_css\n          , style = label.style_label_up\n          , size = swing_structure_lbl_size)\n\n        if mode == 'Present'\n            label.delete(btm_lbl[1])\n    \n    //Extend recent btm to last bar\n    line.delete(extend_btm[1])\n    extend_btm := line.new(n - length, btm, n, btm\n      , color = bull_css)\n\n    btm_y := btm\n    btm_x := n-length\n\n    trail_dn := btm\n    trail_dn_x := n-length\n\nif ibtm\n    ibtm_cross := true\n\n    ibtm_y := ibtm\n    ibtm_x := n - 5\n\n//Trailing minimum\ntrail_dn := math.min(low, trail_dn)\ntrail_dn_x := trail_dn == low ? n : trail_dn_x\n\n//Set btm extension label/line\nif barstate.islast and show_hl_swings\n    line.set_xy1(extend_btm, trail_dn_x, trail_dn)\n    line.set_xy2(extend_btm, n + 20, trail_dn)\n\n    label.set_x(extend_btm_lbl, n + 20)\n    label.set_y(extend_btm_lbl, trail_dn)\n    label.set_text(extend_btm_lbl, trend > 0 ? 'Strong Low' : 'Weak Low')\n\n//-----------------------------------------------------------------------------}\n//Order Blocks Arrays\n//-----------------------------------------------------------------------------{\nvar iob_top = array.new_float(0)\nvar iob_btm = array.new_float(0)\nvar iob_left = array.new_int(0)\nvar iob_type = array.new_int(0)\n\nvar ob_top = array.new_float(0)\nvar ob_btm = array.new_float(0)\nvar ob_left = array.new_int(0)\nvar ob_type = array.new_int(0)\n\n//-----------------------------------------------------------------------------}\n//Pivot High BOS/CHoCH\n//-----------------------------------------------------------------------------{\n//Filtering\nvar bull_concordant = true\n\nif ifilter_confluence\n    bull_concordant := high - math.max(close, open) > math.min(close, open - low)\n\n//Detect internal bullish Structure\nif ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant\n    bool choch = na\n    \n    if itrend < 0\n        choch := true\n        bull_ichoch_alert := true\n    else \n        bull_ibos_alert := true\n    \n    txt = choch ? 'CHoCH' : 'BOS'\n\n    if show_internals\n        if show_ibull == 'All' or (show_ibull == 'BOS' and not choch) or (show_ibull == 'CHoCH' and choch)\n            display_Structure(itop_x, itop_y, txt, ibull_css, true, true, internal_structure_lbl_size)\n    \n    itop_cross := false\n    itrend := 1\n    \n    //Internal Order Block\n    if show_iob\n        ob_coord(false, itop_x, iob_top, iob_btm, iob_left, iob_type)\n\n//Detect bullish Structure\nif ta.crossover(close, top_y) and top_cross\n    bool choch = na\n    \n    if trend < 0\n        choch := true\n        bull_choch_alert := true\n    else \n        bull_bos_alert := true\n\n    txt = choch ? 'CHoCH' : 'BOS'\n    \n    if show_Structure\n        if show_bull == 'All' or (show_bull == 'BOS' and not choch) or (show_bull == 'CHoCH' and choch)\n            display_Structure(top_x, top_y, txt, bull_css, false, true, swing_structure_lbl_size)\n    \n    //Order Block\n    if show_ob\n        ob_coord(false, top_x, ob_top, ob_btm, ob_left, ob_type)\n\n    top_cross := false\n    trend := 1\n\n//-----------------------------------------------------------------------------}\n//Pivot Low BOS/CHoCH\n//-----------------------------------------------------------------------------{\nvar bear_concordant = true\n\nif ifilter_confluence\n    bear_concordant := high - math.max(close, open) < math.min(close, open - low)\n\n//Detect internal bearish Structure\nif ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant\n    bool choch = false\n    \n    if itrend > 0\n        choch := true\n        bear_ichoch_alert := true\n    else \n        bear_ibos_alert := true\n    \n    txt = choch ? 'CHoCH' : 'BOS'\n\n    if show_internals\n        if show_ibear == 'All' or (show_ibear == 'BOS' and not choch) or (show_ibear == 'CHoCH' and choch)\n            display_Structure(ibtm_x, ibtm_y, txt, ibear_css, true, false, internal_structure_lbl_size)\n    \n    ibtm_cross := false\n    itrend := -1\n    \n    //Internal Order Block\n    if show_iob\n        ob_coord(true, ibtm_x, iob_top, iob_btm, iob_left, iob_type)\n\n//Detect bearish Structure\nif ta.crossunder(close, btm_y) and btm_cross\n    bool choch = na\n    \n    if trend > 0\n        choch := true\n        bear_choch_alert := true\n    else \n        bear_bos_alert := true\n\n    txt = choch ? 'CHoCH' : 'BOS'\n    \n    if show_Structure\n        if show_bear == 'All' or (show_bear == 'BOS' and not choch) or (show_bear == 'CHoCH' and choch)\n            display_Structure(btm_x, btm_y, txt, bear_css, false, false, swing_structure_lbl_size)\n    \n    //Order Block\n    if show_ob\n        ob_coord(true, btm_x, ob_top, ob_btm, ob_left, ob_type)\n\n    btm_cross := false\n    trend := -1\n\n//-----------------------------------------------------------------------------}\n//Order Blocks\n//-----------------------------------------------------------------------------{\n//Set order blocks\nvar iob_boxes = array.new_box(0)\nvar ob_boxes = array.new_box(0)\n\n//Delete internal order blocks box coordinates if top/bottom is broken\nfor element in iob_type\n    index = array.indexof(iob_type, element)\n\n    if close < array.get(iob_btm, index) and element == 1\n        array.remove(iob_top, index) \n        array.remove(iob_btm, index) \n        array.remove(iob_left, index) \n        array.remove(iob_type, index)\n        bull_iob_break := true\n\n    else if close > array.get(iob_top, index) and element == -1\n        array.remove(iob_top, index) \n        array.remove(iob_btm, index)\n        array.remove(iob_left, index) \n        array.remove(iob_type, index)\n        bear_iob_break := true\n\n//Delete internal order blocks box coordinates if top/bottom is broken\nfor element in ob_type\n    index = array.indexof(ob_type, element)\n\n    if close < array.get(ob_btm, index) and element == 1\n        array.remove(ob_top, index) \n        array.remove(ob_btm, index) \n        array.remove(ob_left, index) \n        array.remove(ob_type, index)\n        bull_ob_break := true\n\n    else if close > array.get(ob_top, index) and element == -1\n        array.remove(ob_top, index) \n        array.remove(ob_btm, index)\n        array.remove(ob_left, index) \n        array.remove(ob_type, index)\n        bear_ob_break := true\n\niob_size = array.size(iob_type)\nob_size = array.size(ob_type)\n\nif barstate.isfirst\n    if show_iob\n        for i = 0 to iob_showlast-1\n            array.push(iob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))\n    if show_ob\n        for i = 0 to ob_showlast-1\n            array.push(ob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))\n\nif iob_size > 0\n    if barstate.islast\n        display_ob(iob_boxes, iob_top, iob_btm, iob_left, iob_type, iob_showlast, false, iob_size)\n\nif ob_size > 0\n    if barstate.islast\n        display_ob(ob_boxes, ob_top, ob_btm, ob_left, ob_type, ob_showlast, true, ob_size)\n\n//-----------------------------------------------------------------------------}\n//EQH/EQL\n//-----------------------------------------------------------------------------{\nvar eq_prev_top = 0.\nvar eq_top_x = 0\n\nvar eq_prev_btm = 0.\nvar eq_btm_x = 0\n\nif show_eq\n    eq_top = ta.pivothigh(eq_len, eq_len)\n    eq_btm = ta.pivotlow(eq_len, eq_len)\n\n    if eq_top \n        max = math.max(eq_top, eq_prev_top)\n        min = math.min(eq_top, eq_prev_top)\n        \n        if max < min + atr * eq_threshold\n            eqh_line = line.new(eq_top_x, eq_prev_top, n-eq_len, eq_top\n              , color = bear_css\n              , style = line.style_dotted)\n\n            eqh_lbl = label.new(int(math.avg(n-eq_len, eq_top_x)), eq_top, 'EQH'\n              , color = #00000000\n              , textcolor = bear_css\n              , style = label.style_label_down\n              , size = eqhl_lbl_size)\n\n            if mode == 'Present'\n                line.delete(eqh_line[1])\n                label.delete(eqh_lbl[1])\n            \n            eqh_alert := true\n\n        eq_prev_top := eq_top\n        eq_top_x := n-eq_len\n\n    if eq_btm \n        max = math.max(eq_btm, eq_prev_btm)\n        min = math.min(eq_btm, eq_prev_btm)\n        \n        if min > max - atr * eq_threshold\n            eql_line = line.new(eq_btm_x, eq_prev_btm, n-eq_len, eq_btm\n              , color = bull_css\n              , style = line.style_dotted)\n\n            eql_lbl = label.new(int(math.avg(n-eq_len, eq_btm_x)), eq_btm, 'EQL'\n              , color = #00000000\n              , textcolor = bull_css\n              , style = label.style_label_up\n              , size = eqhl_lbl_size)\n\n            eql_alert := true\n\n            if mode == 'Present'\n                line.delete(eql_line[1])\n                label.delete(eql_lbl[1])\n\n        eq_prev_btm := eq_btm\n        eq_btm_x := n-eq_len\n\n//-----------------------------------------------------------------------------}\n//Fair Value Gaps\n//-----------------------------------------------------------------------------{\nvar bullish_fvg_max = array.new_box(0)\nvar bullish_fvg_min = array.new_box(0)\n\nvar bearish_fvg_max = array.new_box(0)\nvar bearish_fvg_min = array.new_box(0)\n\nfloat bullish_fvg_avg = na\nfloat bearish_fvg_avg = na\n\nbullish_fvg_cnd = false\nbearish_fvg_cnd = false\n\n[src_c1, src_o1, src_h, src_l, src_h2, src_l2] =\n  request.security(syminfo.tickerid, fvg_tf, get_ohlc())\n\nif show_fvg\n    delta_per = (src_c1 - src_o1) / src_o1 * 100\n\n    change_tf = timeframe.change(fvg_tf)\n\n    threshold = fvg_auto ? ta.cum(math.abs(change_tf ? delta_per : 0)) / n * 2 \n      : 0\n\n    //FVG conditions\n    bullish_fvg_cnd := src_l > src_h2\n      and src_c1 > src_h2 \n      and delta_per > threshold\n      and change_tf\n\n    bearish_fvg_cnd := src_h < src_l2 \n      and src_c1 < src_l2 \n      and -delta_per > threshold\n      and change_tf\n\n    //FVG Areas\n    if bullish_fvg_cnd\n        array.unshift(bullish_fvg_max, box.new(n-1, src_l, n + fvg_extend, math.avg(src_l, src_h2)\n          , border_color = bull_fvg_css\n          , bgcolor = bull_fvg_css))\n        \n        array.unshift(bullish_fvg_min, box.new(n-1, math.avg(src_l, src_h2), n + fvg_extend, src_h2\n          , border_color = bull_fvg_css\n          , bgcolor = bull_fvg_css))\n    \n    if bearish_fvg_cnd\n        array.unshift(bearish_fvg_max, box.new(n-1, src_h, n + fvg_extend, math.avg(src_h, src_l2)\n          , border_color = bear_fvg_css\n          , bgcolor = bear_fvg_css))\n        \n        array.unshift(bearish_fvg_min, box.new(n-1, math.avg(src_h, src_l2), n + fvg_extend, src_l2\n          , border_color = bear_fvg_css\n          , bgcolor = bear_fvg_css))\n\n    for bx in bullish_fvg_min\n        if low < box.get_bottom(bx)\n            box.delete(bx)\n            box.delete(array.get(bullish_fvg_max, array.indexof(bullish_fvg_min, bx)))\n    \n    for bx in bearish_fvg_max\n        if high > box.get_top(bx)\n            box.delete(bx)\n            box.delete(array.get(bearish_fvg_min, array.indexof(bearish_fvg_max, bx)))\n\n//-----------------------------------------------------------------------------}\n//Previous day/week high/lows\n//-----------------------------------------------------------------------------{\n//Daily high/low\n[pdh, pdl] = request.security(syminfo.tickerid, 'D', hl()\n  , lookahead = barmerge.lookahead_on)\n\n//Weekly high/low\n[pwh, pwl] = request.security(syminfo.tickerid, 'W', hl()\n  , lookahead = barmerge.lookahead_on)\n\n//Monthly high/low\n[pmh, pml] = request.security(syminfo.tickerid, 'M', hl()\n  , lookahead = barmerge.lookahead_on)\n\n//Display Daily\nif show_pdhl\n    phl(pdh, pdl, 'D', pdhl_css)\n\n//Display Weekly\nif show_pwhl\n    phl(pwh, pwl, 'W', pwhl_css)\n    \n//Display Monthly\nif show_pmhl\n    phl(pmh, pml, 'M', pmhl_css)\n\n//-----------------------------------------------------------------------------}\n//Premium/Discount/Equilibrium zones\n//-----------------------------------------------------------------------------{\nvar premium = box.new(na, na, na, na\n  , bgcolor = color.new(premium_css, 80)\n  , border_color = na)\n\nvar premium_lbl = label.new(na, na\n  , text = 'Premium'\n  , color = TRANSP_CSS\n  , textcolor = premium_css\n  , style = label.style_label_down\n  , size = size.small)\n\nvar eq = box.new(na, na, na, na\n  , bgcolor = color.rgb(120, 123, 134, 80)\n  , border_color = na)\n\nvar eq_lbl = label.new(na, na\n  , text = 'Equilibrium'\n  , color = TRANSP_CSS\n  , textcolor = eq_css\n  , style = label.style_label_left\n  , size = size.small)\n\nvar discount = box.new(na, na, na, na\n  , bgcolor = color.new(discount_css, 80)\n  , border_color = na)\n\nvar discount_lbl = label.new(na, na\n  , text = 'Discount'\n  , color = TRANSP_CSS\n  , textcolor = discount_css\n  , style = label.style_label_up\n  , size = size.small)\n\n//Show Premium/Discount Areas\nif barstate.islast and show_sd\n    avg = math.avg(trail_up, trail_dn)\n\n    box.set_lefttop(premium, math.max(top_x, btm_x), trail_up)\n    box.set_rightbottom(premium, n, .95 * trail_up + .05 * trail_dn)\n\n    label.set_xy(premium_lbl, int(math.avg(math.max(top_x, btm_x), n)), trail_up)\n\n    box.set_lefttop(eq, math.max(top_x, btm_x), .525 * trail_up + .475*trail_dn)\n    box.set_rightbottom(eq, n, .525 * trail_dn + .475 * trail_up)\n\n    label.set_xy(eq_lbl, n, avg)\n    \n    box.set_lefttop(discount, math.max(top_x, btm_x), .95 * trail_dn + .05 * trail_up)\n    box.set_rightbottom(discount, n, trail_dn)\n    label.set_xy(discount_lbl, int(math.avg(math.max(top_x, btm_x), n)), trail_dn)\n\n//-----------------------------------------------------------------------------}\n//Trend\n//-----------------------------------------------------------------------------{\nvar color trend_css = na\n\nif show_trend\n    if style == 'Colored'\n        trend_css := itrend == 1 ? bull_css : bear_css\n    else if style == 'Monochrome'\n        trend_css := itrend == 1 ? #b2b5be : #5d606b\n\nplotcandle(open, high, low, close\n  , color = trend_css\n  , wickcolor = trend_css\n  , bordercolor = trend_css\n  , editable = false)\n\n//-----------------------------------------------------------------------------}\n//Alerts\n//-----------------------------------------------------------------------------{\n//Internal Structure\nalertcondition(bull_ibos_alert, 'Internal Bullish BOS', 'Internal Bullish BOS formed')\nalertcondition(bull_ichoch_alert, 'Internal Bullish CHoCH', 'Internal Bullish CHoCH formed')\n\nalertcondition(bear_ibos_alert, 'Internal Bearish BOS', 'Internal Bearish BOS formed')\nalertcondition(bear_ichoch_alert, 'Internal Bearish CHoCH', 'Internal Bearish CHoCH formed')\n\n//Swing Structure\nalertcondition(bull_bos_alert, 'Bullish BOS', 'Internal Bullish BOS formed')\nalertcondition(bull_choch_alert, 'Bullish CHoCH', 'Internal Bullish CHoCH formed')\n\nalertcondition(bear_bos_alert, 'Bearish BOS', 'Bearish BOS formed')\nalertcondition(bear_choch_alert, 'Bearish CHoCH', 'Bearish CHoCH formed')\n\n//order Blocks\nalertcondition(bull_iob_break, 'Bullish Internal OB Breakout', 'Price broke bullish internal OB')\nalertcondition(bear_iob_break, 'Bearish Internal OB Breakout', 'Price broke bearish internal OB')\n\nalertcondition(bull_ob_break, 'Bullish Swing OB Breakout', 'Price broke bullish swing OB')\nalertcondition(bear_ob_break, 'Bearish Swing OB Breakout', 'Price broke bearish swing OB')\n\n//EQH/EQL\nalertcondition(eqh_alert, 'Equal Highs', 'Equal highs detected')\nalertcondition(eql_alert, 'Equal Lows', 'Equal lows detected')\n\n//FVG\nalertcondition(bullish_fvg_cnd, 'Bullish FVG', 'Bullish FVG formed')\nalertcondition(bearish_fvg_cnd, 'Bearish FVG', 'Bearish FVG formed')\n\n//-----------------------------------------------------------------------------}","updated":"2023-02-09T22:12:13.364896Z","version":"4.0"}