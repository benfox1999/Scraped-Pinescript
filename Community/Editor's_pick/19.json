{"created":"2024-01-27T18:25:18.343402Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Volume Footprint Voids [StratifyTrade]","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\r\n// © StratifyTrade\r\n//@version=5\r\n\r\n\r\nindicator(\r\n       \"Volume Footprint Voids [StratifyTrade]\"\r\n     , \"StratifyTrade - Volume Footprint Voids [1.0]\"\r\n     , overlay = true\r\n     , max_labels_count = 500\r\n     , max_lines_count = 500\r\n         )\r\n\r\n\r\nconst string tlM = \r\n     \"[POC] Display point of control of the most closes\\n\r\n     [▲▼] Display Delta volume coloring\\n\r\n     [▲▼ Gradient] Display Delta gradient volume\\n\r\n     [Total Volume] Display net volume color\\n\r\n     [POC + Gaps] Display POC and void gaps\\n\r\n     [Gaps] Display void gaps only\"\r\n\r\nconst string tlL = \r\n     \"The Lot inputs is the ammount of point the script will assign to each candle, \r\n     this mean that on each candle, the script will assign 0.25 lot size to fit the \r\n     entire candle untill it fully fit, start with 0.01 and ride your way untill it \r\n     fit the best size. This is the starting Lot size\"\r\n\r\nconst string tlT = \r\n     \"POC/Delta LTF Volume calculation\\TIP: To spot volume voids use a close LTF to the \r\n     main one, for less void, use a smaller LTF\"\r\n\r\nconst string tlX =\r\n     \"Display Lots size text\"\r\n\r\n\r\nmode = input.string(\r\n       \"POC\"\r\n     , \"Window    \"\r\n     , [\"POC\", \"▲▼\", \"▲▼ Gradient\", \"Total Volume\", \"POC + Gaps\", \"Gaps\"]\r\n     , tlM\r\n     , \"mode\"\r\n     , \"Coloring\"\r\n                  )\r\n\r\nvNH   = input.color   (#f59c1c, \"POC       \", inline = \"net\", group = \"Coloring\")\r\nvNM   = input.color   (#9f9f9f, \"          \", inline = \"net\", group = \"Coloring\")\r\nvN0   = input.color   (#5c5c5c, \"          \", inline = \"net\", group = \"Coloring\")\r\n\r\nvGUH  = input.color   (#4cc786, \"▲▼        \", inline = \"grd\", group = \"Coloring\")\r\nvGDN  = input.color   (#cd1d28, \"          \", inline = \"grd\", group = \"Coloring\")\r\nvGDH  = input.color   (#5c5c5c, \"          \", inline = \"grd\", group = \"Coloring\")\r\n\r\ntVM  = input.color    (#f4f4f4, \"Total     \", inline = \"tvo\", group = \"Coloring\")\r\ntVL  = input.color    (#a8a8aa, \"          \", inline = \"tvo\", group = \"Coloring\")\r\ntVG  = input.color    (#46454b, \"          \", inline = \"tvo\", group = \"Coloring\")\r\n\r\ngPG  = input.color    (#cd1c28, \"Gaps      \", inline = \"gap\", group = \"Coloring\")\r\ngLV  = input.color    (#9f9f9f, \"          \", inline = \"gap\", group = \"Coloring\")\r\ngL0  = input.color    (#5c5c5e, \"          \", inline = \"gap\", group = \"Coloring\")\r\n\r\nLot  = input.float    (0.25     , \"Size      \"                , group = \"SETTINGS\", tooltip = tlL, minval  = 0.01        , step = 0.01)\r\nLTF  = input.timeframe(\"5\"      , \"LTF       \"                , group = \"SETTINGS\", tooltip = tlT                                     )  \r\nplN  = input.string   (\"ON\"     , \"Lots      \"                , group = \"SETTINGS\", tooltip = tlX,             options = [\"ON\", \"OFF\"])\r\n\r\ncolor css = na\r\nint     i = 0\r\n\r\n\r\ntype bin\r\n    float[] lvls\r\n    float[] vols\r\n    int  [] lots\r\n\r\ntype voids\r\n    float   top\r\n    float   btm\r\n    int     loc\r\n    color   css\r\n    bool    bull\r\n\r\ntype bar\r\n    float   o = open\r\n    float   h = high\r\n    float   l = low\r\n    float   c = close\r\n    float   v = volume\r\n\r\n\r\nbar               b  = bar  .new       ()\r\nbin              ZZ  = bin  .new       (\r\n                       array.new<float>()\r\n                     , array.new<float>()\r\n                     , array.new< int >()\r\n                                       )\r\nvar voids[]    void  = array.new<voids>()\r\n\r\n\r\n[cL, oP, hI, lO, vO] = request.security_lower_tf(\r\n       \"\"\r\n     , LTF\r\n     , \r\n     [\r\n           b.c\r\n         , b.o\r\n         , b.h\r\n         , b.l\r\n         , b.v\r\n         \r\n     ]\r\n                                                 )\r\n\r\n\r\nmethod pos(bin zz, float Lot, int i) =>\r\n    if i == 0\r\n        zz.lvls.unshift(               b.l             )\r\n        zz.lots.unshift(                0              )\r\n        zz.vols.unshift(                0              )\r\n\r\n    else\r\n        zz.lvls.unshift(b.l + (b.l * ((Lot * i)) / 100))\r\n        zz.lots.unshift(                0              )\r\n        zz.vols.unshift(                0              )\r\n\r\n    zz.lvls.get(0)\r\n\r\n\r\nmethod puts(bin zz, float c, float o, int x, float v) =>\r\n    switch\r\n        c > o => zz.lots.set(x, zz.lots.get(x) + 1), zz.vols.set(x, zz.vols.get(x) + v)\r\n        c < o => zz.lots.set(x, zz.lots.get(x) + 1), zz.vols.set(x, zz.vols.get(x) - v)\r\n\r\n\r\nmethod dLb(float y, color css, string txt, string size) =>\r\n    label.new(\r\n           x                = bar_index\r\n         , y                = y\r\n         , style            = label.style_label_center\r\n         , color            = #ffffff00\r\n         , textcolor        = css\r\n         , text             = txt\r\n         , size             = size\r\n         , xloc             = xloc.bar_index\r\n         , text_font_family = font.family_monospace\r\n             )\r\n\r\n\r\nwhile b.h > ZZ.pos(Lot, i)\r\n    i   += 1\r\n\r\n\r\nif ZZ.lvls.size() > 1\r\n    for x = 0 to ZZ.lvls.size() - 1\r\n        for [id, c] in cL\r\n            o    = oP     .get( id )\r\n            h    = hI     .get( id )\r\n            l    = lO     .get( id )\r\n            v    = vO     .get( id )\r\n            lots = ZZ.lots.get( x  )\r\n            lvls = ZZ.lvls.get( x  )\r\n            switch\r\n                x                             == 0 =>\r\n                    if                     h > ZZ.lvls.get ( x + 1 )\r\n                        ZZ                         .puts(c, o, x, v)\r\n                        \r\n                x != 0 and x != ZZ.lvls.size() - 1 =>\r\n                    if c < ZZ.lvls.get(x - 1) and c > ZZ.lvls.get(x)\r\n                        ZZ                         .puts(c, o, x, v)  \r\n\r\n                x             == ZZ.lvls.size() - 1 =>\r\n                    if                        l < ZZ.lvls.get(x - 1)\r\n                        ZZ                         .puts(c, o, x, v)       \r\n\r\n\r\nif ZZ.lvls.size() > 1\r\n    for x = 0 to ZZ.lvls.size() - 1 \r\n        if ZZ.lvls.get(x) <= b.h\r\n            lots = ZZ.lots.get(x)\r\n            lvls = ZZ.lvls.get(x)\r\n            vols = ZZ.vols.get(x)\r\n\r\n            switch mode\r\n                \"POC\"          => css := lots <= ZZ.lots.avg() ? vN0  : lots != 0 and lots != ZZ.lots.max() and lots >= ZZ.lots.avg() ? vNM  : lots == ZZ.lots.max() ? vNH  : vN0\r\n                \"▲▼\"           => css := lots == 0             ? vGDH : vols  > 0                                                     ? vGUH : vols < 0              ? vGDN : na\r\n                \"POC + Gaps\"   => css := lots == ZZ.lots.max() ? vNH  : lots == 0                                                     ? vN0  : vNM\r\n                \"Gaps\"         => css := lots == ZZ.lots.max() ? gL0  : lots == 0                                                     ? gPG  : gLV\r\n                \"▲▼ Gradient\"  => css :=                                                          color.from_gradient(vols, ZZ.vols.min()      , ZZ.vols.max()      , vGDN, vGUH)\r\n                \"Total Volume\" => css :=                                                          color.from_gradient(vols, ZZ.vols.abs().min(), ZZ.vols.abs().max(), tVL , tVM )\r\n\r\n            if plN == \"ON\"\r\n                lvls.dLb (\r\n                     chart.fg_color\r\n                     , \r\n                         str.tostring(lots) + \r\n                         (\r\n                         str.length(str.tostring(lots)) == 1 \r\n                         ? \"    \" \r\n                         : str.length(str.tostring(lots)) == 2 \r\n                         ? \"     \" \r\n                         : \"      \"\r\n                         )\r\n\r\n                     , size.small\r\n                         )\r\n\r\n            if mode != \"POC + Gaps\" and mode != \"Gaps\" and mode != \"Total Volume\"\r\n\r\n                if lots <= ZZ.lots.avg()\r\n                    lvls.dLb                         (css, \"▉\"     , size.small)\r\n\r\n                if lots != 0 and lots != ZZ.lots.max() and lots >= ZZ.lots.avg()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n\r\n                if lots == ZZ.lots.max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n                    lvls.dLb                         (css, \"      ▉\", size.small)\r\n\r\n            if mode == \"POC + Gaps\"\r\n\r\n                if lots > 0 and lots < ZZ.lots.max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n\r\n                if lots == 0\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n                    lvls.dLb                         (css, \"      ▉\", size.small)\r\n\r\n                if lots == ZZ.lots.max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n                    lvls.dLb                         (css, \"      ▉\", size.small)\r\n\r\n            if mode == \"Gaps\"\r\n\r\n                if lots != 0 and lots != ZZ.lots.max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n\r\n                if lots == 0\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n                    lvls.dLb                         (css, \"      ▉\", size.small)\r\n\r\n                if lots == ZZ.lots.max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n\r\n            if mode == \"Total Volume\"\r\n\r\n                if vols > ZZ.vols.abs().avg() and vols != ZZ.vols.abs().max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n\r\n                if vols == ZZ.vols.abs().max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n                    lvls.dLb                         (css, \"   ▉\"   , size.small)\r\n                    lvls.dLb                         (css, \"      ▉\", size.small)\r\n\r\n                if vols < ZZ.vols.abs().avg() and vols != ZZ.vols.abs().max()\r\n                    lvls.dLb                         (css, \"▉\"      , size.small)\r\n","updated":"2024-01-27T18:25:18.343402Z","version":"1.0"}