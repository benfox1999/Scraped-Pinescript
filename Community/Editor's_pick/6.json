{"created":"2024-04-30T19:52:53.260664Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"4.0","scriptAccess":"open_no_auth","scriptName":"Mxwll Suite","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// Mxwll Capital\r\n//@version=5\r\nindicator(\"Mxwll Suite\", overlay = true, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 500, max_bars_back = 500)\r\n\r\nbullC       = input.color(defval = #14D990, title = \"Bull Color\", group = \"Smart Money Concepts\", inline = \"7\")\r\nbearC       = input.color(defval = #F24968, title = \"Bear Color\", group = \"Smart Money Concepts\", inline = \"7\")\r\nshowInt     = input.bool(defval = true, title = \"Show Internals\", group = \"Smart Money Concepts\")\r\nintSens     = input.int(3, \"Internals Sensitivity\", options =  [3 , 5 , 8 ], group = \"Smart Money Concepts\", inline = \"20\")\r\nintStru     = input.string(defval = \"All\", title = \"Internal Structure\", options = [\"All\", \"BoS\", \"CHoCH\"], inline = \"30\", group = \"Smart Money Concepts\")\r\nshowExt     = input.bool(defval = true, title = \"Show Externals\" ,group = \"Smart Money Concepts\")\r\nextSens     = input.int(25, \"Externals Sensitivity\", options = [10, 25, 50],group = \"Smart Money Concepts\", inline = \"21\")\r\nextStru     = input.string(defval = \"All\", title = \"External Structure\", options = [\"All\", \"BoS\", \"CHoCH\"], inline = \"31\", group = \"Smart Money Concepts\")\r\nshowOB      = input.bool(defval = true, title = \"Show Order Blocks\" ,group = \"Swing Blocks\")\r\nshowLast    = input.int(defval = 10, title = \"Swing Order Blocks\", minval = 0, group = \"Swing Blocks\")\r\nshowHHLH    = input.bool(defval = true, title = \"Show HH/LH\", group = \"Swing Blocks\")\r\nshowHLLL    = input.bool(defval = true, title = \"Show LH/LL\", group = \"Swing Blocks\")\r\nshowAOE     = input.bool(defval = true, title = \"Show Area of Interest\", group = \"Swing Blocks\")\r\nshow1D      = input.bool(defval = true, title = \"Show Previous Day High\", group = \"High/Low\")\r\nshow1DLab   = input.bool(defval = true, title = \"Show 1 Day Labels\", group = \"High/Low\")\r\nshow4H      = input.bool(defval = true, title = \"Show 4 Hour High\", group = \"High/Low\")\r\nshow4hLab   = input.bool(defval = true, title = \"Show 4 Hour Labels\", group = \"High/Low\")\r\nshowFVG     = input.bool(defval = true, title = \"Show Fair Value Gaps\", group = \"FVG\")\r\ncontract    = input.bool(defval = false, title = \"Contract Violated FVG\", group = \"FVG\")\r\ncloseOnly   = input.bool(defval = false, title = \"Show Closest Up/Down FVG Only\", group = \"FVG\")\r\nfvgcol      = input.color(defval = #F2B807, title = \"FVG Color\", group = \"FVG\")\r\nfvgtra      = input.int(defval = 80, minval = 0, maxval = 100, title = \"FVG Transparency\", group = \"FVG\")\r\n\r\nshowFibs    = input.bool(defval = true, title = \"Show Auto Fibs\", group = \"Auto Fibs\")\r\n// extSensFibs = input.int(25, \"Fibs Sensitivity\", options = [10, 25, 50], group = \"Auto Fibs\", inline = \"22\")\r\nshow236     = input.bool(defval = true,  title = \"\", inline = \"1\", group = \"Auto Fibs\")\r\nshow382     = input.bool(defval = true,  title = \"\", inline = \"2\", group = \"Auto Fibs\")\r\nshow5       = input.bool(defval = true,    title = \"\", inline = \"3\", group = \"Auto Fibs\")\r\nshow618     = input.bool(defval = true,  title = \"\", inline = \"4\", group = \"Auto Fibs\")\r\nshow786     = input.bool(defval = true,  title = \"\", group = \"Auto Fibs\", inline = \"5\")\r\nfib1        = input.float(defval = .236, title = \"\", minval = 0, step = 0.01, inline = \"1\", group = \"Auto Fibs\")\r\nfib2        = input.float(defval = .382, title = \"\", minval = 0, step = 0.01, inline = \"2\", group = \"Auto Fibs\")\r\nfib3        = input.float(defval = .5,   title = \"\", minval = 0, step = 0.01, inline = \"3\", group = \"Auto Fibs\")\r\nfib4        = input.float(defval = .618, title = \"\", minval = 0, step = 0.01, inline = \"4\", group = \"Auto Fibs\")\r\nfib5        = input.float(defval = .786, title = \"\", minval = 0, step = 0.01, group = \"Auto Fibs\", inline = \"5\")\r\nfib1col     = input.color(title = \"\", defval = color.gray, inline = \"1\"  , group = \"Auto Fibs\")\r\nfib2col     = input.color(title = \"\", defval = color.lime, inline = \"2\"  , group = \"Auto Fibs\")\r\nfib3col     = input.color(title = \"\", defval = color.yellow, inline = \"3\", group = \"Auto Fibs\")\r\nfib4col     = input.color(title = \"\", defval = color.orange, inline = \"4\", group = \"Auto Fibs\")\r\nfib5col     = input.color(title = \"\", defval = color.red   , group = \"Auto Fibs\", inline = \"5\")\r\n\r\nvar bigData = map.new<string, float>()\r\n\r\nif bigData.size() == 0\r\n\r\n    bigData.put(\"moving\", 0)\r\n    bigData.put(\"upaxis\", 0.0) \r\n    bigData.put(\"upaxis2\", 0)\r\n    bigData.put(\"dnaxis\", 0.0) \r\n    bigData.put(\"dnaxis2\", 0)\r\n    bigData.put(\"upside\", 1)\r\n    bigData.put(\"downside\", 1)\r\n\r\n[pdHigh, pdLow, dayHigh, dayLow, pdBar, dayBar] = request.security(syminfo.tickerid, \"1D\", [high[1], low[1], high, low, time[1], time])\r\n\r\nvar highArr = array.new_float(), var lowArr  = array.new_float()\r\nvar timeArr = array.new_int  (), var volArr  = array.new_float()\r\nvar closeArr = array.new_float(), var openArr = array.new_float()\r\n\r\nhighArr.unshift(high), lowArr.unshift(low)\r\ntimeArr.unshift(time), volArr.unshift(volume)\r\ncloseArr.unshift(close), openArr.unshift(open)\r\n\r\ntype rollingTF \r\n\r\n    float highTF                  = 0\r\n    float lowTF                   = 1e8\r\n    int   highTFt                 = 0\r\n    int   lowTFt                  = 0\r\n    float volTF                   = 0\r\n    map   <string, line >         rTFdraw\r\n    map   <string, label>         rTFlabel\r\n\r\nmethod tfDraw(int tfDiff, bool showRollingLab, string tf, bool showLevels) => \r\n\r\n\r\n    TFhrdata = rollingTF.new(), var volRolling = array.new<float>()\r\n\r\n    if highArr.size() > tfDiff\r\n\r\n        for i = 0 to tfDiff\r\n\r\n            if showLevels and barstate.islast\r\n\r\n                getHigh = highArr.get(i), getLow = lowArr.get(i), \r\n                             getTime = timeArr.get(i)\r\n\r\n                TFhrdata.highTF := math.max(TFhrdata.highTF, getHigh)\r\n                TFhrdata.lowTF  := math.min(TFhrdata.lowTF , getLow )\r\n\r\n                if TFhrdata.highTF == getHigh \r\n\r\n                    TFhrdata.highTFt := timeArr.get(i)\r\n\r\n                if TFhrdata.lowTF == getLow\r\n\r\n                    TFhrdata.lowTFt  := timeArr.get(i)\r\n\r\n            TFhrdata.volTF += volArr.get(i)\r\n\r\n        volRolling.push(TFhrdata.volTF)\r\n\r\n        var lineDraw = rollingTF.new(rTFdraw = map.new<string, line>(), rTFlabel = map.new<string, label>())\r\n\r\n        if showLevels\r\n\r\n            switch lineDraw.rTFdraw.size() == 0\r\n\r\n                true =>  lineDraw.rTFdraw.put(\"High\", line.new(TFhrdata.highTFt, TFhrdata.highTF, time, TFhrdata.highTF, \r\n                                                 xloc = xloc.bar_time, color = color.aqua)),\r\n                         lineDraw.rTFdraw.put(\"Low\" , line.new(TFhrdata.lowTFt , TFhrdata.lowTF , time, TFhrdata.lowTF , \r\n                                                 xloc = xloc.bar_time, color = color.aqua))  \r\n\r\n                =>       lineDraw.rTFdraw.get(\"High\").set_xy1(TFhrdata.highTFt, TFhrdata.highTF),\r\n                         lineDraw.rTFdraw.get(\"High\").set_xy2(time, TFhrdata.highTF),\r\n\r\n                         lineDraw.rTFdraw.get(\"Low\").set_xy1(TFhrdata.lowTFt, TFhrdata.lowTF),\r\n                         lineDraw.rTFdraw.get(\"Low\").set_xy2(time, TFhrdata.lowTF)\r\n\r\n            if showRollingLab \r\n\r\n                switch lineDraw.rTFlabel.size() == 0\r\n\r\n                    true =>  lineDraw.rTFlabel.put(\"High\", label.new(time, TFhrdata.highTF, xloc = xloc.bar_time, \r\n                                                         textcolor = color.aqua, \r\n                                                         text      = tf + \"H\", \r\n                                                         size      = size.tiny, \r\n                                                         style     = label.style_label_left, \r\n                                                         color     = #00000000\r\n                                                         )),\r\n                             lineDraw.rTFlabel.put(\"Low\" , label.new(time, TFhrdata.lowTF , xloc = xloc.bar_time, \r\n                                                         textcolor = color.aqua, \r\n                                                         text      = tf + \"L\", \r\n                                                         size      = size.tiny, \r\n                                                         style     = label.style_label_left, \r\n                                                         color     = #00000000\r\n                                                         ))  \r\n\r\n                    =>       lineDraw.rTFlabel.get(\"High\") .set_xy(time, TFhrdata.highTF),\r\n                             lineDraw.rTFlabel.get(\"Low\")  .set_xy(time, TFhrdata.lowTF)\r\n\r\n\r\n    [TFhrdata.volTF, volRolling]\r\n\r\n\r\n\r\ntfDrawLower(bool showRollingLab, simple string tf, bool showLevels) => \r\n\r\n    simple int end = switch tf \r\n\r\n        \"240\" => 240\r\n        \"1D\"  => 1440\r\n\r\n\r\n    [o, h, l, c, v, t] = request.security_lower_tf(syminfo.tickerid, \"1\", [open, high, low, close, volume, time])\r\n\r\n\r\n    var oArr = array.new_float()\r\n    var hArr = array.new_float()\r\n    var lArr = array.new_float()\r\n    var cArr = array.new_float()\r\n    var vArr = array.new_float()\r\n    var tArr = array.new_int()\r\n\r\n    TFhrdata = rollingTF.new(), var volRolling = array.new<float>()\r\n\r\n    if h.size() > 0\r\n\r\n        for i = 0 to h.size() - 1\r\n\r\n            oArr.push(o.get(i))\r\n            hArr.push(h.get(i))\r\n            lArr.push(l.get(i))\r\n            cArr.push(c.get(i))\r\n            vArr.push(v.get(i))\r\n            tArr.push(t.get(i))\r\n\r\n            if hArr.size() > end \r\n\r\n                oArr.shift()\r\n                hArr.shift()\r\n                lArr.shift()\r\n                cArr.shift()\r\n                vArr.shift()\r\n                tArr.shift()\r\n\r\n\r\n        for i = 0 to hArr.size() - 1\r\n        \r\n            if showLevels\r\n\r\n            \r\n                getHigh = hArr.get(i), getLow = lArr.get(i), \r\n                             getTime = tArr.get(i)\r\n\r\n                TFhrdata.highTF := math.max(TFhrdata.highTF, getHigh)\r\n                TFhrdata.lowTF  := math.min(TFhrdata.lowTF , getLow)\r\n\r\n                if TFhrdata.highTF == getHigh \r\n                \r\n                    TFhrdata.highTFt := tArr.get(i)\r\n\r\n                if TFhrdata.lowTF == getLow\r\n                \r\n                    TFhrdata.lowTFt  := tArr.get(i)\r\n\r\n            TFhrdata.volTF  += vArr.get(i)\r\n\r\n        volRolling.push(TFhrdata.volTF)\r\n\r\n        var lineDraw = rollingTF.new(rTFdraw = map.new<string, line>(), rTFlabel = map.new<string, label>())\r\n\r\n        if showLevels\r\n        \r\n            switch lineDraw.rTFdraw.size() == 0\r\n            \r\n                true =>  lineDraw.rTFdraw.put(\"High\", line.new(TFhrdata.highTFt, TFhrdata.highTF, time, TFhrdata.highTF, \r\n                                                 xloc = xloc.bar_time, color = color.aqua)),\r\n                         lineDraw.rTFdraw.put(\"Low\" , line.new(TFhrdata.lowTFt , TFhrdata.lowTF , time, TFhrdata.lowTF , \r\n                                                 xloc = xloc.bar_time, color = color.aqua))  \r\n\r\n                =>       lineDraw.rTFdraw.get(\"High\").set_xy1(TFhrdata.highTFt, TFhrdata.highTF),\r\n                         lineDraw.rTFdraw.get(\"High\").set_xy2(time, TFhrdata.highTF),\r\n\r\n                         lineDraw.rTFdraw.get(\"Low\").set_xy1(TFhrdata.lowTFt, TFhrdata.lowTF),\r\n                         lineDraw.rTFdraw.get(\"Low\").set_xy2(time, TFhrdata.lowTF)\r\n\r\n            if showRollingLab \r\n            \r\n                switch lineDraw.rTFlabel.size() == 0\r\n                \r\n                    true =>  lineDraw.rTFlabel.put(\"High\", label.new(time, TFhrdata.highTF, xloc = xloc.bar_time, \r\n                                                         textcolor = color.aqua, \r\n                                                         text      = tf + \"H\", \r\n                                                         size      = size.tiny, \r\n                                                         style     = label.style_label_left, \r\n                                                         color     = #00000000\r\n                                                         )),\r\n                             lineDraw.rTFlabel.put(\"Low\" , label.new(time, TFhrdata.lowTF , xloc = xloc.bar_time, \r\n                                                         textcolor = color.aqua, \r\n                                                         text      = tf + \"L\", \r\n                                                         size      = size.tiny, \r\n                                                         style     = label.style_label_left, \r\n                                                         color     = #00000000\r\n                                                         ))  \r\n\r\n                    =>       lineDraw.rTFlabel.get(\"High\") .set_xy(time, TFhrdata.highTF),\r\n                             lineDraw.rTFlabel.get(\"Low\")  .set_xy(time, TFhrdata.lowTF)\r\n\r\n\r\n    [TFhrdata.volTF, volRolling]\r\n\r\n\r\nvar r4hrbars = math.floor(timeframe.in_seconds(\"240\") / timeframe.in_seconds(timeframe.period))\r\nvar rDbars   = math.floor(timeframe.in_seconds(\"1D\") / timeframe.in_seconds(timeframe.period))\r\n\r\n[vol4hr, vol4hrArr] = switch \r\n\r\n    timeframe.in_seconds() <= 60 => r4hrbars.tfDraw(show4hLab, \"240\", show4H)\r\n    =>                              tfDrawLower(show4hLab, \"240\", show4H)\r\n\r\n    \r\n[vol1D, vol1DArr] = switch\r\n\r\n    timeframe.in_seconds() <= 60 => rDbars.tfDraw(show1DLab, \"1D\", show1D) \r\n    =>                              tfDrawLower(show1DLab, \"1D\", show1D)\r\n\r\ncalculatePivots(length)=>\r\n\r\n    var int intraCalc = 0\r\n\r\n\r\n    if bar_index > length + 1\r\n\r\n        up  = highArr.slice(0, length).max()\r\n        dn  = lowArr .slice(0, length).min() \r\n        \r\n        cHi = highArr.get(length)\r\n        cLo = lowArr .get(length)\r\n\r\n        intraCalc := switch \r\n\r\n            cHi > up => 0 \r\n            cLo < dn => 1 \r\n            =>          intraCalc[1]\r\n\r\n        topSwing = switch \r\n\r\n            intraCalc == 0 and intraCalc[1] != 0 => cHi \r\n            =>                                      0 \r\n\r\n        botSwing = switch \r\n\r\n            intraCalc == 1 and intraCalc[1] != 1 => cLo\r\n            =>                                      0 \r\n\r\n\r\n        [topSwing, botSwing]\r\n\r\n\r\n[bigUpper    , bigLower   ]     = calculatePivots(extSens)\r\n[smallUpper  , smallLower ]     = calculatePivots(intSens)\r\n\r\n\r\nvar label [] upLabel = array.new_label(1)\r\nvar label [] dnLabel = array.new_label(1)\r\n\r\n\r\nvar box [] highBlock = array.new_box()\r\nvar box [] lowBlock  = array.new_box()\r\n\r\n\r\n\r\ndrawChar(x, y, str, col, down) =>\r\n\r\n    style = switch down \r\n\r\n        true => label.style_label_down\r\n        =>      label.style_label_up\r\n\r\n    line.new (int(x), y, bar_index, y, color = col, style = line.style_dashed)\r\n    label.new(math.round(math.avg(x, bar_index)), y, str, color = #00000000, textcolor = col, style = style, size = size.small)\r\n\r\n\r\ndrawStructureExt() => \r\n\r\n    var int counter = 0\r\n\r\n    if bigUpper != 0\r\n        bigData.put(\"upside\", 1)\r\n        x1 = bar_index - extSens\r\n\r\n        txt = switch bigUpper > bigData.get(\"upaxis\")\r\n            \r\n            true => 'HH'\r\n            =>      'LH'\r\n\r\n        if showHHLH\r\n\r\n            upLabel.set(0, label.new(x1, bigUpper, txt,\r\n\r\n                          color     = color.new(color.white, 100), \r\n                          textcolor = bearC, \r\n                          style     = label.style_label_down, \r\n                          size      = size.small\r\n                          ))\r\n        if showOB\r\n            highBlock.push(box.new(x1, bigUpper, last_bar_index + 5, bigUpper * .998, \r\n                         border_color = color.new(color.red, 75), \r\n                         bgcolor      = color.new(color.red, 95)\r\n                         ))\r\n\r\n        bigData.put(\"upaxis\" , bigUpper)\r\n        bigData.put(\"upaxis2\", x1)\r\n\r\n        counter := 1\r\n\r\n    if bigLower != 0\r\n        bigData.put(\"downside\", 1)\r\n\r\n        x1 = bar_index - extSens\r\n\r\n        txt = switch bigLower < bigData.get(\"dnaxis\") \r\n\r\n            true => \"LL\" \r\n            =>      \"HL\"\r\n\r\n        if showHLLL == true \r\n            dnLabel.set(0, label.new(x1, bigLower, txt, color = #ffffff00, \r\n                         textcolor = bullC, \r\n                         style     = label.style_label_up, \r\n                         size      = size.small\r\n                         ))\r\n        if showOB\r\n            lowBlock.push(box.new(x1, bigLower, last_bar_index + 5, bigLower * 1.002,\r\n                          border_color = color.new(color.blue, 75), \r\n                          bgcolor      = color.new(color.blue, 95)\r\n                          ))    \r\n        \r\n        bigData.put(\"dnaxis\" , bigLower)\r\n        bigData.put(\"dnaxis2\", x1)\r\n\r\n        counter := -1\r\n\r\n\r\n    if showExt\r\n        if ta.crossover(close, bigData.get(\"upaxis\"))\r\n            if bigData.get(\"upside\") != 0\r\n\r\n                str = switch bigData.get(\"moving\") < 0\r\n\r\n                    true => extStru != \"BoS\"   ? 'CHoCH' : \"\" \r\n                    =>      extStru != 'CHoCH' ? 'BoS'   : \"\"\r\n\r\n                if extStru == \"All\" or str.contains(extStru, str)\r\n                    drawChar(bigData.get(\"upaxis2\"), bigData.get(\"upaxis\"), str, bullC, true)\r\n\r\n                bigData.put(\"upside\", 0)\r\n                bigData.put(\"moving\", 1)\r\n\r\n        if ta.crossunder(close, bigData.get(\"dnaxis\"))\r\n\r\n            if bigData.get(\"downside\") != 0\r\n\r\n                str = switch bigData.get(\"moving\") > 0\r\n\r\n                    true => extStru != \"BoS\"   ? 'CHoCH' : \"\" \r\n                    =>      extStru != 'CHoCH' ? 'BoS'   : \"\"\r\n\r\n                if extStru == \"All\" or str.contains(extStru, str)\r\n                    drawChar(bigData.get(\"dnaxis2\"), bigData.get(\"dnaxis\"), str, bearC, false)\r\n\r\n                bigData.put(\"downside\", 0)\r\n                bigData.put(\"moving\", -1)\r\n\r\n    counter \r\n\r\ncounter = drawStructureExt()\r\n\r\nmethod updateBox(array<box> id) =>\r\n\r\n    if id.size() > 0 \r\n        for i = 0 to id.size() - 1\r\n            id.get(i).set_right(last_bar_index + 5)\r\n\r\nmethod cleanseLevel(array<box> id, bool isHighBlock) => \r\n\r\n    if id.size() > 0   \r\n\r\n        for i = id.size() - 1 to 0 \r\n\r\n            condition = switch isHighBlock\r\n            \r\n                true => close >= id.get(i).get_top()\r\n                =>      close <= id.get(i).get_bottom()\r\n\r\n            if condition\r\n                id.remove(i).delete()\r\n\r\n        if id.size() > showLast and showLast != 0\r\n            for i = id.size() - showLast to 0 \r\n                id.remove(i).delete()\r\n\r\nhighBlock.cleanseLevel(true)\r\nlowBlock .cleanseLevel(false)\r\n\r\nif barstate.islast\r\n\r\n    highBlock.updateBox()\r\n    lowBlock .updateBox()\r\n\r\n\r\n\r\nmethod updateMain(line id) => \r\n\r\n    hi = 0.0 \r\n    lo = 1e8\r\n\r\n    if showFibs\r\n\r\n        [bigUpperFibs, bigLowerFibs]    = calculatePivots(25)\r\n\r\n        var int counterFibs = 0\r\n\r\n        if bigUpperFibs != 0 \r\n            counterFibs := 1\r\n\r\n        if bigLowerFibs != 0 \r\n            counterFibs := -1\r\n\r\n        if counterFibs == 1 \r\n            hi := 0.0\r\n            \r\n            id.set_xy1(int(bigData.get(\"upaxis2\")), bigData.get(\"upaxis\"))\r\n\r\n            for i = 0 to bar_index - int(bigData.get(\"dnaxis2\"))\r\n\r\n                getLow = lowArr.get(i)\r\n\r\n                lo := math.min(getLow, lo)\r\n\r\n                if lo == getLow\r\n                    id.set_xy2(bar_index - i, lo)\r\n\r\n        else if counterFibs == -1\r\n\r\n            lo := 1e8\r\n            id.set_xy1(int(bigData.get(\"dnaxis2\")), bigData.get(\"dnaxis\"))\r\n\r\n            for i = 0 to bar_index - bigData.get(\"upaxis2\")\r\n\r\n                getHigh = highArr.get(i)\r\n                hi     := math.max(highArr.get(i), hi)\r\n\r\n                if hi == getHigh \r\n\r\n                    id.set_xy2(bar_index - i, hi)\r\n\r\n        if id.get_x2() < id.get_x1()\r\n\r\n            x2 = id.get_x2(), x1 = id.get_x1()\r\n            y2 = id.get_y2(), y1 = id.get_y1(),\r\n\r\n                     id.set_xy2(x1, y1),\r\n                     id.set_xy1(x2, y2)\r\n\r\n\r\n        switch id.get_y2() < id.get_y1()\r\n\r\n            true => id.set_color(#F24968)\r\n            =>      id.set_color(#14D990)\r\n\r\n    0\r\n\r\n\r\nvar main = line.new(dnLabel.first().get_x(), dnLabel.first().get_y(), upLabel.first().get_x(), upLabel.first().get_y(),\r\n                                                 style = line.style_dashed, \r\n                                                 width = 2\r\n                                                 )\r\n\r\n\r\nmain.updateMain()\r\n\r\nquickLine(getX2, y, color) => \r\n\r\n    line.new(getX2, y, bar_index + 5, y, color = color.new(color, 75))\r\n\r\nquickLabel(y, txt, color) => \r\n\r\n    label.new(bar_index + 5, y, text = str.tostring(txt), color = #00000000, style = label.style_label_left, textcolor = color)\r\n\r\n\r\ndrawFibs() => \r\n\r\n    if barstate.islast\r\n\r\n        var fibLine = array.new<line>(5)\r\n        var fibLab = array.new<label>(5) \r\n        \r\n        if fibLine.size() > 0 \r\n            for i = 0 to fibLine.size() - 1\r\n            \r\n                fibLine .get(i).delete()\r\n                fibLab  .get(i).delete()\r\n\r\n\r\n        if showFibs\r\n\r\n            getY2 = main.get_y2(), sub   = main.get_y1() - getY2, \r\n            getX1 = main.get_x1(), getX2 = main.get_x2()\r\n\r\n            for i = 0 to fibLine.size() - 1\r\n\r\n                mod = i % fibLine.size() - 1   \r\n\r\n                [y, col, txt] = switch mod\r\n\r\n                    0 => [sub * fib1 + getY2, show236 ? fib1col : color.new(chart.bg_color, 100), fib1]\r\n                    1 => [sub * fib2 + getY2, show382 ? fib2col : color.new(chart.bg_color, 100), fib2]\r\n                    2 => [sub * fib3 + getY2, show5   ? fib3col : color.new(chart.bg_color, 100), fib3]\r\n                    3 => [sub * fib4 + getY2, show618 ? fib4col : color.new(chart.bg_color, 100), fib4]\r\n                    =>   [sub * fib5 + getY2, show786 ? fib5col : color.new(chart.bg_color, 100), fib5] \r\n\r\n                fibLine.set(i, quickLine  (getX2, y, col))\r\n                fibLab .set(i, quickLabel (y, txt, col))\r\n\r\n\r\ndrawFibs()\r\n\r\n\r\ndrawStructureInternals() => \r\n\r\n    if showInt\r\n        \r\n        var keyValues = map.new<string, float>()\r\n\r\n        if keyValues.size() == 0 \r\n            keyValues.put(\"movingSmall\", 0)\r\n\r\n        if smallUpper != 0 \r\n\r\n            keyValues.put(\"upsideSmall\", 1)          \r\n            keyValues.put(\"upaxisSmall\", smallUpper) \r\n            keyValues.put(\"upaxis2Small\", bar_index - intSens)\r\n\r\n        if smallLower != 0 \r\n\r\n            keyValues.put(\"downsideSmall\", 1)       \r\n            keyValues.put(\"dnaxisSmall\", smallLower)\r\n            keyValues.put(\"dnaxis2Small\", bar_index - intSens)\r\n\r\n\r\n        if ta.crossover(close, keyValues.get(\"upaxisSmall\")) \r\n            if keyValues.get(\"upsideSmall\") != 0\r\n\r\n                str = switch \r\n\r\n                    keyValues.get(\"movingSmall\") < 0 =>     intStru != \"BoS\"   ? 'I-CHoCH' : \"\" \r\n                    =>                                      intStru != \"CHoCH\" ? 'I-BoS'   : \"\"\r\n\r\n                if intStru == \"All\" or str.contains(str, intStru)\r\n\r\n                    drawChar(keyValues.get(\"upaxis2Small\"), keyValues.get(\"upaxisSmall\"), str, bullC, true)\r\n\r\n                keyValues.put(\"upsideSmall\", 0)\r\n                keyValues.put(\"movingSmall\", 1)\r\n\r\n        if ta.crossunder(close, keyValues.get(\"dnaxisSmall\"))\r\n            if keyValues.get(\"downsideSmall\") != 0\r\n\r\n                str = switch \r\n\r\n                    keyValues.get(\"movingSmall\") > 0 => intStru != \"BoS\"   ? 'I-CHoCH' : \"\"\r\n                    =>                                  intStru != \"CHoCH\" ? 'I-BoS'   : \"\"\r\n\r\n                if intStru == \"All\" or str.contains(str, intStru)\r\n\r\n                    drawChar(keyValues.get(\"dnaxis2Small\"), keyValues.get(\"dnaxisSmall\"), str, bearC, false)\r\n\r\n                keyValues.put(\"downsideSmall\", 0)\r\n                keyValues.put(\"movingSmall\", -1)\r\n\r\n\r\ndrawStructureInternals()\r\n\r\n\r\ndrawAOE() => \r\n\r\n    atr = ta.atr(14)\r\n\r\n    if showAOE \r\n\r\n        if closeArr.size() > 50\r\n\r\n            aoi    = closeArr.slice(0, 50) \r\n            aoi2   = openArr .slice(0, 50) \r\n\r\n            maxaoiH = math.max(aoi.max(), aoi2.max())\r\n            minaoiL = math.min(aoi.min(), aoi2.min())\r\n\r\n            var aoeLevels = map.new<string, box>()\r\n\r\n            if aoeLevels.size() == 0 \r\n\r\n                aoeLevels.put(\"High\", \r\n                         \r\n                             box.new(bar_index[50], maxaoiH * 1.01, bar_index + 5, maxaoiH, \r\n                             border_color = #00000000, \r\n                             bgcolor      = color.new(#F24968, 90), \r\n                             text         = \"Area of Interest\" , \r\n                             text_size    = size.small, \r\n                             text_color   = color.new(#F24968, 33) \r\n                             ))\r\n\r\n                aoeLevels.put(\"Low\", \r\n                         \r\n                             box.new(bar_index[50], minaoiL, bar_index + 5, minaoiL * .99, \r\n                             border_color = #00000000, \r\n                             bgcolor      = color.new(#14D990, 90), \r\n                             text         = \"Area of Interest\" , \r\n                             text_size    = size.small, \r\n                             text_color   = color.new(#14D990, 33) \r\n                             ))\r\n\r\n            getHighBox = aoeLevels.get(\"High\")\r\n\r\n            if close <= getHighBox.get_top() * 1.01\r\n\r\n                getHighBox.set_lefttop      (bar_index[50], maxaoiH + atr)\r\n                getHighBox.set_rightbottom  (bar_index + 5,  maxaoiH)\r\n                getHighBox.set_text         (\"Area of Interest\")\r\n\r\n            else \r\n\r\n                getHighBox.set_lefttop      (bar_index + 5, maxaoiH + atr)\r\n                getHighBox.set_rightbottom  (bar_index + 5,  maxaoiH + atr)\r\n                getHighBox.set_text         (\"\")\r\n\r\n            getLowBox = aoeLevels.get(\"Low\")\r\n\r\n            if close >= getLowBox.get_bottom() * .99\r\n\r\n                getLowBox.set_lefttop     (bar_index[50],  minaoiL)\r\n                getLowBox.set_rightbottom (bar_index + 5,  minaoiL - atr)\r\n                getLowBox.set_text        (\"Area of Interest\")\r\n            else \r\n\r\n                getLowBox.set_lefttop     (bar_index + 5, minaoiL)\r\n                getLowBox.set_rightbottom (bar_index + 5, - atr)\r\n                getLowBox.set_text        (\"\")\r\n\r\ndrawAOE()\r\n\r\n\r\nvar table tab2 = table.new(position.top_right, 13, 13,  bgcolor = #20222C, border_color = #363843, frame_color = #363843, border_width = 1, frame_width = 1)\r\n\r\nnyHour   = hour  (timenow, \"America/New_York\")\r\nnyMinute = minute(timenow, \"America/New_York\")\r\n\r\nfvg(direction) => \r\n\r\n    var fvgMat = matrix.new<float>(5), var fvgDrawings = array.new<box>()\r\n\r\n    fvgMat.add_col(0, array.from(math.sign(close - open), close, high, low, time))\r\n\r\n    if fvgMat.columns() > 3 \r\n        fvgMat.remove_col(fvgMat.columns() - 1)\r\n\r\n    if fvgMat.row(0).sum() == direction\r\n\r\n        getDir = math.sign(direction)\r\n\r\n        [y, y1] = switch getDir\r\n\r\n            -1 => [fvgMat.get(3, 2), fvgMat.get(2, 0)]   \r\n            =>    [fvgMat.get(3, 0), fvgMat.get(2, 2)]\r\n\r\n        col = switch closeOnly\r\n            true => #00000000\r\n            =>      color.new(fvgcol, fvgtra)\r\n\r\n        fvgDrawings.push(\r\n             box.new(int(fvgMat.get(4, 1)),y, last_bar_time, y1, xloc = xloc.bar_time, \r\n                 border_color = col, bgcolor = col)\r\n         )\r\n        \r\n\r\n    fvgDrawings\r\n\r\nif showFVG\r\n\r\n    fvgDn = fvg(-3)\r\n    fvgUp = fvg(3)\r\n\r\n    if fvgDn.size() > 0 \r\n\r\n        for i = fvgDn.size() - 1 to 0\r\n\r\n            getfvg = fvgDn.get(i)\r\n\r\n            if high >= getfvg.get_top()\r\n                getfvg.delete()\r\n                fvgDn.remove(i)\r\n\r\n            else if contract\r\n                if high > getfvg.get_bottom()\r\n                    getfvg.set_bottom(high)\r\n\r\n\r\n    if fvgUp.size() > 0 \r\n\r\n        for i = fvgUp.size() - 1 to 0\r\n\r\n            getfvg = fvgUp.get(i)\r\n\r\n            if low <= getfvg.get_bottom()\r\n                getfvg.delete()\r\n                fvgUp.remove(i)\r\n\r\n            else if contract\r\n                if low < getfvg.get_top()\r\n                    getfvg.set_top(low)\r\n\r\n\r\n    if closeOnly and barstate.islast \r\n\r\n        minDist = matrix.new<float>(1, 2, 20e20)\r\n\r\n        if fvgDn.size() > 0 \r\n            for i = fvgDn.size() - 1 to 0\r\n\r\n                getBottom = fvgDn.get(i).get_bottom()\r\n\r\n                minDist.set(0, 1, math.min(minDist.get(0, 1), math.abs(close - getBottom)))\r\n\r\n                if math.abs(close - getBottom) == minDist.get(0, 1)\r\n                    minDist.set(0, 0, i)\r\n\r\n                fvgDn.get(i).set_right(fvgDn.get(i).get_left())\r\n\r\n            fvgDn.get(int(minDist.get(0, 0))).set_bgcolor(color.new(fvgcol, fvgtra))\r\n            fvgDn.get(int(minDist.get(0, 0))).set_border_color(color.new(fvgcol, fvgtra))\r\n            fvgDn.get(int(minDist.get(0, 0))).set_right(last_bar_time)\r\n\r\n        minDist.set(0, 0, 0)\r\n        minDist.set(0, 1, 20e20)\r\n\r\n\r\n        if fvgUp.size() > 0 \r\n            for i = fvgUp.size() - 1 to 0\r\n\r\n                getTop = fvgUp.get(i).get_top()\r\n\r\n                minDist.set(0, 1, math.min(minDist.get(0, 1), math.abs(close - getTop)))\r\n\r\n                if math.abs(close - getTop) == minDist.get(0, 1)\r\n                    minDist.set(0, 0, i)\r\n\r\n                fvgUp.get(i).set_right(fvgUp.get(i).get_left())\r\n\r\n\r\n            fvgUp.get(int(minDist.get(0, 0))).set_bgcolor(color.new(fvgcol, fvgtra))\r\n            fvgUp.get(int(minDist.get(0, 0))).set_border_color(color.new(fvgcol, fvgtra))\r\n            fvgUp.get(int(minDist.get(0, 0))).set_right(last_bar_time)\r\n\r\n\r\n\r\ncalculateTimeDifference(timestamp1, timestamp2) =>\r\n    timeDifference = timestamp2 - timestamp1\r\n    hours = math.floor(timeDifference / 3600000)\r\n    minutes = math.floor((timeDifference % 3600000) / 60000)\r\n    [hours, minutes]\r\n\r\n\r\ndayAdjustment = (hour(timenow, \"America/New_York\") < 2) ? dayofmonth(timenow) + 1 : dayofmonth(timenow)\r\ndayAdjustment2 = nyHour >= 20 or nyHour < 2 ? dayofmonth(timenow) + 1 : dayofmonth(timenow)\r\n\r\ntimeIsInRange(startHour, startMinute, endHour, endMinute) =>\r\n\r\n    (nyHour > startHour or (nyHour == startHour and nyMinute >= startMinute)) and (nyHour < endHour or (nyHour == endHour and nyMinute <= endMinute))\r\n\r\n\r\n[chartcol, timetilchange, stringCol, stringCol2] = switch \r\n\r\n    timeIsInRange(9, 30, 16, 0) => [#f24968  , timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 16, 0, 0), \"New York\", \"Asia\"]\r\n    timeIsInRange(20, 0, 2 , 0) => [#14D990  , timestamp(\"America/New_York\", year(timenow), month(timenow), dayAdjustment, 2, 0, 0), \"Asia\", \"London\"]\r\n    timeIsInRange(3, 0, 11, 30) => [#F2B807  , timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 11, 30, 0), \"London\", \"New York\"]\r\n    => [color.gray, int(na), \"Dead Zone\", (nyHour > 16 or nyHour < 3) ? \"London\" : (nyHour >= 11 and nyHour < 20) ? \"Asia\" : \"New York\"]                        \r\n\r\n[hours, minutes] = calculateTimeDifference(timenow, timetilchange)\r\n\r\ntimetilchange2 = switch\r\n\r\n    timeIsInRange(9, 30, 16, 0)  => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 20, 0, 0) \r\n    timeIsInRange(20, 0, 2 , 0)  => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 3, 0, 0)  \r\n    timeIsInRange(3, 0, 11, 30)  => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 9, 30, 0) \r\n    => na \r\n\r\n\r\nif na(timetilchange2)\r\n    timetilchange2 := switch\r\n        nyHour < 9 or (nyHour == 9 and nyMinute < 30) => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 9, 30, 0) \r\n        nyHour < 20 or (nyHour >= 16 and nyHour < 20) => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 20, 0, 0) \r\n        nyHour < 3 or (nyHour >= 2 and nyHour < 3)    => timestamp(\"America/New_York\", year(timenow), month(timenow), dayofmonth(timenow), 3, 0, 0)     \r\n        => na  \r\n\r\n[hours2, minutes2] = calculateTimeDifference(timenow, timetilchange2)\r\n\r\nmethod getActivity(array<float> id, float id2) => \r\n\r\n    if id.size() > 0\r\n\r\n        volPerc1 = id.percentile_nearest_rank(10)\r\n        volPerc2 = id.percentile_nearest_rank(33)\r\n        volPerc3 = id.percentile_nearest_rank(50)\r\n        volPerc4 = id.percentile_nearest_rank(66)\r\n        volPerc5 = id.percentile_nearest_rank(90)\r\n\r\n        log.warning(str.tostring(volPerc1) + \"\\n\" + str.tostring(volPerc2) + \"\\n\" + str.tostring(volPerc3) + \"\\n\" + str.tostring(volPerc4) + \"\\n\" + str.tostring(volPerc5))\r\n\r\n        activity = switch \r\n\r\n            id2 <=  volPerc1 => \"Very Low\"   \r\n            id2 <=  volPerc2 => \"Low\"   \r\n            id2 <=  volPerc3 => \"Average\"   \r\n            id2 <=  volPerc4 => \"High\"   \r\n            =>                  \"Very High\"\r\n\r\n\r\n        activity\r\n    \r\n\r\nif barstate.islast \r\n\r\n    hr4Act = vol4hrArr.getActivity(vol4hr)\r\n    D1Act  = vol1DArr .getActivity(vol1D)\r\n\r\n    str = str.tostring(timetilchange)\r\n    ch  = str.substring(str, str.pos(str, \".\") + 1, str.length(str))\r\n    nu  = str.tonumber(ch) * 6\r\n    nu2 = str.substring(str.tostring(nu), 0, 2)\r\n\r\n\r\n    table.cell(tab2, 0, 2, text = \"Session:\"  ,       text_color = color.white, text_halign = text.align_left)\r\n    table.cell(tab2, 0, 3, text = \"Session Close:\"  , text_color = color.white, text_halign = text.align_left)\r\n    table.cell(tab2, 0, 4, text = \"Next Session:\"  , text_color = color.white, text_halign = text.align_left)\r\n    table.cell(tab2, 0, 5, text = \"Next Session Open:\"  , text_color = color.white, text_halign = text.align_left)\r\n\r\n    table.cell(tab2, 0, 6, text = \"4-Hr Volume:\"  ,   text_color = color.white, text_halign = text.align_left)\r\n    table.cell(tab2, 0, 7, text = \"24-Hr Volume:\"  ,  text_color = color.white, text_halign = text.align_left)\r\n\r\n    table.cell(tab2, 1, 2, text =  stringCol , text_color = color.white)\r\n    table.cell(tab2, 1, 3, text = stringCol != \"Dead Zone\" ? str.tostring(hours)+ \"h\" + str.tostring(minutes) + \"m\": \"Dead Zone\", text_color = color.white)\r\n    table.cell(tab2, 1, 4, text =stringCol2, text_color = color.white)\r\n    table.cell(tab2, 1, 5, text = str.tostring(hours2) + \"h:\" + str.tostring(minutes2) + \"m\", text_color = color.white)\r\n    table.cell(tab2, 1, 6, text = hr4Act, text_color = color.white)\r\n    table.cell(tab2, 1, 7, text = D1Act, text_color = color.white)\r\n\r\n\r\nnyHour2   = hour  (time, \"America/New_York\")\r\nnyMinute2 = minute(time, \"America/New_York\")\r\n\r\ntimeIsInRange2(startHour, startMinute, endHour, endMinute) =>\r\n    if endHour >= startHour\r\n        (nyHour2 > startHour or (nyHour2 == startHour and nyMinute2 >= startMinute)) and \r\n         (nyHour2 < endHour or (nyHour2 == endHour and nyMinute2 <= endMinute))\r\n    else\r\n        (nyHour2 > startHour or (nyHour2 == startHour and nyMinute2 >= startMinute)) or\r\n         (nyHour2 < endHour or (nyHour2 == endHour and nyMinute2 <= endMinute))\r\n\r\nnyCol = input.color(defval = #f24968, title = \"NY Color\")\r\nasCol = input.color(defval = #14D990, title = \"Asia Color\")\r\nloCol = input.color(defval = #F2B807, title = \"London Color\")\r\ntra   = input.int(defval = 98, minval = 0, maxval = 100, title = \"Transparency\")\r\n\r\nbgcolor(timeIsInRange2(9, 30, 16, 0) ? color.new(nyCol, tra) : na)\r\nbgcolor(timeIsInRange2(20, 0, 2 , 0) ? color.new(asCol, tra) : na)\r\nbgcolor(timeIsInRange2(3, 0, 11, 30) ? color.new(loCol, tra) : na)\r\n\r\n","updated":"2024-04-30T19:52:53.260664Z","version":"4.0"}