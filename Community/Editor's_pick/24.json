{"created":"2024-05-19T13:56:06.143776Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"4.0","scriptAccess":"open_no_auth","scriptName":"Volume Speed [MUQWISHI]","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © MUQWISHI\r\n\r\n//@version=5\r\nindicator(\"Volume Speed [MUQWISHI]\", overlay = true)\r\nimport MUQWISHI/colorLab/1 as colLab\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                   INPUT                                    |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// +++++++++++++++ Table Settings\r\nvar G1 = \"Widget Settings\"\r\n// Timezone\r\ntimzon = input.string(\"GMT-5\", \"Timezone                          \", inline = \"0\", group = G1, display = display.none)\r\n\r\n// Table Colors\r\ntBgCol = input.color(#000000, \"\", group = G1, inline = \"0\", display = display.none)\r\ntTxCol = input.color(#ffffff, \"\", group = G1, inline = \"0\", display = display.none)\r\n\r\n// Location \r\ntablePos = input.string(\"Bottom Center\", \"Widget Location|Size\", \r\n             [\"Top Right\" , \"Middle Right\"  , \"Bottom Right\" , \r\n              \"Top Center\", \"Middle Center\" , \"Bottom Center\", \r\n              \"Top Left\"  , \"Middle Left\"   , \"Bottom Left\" ], inline = \"1\", group = G1, display = display.none)\r\n\r\n// Size\r\ntableSiz = input.string(\"Small\", \"\", \r\n             [\"Auto\", \"Huge\", \"Large\", \"Normal\", \"Small\", \"Tiny\"], inline = \"1\", group = G1, display = display.none)\r\n\r\n// Cell Colors\r\nupXCC = input.color(#0c5a99, \"Up | Down Volume       \",        group = G1, inline = \"4\")\r\ndnXCC = input.color(#E65100, \"\",                               group = G1, inline = \"4\")\r\nclrMd = input.string(\"Gradient\", \"     \", [\"Solid\", \"Gradient\"], group = G1, inline = \"4\", display = display.none)\r\n\r\n// Space\r\nspace = input.bool(false, \"Make The Volume Scale Bar Spaced\",     group = G1)\r\n\r\n// +++++++++++++++ Technical Settings\r\nvar G2 = \"Technical Settings\"\r\n// Timeframe\r\ntFrm = input.timeframe(\"1S\", \"Lower Timeframe\", group = G2, display = display.none,\r\n         tooltip = \"Note:\\nIf the selected timeframe is invalid (higher than chart),\" + \r\n                   \"the indicator will automatically switch to 1 second.\")\r\n\r\n// Length\r\nnRow = input.int(60, \"Length\", 1, 100, group = G2, display = display.none) + 2\r\n\r\n// Volume OR Price Volume\r\niVol = input.string(\"Volume\", \"Size Type\", [\"Volume\", \"Price Volume\"], group = G2, display = display.none)\r\n\r\n// Flash\r\ncFlsh = input.bool(true, \"Enable a 3-Second Flash When the Latest Lot\")\r\nvFlsh = input.float(8,   \"          Volume Is Greater than Average\", 1, 100, inline = \"5\", display = display.none,\r\n         tooltip = \"When lot volume of selected timeframe is\\n\\n2 means 'Double Average'.\" +\r\n                   \"\\n3 means 'Triple Average'.\\n8 means '8 Times Average'.\\n...etc\")\r\n\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                 CALCULATION                                |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// +++++++++++++++ Get Number of Strings Function\r\nstrVol (x) => str.tostring(x, format.volume)\r\nstrPvol(x) => str.tostring(x, \"$##.00\")\r\n\r\n// +++++++++++++++ Declare Matrix \r\nvar mtx = matrix.new<float>(0, 4, na) // Lower Timeframe\r\n\r\n// +++++++++++++++ Import Data\r\nvar timfram =  timeframe.in_seconds(tFrm) > timeframe.in_seconds(timeframe.period) ? \"1S\" : tFrm\r\n[cls, tim, vol] = request.security_lower_tf(syminfo.tickerid, timfram, \r\n     [close, time, iVol == \"Volume\" ? volume : hlc3 * volume], true, ignore_invalid_timeframe = true)\r\n \r\nvar chg = 0\r\nif cls.size() > 0 and cls.size() == tim.size() and cls.size() == vol.size()\r\n\r\n    sIdx = cls.size() - nRow < 0 ? 0 : cls.size() - nRow\r\n    eIdx = cls.size()\r\n\r\n    tim0 = tim.slice(sIdx, eIdx)\r\n    vol0 = vol.slice(sIdx, eIdx)\r\n    cls0 = cls.slice(sIdx, eIdx)\r\n\r\n    for i = 0 to cls0.size() - 1\r\n        cTim = tim0.get(i)\r\n        cVol = vol0.get(i)\r\n        cCls = cls0.get(i)\r\n\r\n        if mtx.rows() > 0\r\n            // Price Change \r\n            pCls = mtx.get(0, 2)\r\n            if pCls != cCls\r\n                chg := (cCls - pCls)/pCls > 0 ? 1 : -1\r\n        \r\n        // Add new rows with values to Matrix\r\n        mtx.add_row(0, array.from(cTim, chg, cCls, cVol))\r\n\r\n        // Remove over rows from a Matrix\r\n        while mtx.rows() > nRow\r\n            mtx.remove_row(mtx.rows()-1)\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                   TABLE                                    |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// +++++++++++++++ Get Tbale Location & Size\r\nlocNsze(x) => \r\n    y   = str.split(str.lower(x), \" \")\r\n    out = \"\"\r\n    for i = 0 to y.size() - 1\r\n        out := out + y.get(i)\r\n        if i != y.size() - 1\r\n            out := out + \"_\"\r\n    out\r\n\r\n// +++++++++++++++ Get Volume Format\r\nvolForm(x) =>\r\n    iVol == \"Volume\" ? x > 999999 ? strVol(x) : str.tostring(x) : strPvol(x)\r\n\r\n// +++++++++++++++ Get Timeframe Format\r\ntfTxt(y) =>\r\n    x   = y\r\n    out = string(na)\r\n\r\n    if timeframe.in_seconds(x) == timeframe.in_seconds(\"\")\r\n        x := timeframe.period\r\n\r\n    if str.contains(x, \"D\") or str.contains(x, \"W\") or str.contains(x, \"M\") or str.contains(x, \"S\")\r\n        if str.length(x) == 1\r\n            out := \"1\" + x\r\n        else \r\n            out := x\r\n    else\r\n        if str.tonumber(x) % 60 == 0\r\n            out := str.tostring(str.tonumber(x) / 60) + \"H\"\r\n        else\r\n            out := x + \"min\"\r\n    out\r\n  \r\n// +++++++++++++++ Get Speed Info\r\nspeed(x1, x2) =>\r\n    var unit = if iVol == \"Price Volume\"\r\n        \"/\" \r\n    else \r\n        switch syminfo.type\r\n            \"stock\"  => \" Shares/\"\r\n            \"dr\"     => \" Shares/\"\r\n            \"fund\"   => \" Shares/\"\r\n            \"crypto\" => \" Coins/\"\r\n            => \" Units/\"\r\n\r\n    varip spMin = 0.0\r\n    varip spMax = 0.0\r\n    varip spTim = timenow\r\n\r\n    speed = barstate.isrealtime ? x1/x2 : 0\r\n\r\n    spMin := spMin == 0 ? speed : math.min(speed, spMin)\r\n    spMax := spMax == 0 ? speed : math.max(speed, spMax)\r\n\r\n    [volForm(math.round(speed, 6)) + unit + tfTxt(timfram), \r\n     volForm(math.round(spMin, 6)) + unit + tfTxt(timfram),\r\n     volForm(math.round(spMax, 6)) + unit + tfTxt(timfram),\r\n     str.format_time(spTim, \"HH:mm:ss  yyyy-MM-dd\", timzon)]\r\n\r\n// +++++++++++++++ Create Table\r\nvar table tbl = na\r\nif mtx.rows() > 2\r\n    tbl := table.new(locNsze(tablePos), 102, 4, tBgCol, tTxCol, 1, color.new(tBgCol, 100), space ? 1 : 0)\r\n\r\n// +++++++++++++++ Get Cell Function\r\ncell(col, row, txt, w, h, color, txtCol, tip) =>\r\n    tbl.cell(col, row, txt, w, h, txtCol, bgcolor = color, text_size = locNsze(tableSiz))\r\n    if tip != \"\"\r\n        tbl.cell_set_tooltip(col, row, tip)\r\n\r\n// +++++++++++++++ Draw Table\r\nif barstate.islast and not na(tbl)\r\n    table.clear(tbl, 0, 0, 101, 3)\r\n\r\n    upVol = .0\r\n    dnVol = .0\r\n    for i = 0 to mtx.rows() - 3\r\n        if mtx.get(i, 1) > 0\r\n            upVol += mtx.get(i, 3) \r\n        else\r\n            dnVol += mtx.get(i, 3)\r\n    \r\n    span  = (timenow - mtx.get(mtx.rows()-3, 0))/(1000 * timeframe.in_seconds(timfram))\r\n    smVol = upVol + dnVol\r\n    avVol = smVol/(mtx.rows() - 2)\r\n\r\n\r\n    // Up & Down Volumes Columns\r\n    cell(0,   3, \"00000.000000\", 0, 0.0001, color(na), color(na),   \"Total Up Volume\")\r\n    cell(101, 3, \"00000.000000\", 0, 0.0001, color(na), color(na), \"Total Down Volume\")\r\n\r\n    cell(0,   1, volForm(upVol), 0, 0, upXCC, tTxCol, \"Total Up Volume\")\r\n    cell(101, 1, volForm(dnVol), 0, 0, dnXCC, tTxCol, \"Total Down Volume\")\r\n\r\n    cell(  0, 0, \"UP\",   0, 0,  color(na), tTxCol, \"Total Up Volume\")\r\n    cell(101, 0, \"DOWN\", 0, 0,  color(na), tTxCol, \"Total Down Volume\")\r\n\r\n\r\n    // Volume Dynamic Scale Bar\r\n    upStng = math.round(upVol/smVol * 100)\r\n    dnStng = 100 - upStng\r\n\r\n    var upCol = clrMd == \"Gradient\" ? colLab.lsh_scheme(upXCC, 100, \"lightness\", 85, 40) : array.new<color>(100, upXCC)\r\n    var dnCol = clrMd == \"Gradient\" ? colLab.lsh_scheme(dnXCC, 100, \"lightness\", 85, 40) : array.new<color>(100, dnXCC)\r\n    for i = 0 to 99\r\n        cell(1 + i, 0, \"\", 0.3, 0, color(na), color(na), \"\")\r\n        cell(1 + i, 2, \"\", 0.3, 0, color(na), color(na), \"\")\r\n        cell(1 + i, 3, \"\", 0.3, 0.0001, color(na), color(na), \"\")\r\n        if i < upStng \r\n            cell(1   + i, 1, \"\", 0.3, 0, upCol.get(i), tTxCol,  \"\")\r\n\r\n        if i < dnStng\r\n            cell(100 - i, 1, \"\", 0.3, 0, dnCol.get(i), tTxCol,  \"\")\r\n    \r\n\r\n    // Average Speed\r\n    [avgSp, minSp, maxSp, timSp] = speed(smVol, span)\r\n    table.merge_cells(tbl, 1, 0, 100, 0)\r\n    tbl.cell(1, 0, \"AVG Speed \" + avgSp, 0, 0, tTxCol, text_size = locNsze(tableSiz),\r\n     tooltip = \"MAX Speed \" + maxSp + \"\\nMIN  Speed \" + minSp + \"\\n\\n\\nsince \" + timSp)\r\n\r\n\r\n    // Bottom Info\r\n    table.merge_cells(tbl, 1, 2, 100, 2)\r\n    if barstate.isrealtime\r\n        cell(1, 2, \"Total Vol \" + str.tostring(smVol) + \r\n         \"                    Period = \"  + str.tostring(nRow-2) + \" @ \" + tfTxt(timfram), 0, 0, color(na), tTxCol, \"\")\r\n    \r\n    // Flash\r\n        if cFlsh\r\n            varip spkTim = 0.0\r\n            varip spkDic = 0.0\r\n            varip spkVol = 0.0\r\n            lstVol = mtx.get(0, 3)\r\n            if lstVol >= avVol * vFlsh\r\n                dir    = mtx.get(0, 1)\r\n                spkTim := timenow + 3000\r\n                spkDic := dir\r\n                spkVol := lstVol\r\n\r\n            if mtx.col(3).indexof(spkVol) != -1\r\n                if spkDic > 0\r\n                    cell(0,   2, \"+\" + volForm(spkVol), 0, 0, color(na), tTxCol, \r\n                     \"Recorded - Most Recent at Once\\nUp Volume is Graeter Than \" + str.tostring(vFlsh) + \" Times of Total Average Volume\")\r\n                if spkDic < 0\r\n                    cell(101, 2, \"+\" + volForm(spkVol), 0, 0, color(na), tTxCol,\r\n                     \"Recorded - Most Recent at Once\\nDown Volume is Graeter Than \" + str.tostring(vFlsh) + \" Times of Total Average Volume\")\r\n\r\n            if spkTim > timenow + 2000\r\n                tbl.set_bgcolor(spkDic > 0 ? color.new(upXCC, 25) : color.new(dnXCC, 25))\r\n            else if spkTim > timenow + 1000\r\n                tbl.set_bgcolor(spkDic > 0 ? color.new(upXCC, 50) : color.new(dnXCC, 50))\r\n            else if spkTim > timenow\r\n                tbl.set_bgcolor(spkDic > 0 ? color.new(upXCC, 75) : color.new(dnXCC, 75))\r\n            else \r\n                tbl.set_bgcolor(tBgCol)\r\n    else\r\n    // Message\r\n        cell(1, 2, \"⚠ This Tool Performs During Live Market\", 0, 0, color(na), color.red, \"\")\r\n","updated":"2024-05-19T13:56:06.143776Z","version":"4.0"}