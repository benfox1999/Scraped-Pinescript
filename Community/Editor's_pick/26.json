{"created":"2023-12-21T14:53:15.203608Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Christmas Toolkit [LuxAlgo]","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\n// © LuxAlgo\n\n//@version=5\nindicator(\"Christmas Toolkit [LuxAlgo]\", shorttitle=\"LuxAlgo - Christmas Toolkit\"\n , max_lines_count  =  500\n , max_labels_count =  500\n , max_bars_back    = 5000\n , scale            = scale.none\n , overlay          = true\n )\n\n//------------------------------------------------------------------------------\n// Settings\n//-----------------------------------------------------------------------------{\nwidth    = input.int   ( 200,  step =  10 )\noffset   = input.int   (100 ,  step =  10  )\nrotation = input.int   (5, 'Garland Rotations')\n\nstaticT  = input.bool  (true  , 'Static Tree')\ndeerSp   = input.int   ( 1    , 'Deer Speed' \n         , minval=1   , maxval=10            )\n\n//Theme\ncol      = input.color (#056656, 'Tree Color'\n  , group = 'Theme')\n\ncGar     = input.color (#f29a3685, inline='g'\n , title = 'Garland Color'\n , group = 'Theme')\n\ngar      = input.string('✫', ''  , inline='g'\n  , options   =   ['✳︎','✴︎','✫','✶','●']\n  , group = 'Theme')\n\n//-----------------------------------------------------------------------------}      \n//Variables\n//-----------------------------------------------------------------------------{\nvar  length = 1000\nvar  alpha  =    0.1\nvarip count =    0\n\nvar int leftBar  = na\nvar int rightBar = na\nvar color last   = na\n\nvar label l1 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\nvar label l2 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\nvar label l3 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\nvar label l4 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\nvar label l5 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\nvar label l6 = label.new(na, na, style=label.style_none, text='⭐️', size=size.tiny)\n\nvar label a0 = label.new(na, na, style=label.style_none  , size=size.huge,  text='⭑') // ☆★⭑⭒✮✩\nvar label a1 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a2 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a3 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a4 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a5 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a6 = label.new(na, na, style=label.style_circle, size=size.tiny)\nvar label a7 = label.new(na, na, style=label.style_circle, size=size.tiny)\n\nvar label t0 = label.new(na, na, style=label.style_none\n  , text = '⏺'\n  , size = size.large\n  , textalign = text.align_left\n  , tooltip = 'Last switch')\n\nvar label t1 = label.new(na, na\n  , style = label.style_none\n  , text = 'rsi'\n  , size = size.small\n  , textalign = text.align_left\n  , tooltip = 'rsi < 20 - lime\\nrsi < 30 - green\\nrsi > 80 - darkRed\\nrsi > 70 - red\\nelse - blue')\n\nvar label t2 = label.new(na, na, style=label.style_none\n  , text='stoch'\n  , size=size.small\n  , textalign = text.align_left\n  , tooltip = 'sto < 20 - lime\\nsto < 30 - green\\nsto > 80 - darkRed\\nsto > 70 - red\\nelse - blue')\n\nvar label t3 = label.new(na, na, style=label.style_none, text='close > ema 20', size=size.small, textalign = text.align_left, tooltip='close > ema 20 ? green : red')\nvar label t4 = label.new(na, na, style=label.style_none, text='ema 20'        , size=size.small, textalign = text.align_left, tooltip=  'ema 20 rises ? green : red')\nvar label t5 = label.new(na, na, style=label.style_none, text='ema 50'        , size=size.small, textalign = text.align_left, tooltip=  'ema 50 rises ? green : red')\nvar label t6 = label.new(na, na, style=label.style_none, text='ema 100'       , size=size.small, textalign = text.align_left, tooltip= 'ema 100 rises ? green : red')\nvar label t7 = label.new(na, na, style=label.style_none, text='ema 200'       , size=size.small, textalign = text.align_left, tooltip= 'ema 200 rises ? green : red')\n\nvar array<float> Lx  = array.new<float>() \nvar array<float> Rx  = array.new<float>() \nvar array<label> lab = array.new<label>() \nsnowflakes           = array.from('❄️', '❆', '❊', '❋', '❉', '❅')\n\nvar r   = length / rotation\nn       = bar_index \n\nblue    = color.blue \nlime    = color.lime \ngreen   = color.green\nred     = color.red  \ndarkRed = #FF0000    \n\n//-----------------------------------------------------------------------------}      \n//Calculations\n//-----------------------------------------------------------------------------{\nrsi  = ta.rsi  (close           ,  14) \nsto  = ta.stoch(close, high, low,  14) \nm20  = ta.ema  (close           ,  20) \nm50  = ta.ema  (close           ,  50) \nm100 = ta.ema  (close           , 100) \nm200 = ta.ema  (close           , 200) \n\n//-----------------------------------------------------------------------------}      \n//Conditions\n//-----------------------------------------------------------------------------{\n\nmethod c(color col) => color.new(col, 20)\n\nb1    = rsi < 20 ? 2 : rsi < 30 ? 1 : rsi > 80 ? -2 : rsi > 70 ? -1 : rsi > 55 ? 1 : rsi < 45 ? -1 : 0\nc1    = b1 ==  2 ? lime : b1 == 1 ? green : b1 == -2 ? darkRed : b1 == -1 ? red : blue\n\nb2    = sto < 20 ? 2 : sto < 30 ? 1 : sto > 80 ? -2 : sto > 70 ? -1 : sto > 55 ? 1 : sto < 45 ? -1 : 0\nc2    = b2 ==  2 ? lime : b2 == 1 ? green : b2 == -2 ? darkRed : b2 == -1 ? red : blue\n\nb3    =   close > m20      ? 1 : -1, c3 = b3 == 1 ? green : red \nb4    = ta.rising(m20 , 1) ? 1 : -1, c4 = b4 == 1 ? green : red \nb5    = ta.rising(m50 , 1) ? 1 : -1, c5 = b5 == 1 ? green : red \nb6    = ta.rising(m100, 1) ? 1 : -1, c6 = b6 == 1 ? green : red \nb7    = ta.rising(m200, 1) ? 1 : -1, c7 = b7 == 1 ? green : red \n\nsm    = b1 + b2 + b3 + b4 + b5 + b6 + b7\n\ndr    = sm > 6 ? 2 : sm > 5 ? 1 : sm < -6 ? -2 : sm < -5 ? -1 : 0\n\nc0    = dr > 1 ? lime : dr > 0 ? green : dr < -1 ? darkRed : dr < 0 ? red : blue\n\nlast := dr > 1 ? lime : dr > 0 ? green : dr < -1 ? darkRed : dr < 0 ? red : last\n\n//-----------------------------------------------------------------------------}\n// Execution\n//-----------------------------------------------------------------------------{\nif time == chart.left_visible_bar_time\n    leftBar := n\n    for i = 0 to 500 \n        lab.unshift(label.new(na, na, text=snowflakes.get(int(math.random(0, 5))), textcolor=color.silver, color=color.new(na, na)))\n\n    if staticT\n        for i = 0 to length-1\n            Lx.push(math.random(0, i, 14))\n            Rx.push(math.random(0, i, 28))\n        \nvarip dir = 1    \nvar int w = na    \nif time == chart.right_visible_bar_time \n    rightBar      := n \n    mid            = n + offset\n    w             := rightBar - leftBar     \n    left           = array.new<chart.point>(0)\n    right          = array.new<chart.point>(0)\n    base           = array.new<chart.point>(0)\n    float prev_sin = na\n\n    width := math.min(250, width * w / 1000)\n\n    if count  >   w - deerSp   \n        dir   *= -1 \n        count :=  0\n    count     += deerSp\n\n    a0.set_xy(mid               , - 0 ), a0.set_textcolor( c0     ), t0.set_xy(int(mid + (width * 1.5)), - 0 ), t0.set_textcolor(last)\n    a1.set_xy(mid - (width / 20), -270), a1.set_color    ( c1.c() ), t1.set_xy(int(mid + (width * 1.5)), -270), t1.set_textcolor( c1 )\n    a2.set_xy(mid + (width / 10), -350), a2.set_color    ( c2.c() ), t2.set_xy(int(mid + (width * 1.5)), -350), t2.set_textcolor( c2 )\n    a3.set_xy(mid - (width /  6), -520), a3.set_color    ( c3.c() ), t3.set_xy(int(mid + (width * 1.5)), -520), t3.set_textcolor( c3 )\n    a4.set_xy(mid + (width /  7), -570), a4.set_color    ( c4.c() ), t4.set_xy(int(mid + (width * 1.5)), -570), t4.set_textcolor( c4 )\n    a5.set_xy(mid - (width /  2), -780), a5.set_color    ( c5.c() ), t5.set_xy(int(mid + (width * 1.5)), -780), t5.set_textcolor( c5 )\n    a6.set_xy(mid + (width /  3), -850), a6.set_color    ( c6.c() ), t6.set_xy(int(mid + (width * 1.5)), -850), t6.set_textcolor( c6 )\n    a7.set_xy(mid - (width /  4), -920), a7.set_color    ( c7.c() ), t7.set_xy(int(mid + (width * 1.5)), -920), t7.set_textcolor( c7 )\n\n    l1.set_xy(count %  2 == 0                   ? int(mid - (width / math.random(10, 50))) : na, -math.random(120, 170)) \n    l2.set_xy(count %  3 == 0                   ? int(mid + (width / math.random( 4, 30))) : na, -math.random(220, 370)) \n    l3.set_xy(count %  5 == 0                   ? int(mid - (width / math.random( 2, 45))) : na, -math.random(385, 485))\n    l4.set_xy(count %  7 == 0 or count % 3 == 0 ? int(mid + (width / math.random( 3, 35))) : na, -math.random(500, 600))\n\n    l5.set_xy(count %  1 == 0 or count % 2 == 0 ? int(mid - (width / math.random( 2, 50))) : na, -math.random(620, 680))\n    l6.set_xy(count %  1 == 0                   ? int(mid + (width / math.random( 2, 45))) : na, -math.random(700, 880))\n\n    base.push(chart.point.from_index(mid - (width / 10), -length -50))\n    base.push(chart.point.from_index(mid - (width / 10), -length -1 ))\n    base.push(chart.point.from_index(mid + (width / 10), -length -1 ))\n    base.push(chart.point.from_index(mid + (width / 10), -length -50))\n    polyline.new(base, line_color = color.new(#845817, 90), fill_color=color.new(#845817, 50))\n\n    for i = 0 to length-1\n        left_x      = staticT ? Lx.get(i) : math.random(0, i, 14)\n        right_x     = staticT ? Rx.get(i) : math.random(0, i, 28)\n        slope_left  = ((500 - left_x ) + 1) * alpha\n        slope_right = ((500 - right_x) + 1) * alpha\n        \n        left .push(chart.point.from_index(mid                                  ,          -i                            ))\n        left .push(chart.point.from_index(mid + (int(left_x ) / length) * width, math.max(-i - slope_left , -length -25)))\n        right.push(chart.point.from_index(mid                                  ,          -i                            ))\n        right.push(chart.point.from_index(mid - (int(right_x) / length) * width, math.max(-i - slope_right, -length -25)))\n\n        sinx = math.sin(2*math.pi*i/r) * (i/length*width)\n\n        if sinx > prev_sin and i > 100\n\n            label.new(math.round(mid + sinx), -i * (1 + (length / 2 - i) / 7500) \n             , gar, color = color(na), textcolor =cGar, style = label.style_label_center) // ✴︎ ●  ✳︎ ✶  ✶\n\n        prev_sin := sinx\n\n    polyline.new(left, line_color = col)\n    polyline.new(right, line_color = col)\n\n    for i = 0 to lab.size() -1 \n        lb   =   lab.get(i)\n        plus = width + offset\n        x    = n + plus - int(math.random(0, w + plus))\n        y    =         math.random(0, -length), lb.set_xy(x, y)\n        lb.set_textcolor(color.new(color.silver, math.random(15, 50)))\n\n\n    keci = array.new<chart.point>(0)\n\n    startPoint = dir > 0 ? leftBar : rightBar\n    dirCount   = dir * count\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  3))    , -length +  0))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  3))    , -length +100))\n    keci.push(chart.point.from_index(startPoint + dirCount - (dir > 0 ?  1 :  0 )    , -length +100))\n    keci.push(chart.point.from_index(startPoint + dirCount - (dir > 0 ?  1 :  0 )    , -length +  0))\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir * 15))    , -length - 50)) //\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  6))    , -length +  0)) \n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  6))    , -length +240))\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  5))    , -length +300))\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  4))    , -length +360))\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  3))    , -length + (count %  3 == 0 ? 380 : 400))) //\n    keci.push(chart.point.from_index(startPoint + dirCount - (width / (dir *  8))    , -length +240)) \n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  4))    , -length +230))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  3))    , -length +240))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  3))    , -length +450))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  4))    , -length +550)) //\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  6))    , -length +650)) \n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  5))    , -length +450))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  7))    , -length +400))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  8))    , -length +250))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir * 10))    , -length +350)) //\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  7))    , -length +450)) \n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  6))    , -length +500))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width * (dir *  2) / 3), -length + (count %  2 == 0 ? 450 : 470)))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width * (dir *  2) / 3), -length + (count %  2 == 0 ? 400 : 420)))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  2))    , -length +400)) //\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  2))    , -length +350))\n    keci.push(chart.point.from_index(startPoint + dirCount + (width / (dir *  2))    , -length +  0))\n\n    polyline.new(keci, true, true, line_color = color(na), fill_color=color.new(#5f3b04, 23))\n\n//-----------------------------------------------------------------------------}\n// Fallen stars\n//-----------------------------------------------------------------------------{\nch = ta.change(dr)\n\nplotchar(ch and dr != 0 ? high : na, location=location.bottom, color=c0)\n\n//-----------------------------------------------------------------------------}","updated":"2023-12-21T14:53:15.203608Z","version":"1.0"}