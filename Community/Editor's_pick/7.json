{"created":"2024-02-08T17:13:59.58975Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Percent Rank","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © VanHe1sing\r\n\r\n//@version=5\r\nindicator(\"Percent Rank\",  shorttitle = \"PR% ▲▼\",overlay = false, max_lines_count = 72, max_labels_count = 15)\r\n\r\nint length = input.int(60, title='Percent Rank Length', tooltip = \"Percent rank is the percents of how many \r\n                             previous values was less than or equal to the current value of given series.\"\r\n                             , group = \"Percent Rank\")\r\n\r\ncolumns_width = 30-input.int(15, \"Columns Width\", minval = 10, maxval = 20)\r\n\r\n // Symbol's //\r\nsymbol1  = input.symbol(\"CRYPTOCAP:TOTAL\", \"Ticker 1\", group = \"Ticker\")\r\nsymbol2 = input.symbol(\"BTCUSD\", \"Ticker 2\", group = \"Ticker\")\r\nsymbol3 = input.symbol(\"ETHUSD\", \"Ticker 3\", group = \"Ticker\")\r\nsymbol4 = input.symbol(\"BNBUSD\", \"Ticker 4\", group = \"Ticker\")\r\nsymbol5 = input.symbol(\"SOLUSD\", \"Ticker 5\", group = \"Ticker\")\r\nsymbol6 = input.symbol(\"XRPUSD\", \"Ticker 6\", group = \"Ticker\")\r\nsymbol7 = input.symbol(\"ADAUSD\", \"Ticker 7\", group = \"Ticker\")\r\nsymbol8 = input.symbol(\"AVAXUSD\",\"Ticker 8\", group = \"Ticker\")\r\nsymbol9 = input.symbol(\"DOGEUSD\",\"Ticker 9\", group = \"Ticker\")\r\nsymbol10= input.symbol(\"LINKUSD\",\"Ticker 10\",group = \"Ticker\")\r\n\r\n// Request source with percentrank and colors//\r\nrequest(symbol)=>\r\n    p = request.security(symbol, \"\", ta.percentrank(close, length))\r\n    c = color.from_gradient(p, 0, 100, color.red, color.green)\r\n    [p, c]\r\n\r\n// Draw Columns //\r\ncolumn(index, width, src, color)=>\r\n    _1_ = chart.point.from_index(bar_index-index, math.round(src))\r\n    _2_ = chart.point.from_index(bar_index-index, 0)\r\n\r\n    for i = 2 to 8\r\n        line.new(_1_, _2_, width = width*i, color = color.new(color, columns_width*i))\r\n\r\n\r\n// Draw desk and Scales //\r\nd_s()=>\r\n    // Desk and Scale Chart Points\r\n    bar_back = 265\r\n    _1_1 = chart.point.from_index(bar_index, -2)\r\n    _1_2 = chart.point.from_index(bar_index-bar_back, -2)\r\n\r\n    _2_1 = chart.point.from_index(bar_index-6, 2)\r\n    _2_2 = chart.point.from_index(bar_index-bar_back-6, 2)\r\n\r\n    _3_1 = chart.point.from_index(bar_index-bar_back, -2)\r\n    _3_2 = chart.point.from_index(bar_index-bar_back-6, 2)\r\n\r\n    _4_1 = chart.point.from_index(bar_index, -2)\r\n    _4_2 = chart.point.from_index(bar_index-6, 2)\r\n    // Desk \r\n    d_color = color.white\r\n    l1 = line.new(_1_1, _1_2, width = 3, color = color.gray)\r\n    l2 = line.new(_2_1, _2_2, width = 1, color = d_color)\r\n    line.new(_3_1, _3_2, width = 3, color = color.gray)\r\n    line.new(_4_1, _4_2, width = 1, color = d_color)\r\n\r\n    linefill.new(l1, l2, d_color)\r\n\r\n    // Scale Lines \r\n    mid_1 = chart.point.from_index(bar_index-6, 50)\r\n    mid_2 = chart.point.from_index(bar_index-bar_back-6, 50)\r\n    hi_1  = chart.point.from_index(bar_index-6, 100)\r\n    hi_2  = chart.point.from_index(bar_index-bar_back-6, 100)\r\n\r\n    lm1   = line.new(mid_1, mid_2, width = 1, color = color.gray)\r\n    lh1   = line.new(hi_1,   hi_2, width = 1, color = color.white)\r\n    linefill.new(lm1, lh1, #23432423)\r\n    linefill.new(lm1, l2, #43232323)\r\n\r\n// Draw label //\r\nlbl(index, symbol, pr)=>\r\n    sym = str.split(symbol, \":\")\r\n    label.new(bar_index-index, 0, sym.get(1), \r\n                         style = label.style_label_upper_left, textcolor = color.white, color = color.rgb(72, 74, 82))\r\n\r\n    p_r =  ta.change(pr, length>=50 ? 50 : length) >= 0 ? \r\n           str.tostring(math.round(pr))+\"% ▲\"\r\n         : str.tostring(math.round(pr))+\"% ▼\"\r\n    color = pr > 50 ? color.rgb(172, 247, 174) : color.rgb(243, 174, 174)\r\n    label.new(bar_index-index, pr, p_r, style = label.style_none, textcolor = color)\r\n\r\n// Request Tickers and Colors //\r\n[pr_1, color1] = request(symbol1)\r\n[pr_2, color2] = request(symbol2)\r\n[pr_3, color3] = request(symbol3)\r\n[pr_4, color4] = request(symbol4)\r\n[pr_5, color5] = request(symbol5)\r\n[pr_6, color6] = request(symbol6)\r\n[pr_7, color7] = request(symbol7)\r\n[pr_8, color8] = request(symbol8)\r\n[pr_9, color9] = request(symbol9)\r\n[pr_10,color10] = request(symbol10)\r\n\r\n// Plot //\r\nif barstate.islast\r\n    d_s()\r\n    index = 25\r\n    column(index,  10,pr_1, color1)\r\n    column(index*2, 8,pr_2, color2)\r\n    column(index*3, 8,pr_3, color3)\r\n    column(index*4, 8,pr_4, color4)\r\n    column(index*5, 8,pr_5, color5)\r\n    column(index*6, 8,pr_6, color6)\r\n    column(index*7, 8,pr_7, color7)\r\n    column(index*8, 8,pr_8, color8)\r\n    column(index*9, 8,pr_9, color9)\r\n    column(index*10,8,pr_10,color10)\r\n\r\n    // Labels\r\n    lbl(index,   symbol1, pr_1)\r\n    lbl(index*2, symbol2, pr_2)\r\n    lbl(index*3, symbol3, pr_3)\r\n    lbl(index*4, symbol4, pr_4)\r\n    lbl(index*5, symbol5, pr_5)\r\n    lbl(index*6, symbol6, pr_6)\r\n    lbl(index*7, symbol7, pr_7)\r\n    lbl(index*8, symbol8, pr_8)\r\n    lbl(index*9, symbol9, pr_9)\r\n    lbl(index*10,symbol10,pr_10)\r\n\r\n// ▼▲ //","updated":"2024-02-08T17:13:59.58975Z","version":"1.0"}