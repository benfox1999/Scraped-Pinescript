{"created":"2023-11-14T15:10:02.230453Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Liquidity Price Depth Chart [LuxAlgo]","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\n// © LuxAlgo\n\n//@version=5\nindicator(\"Liquidity Price Depth Chart [LuxAlgo]\", \"LuxAlgo - Liquidity Price Depth Chart\", overlay = true, max_labels_count = 500)\n//-----------------------------------------------------------------------------}\n//Settings\n//-----------------------------------------------------------------------------{\n//Bullish Elements\nshowBullMax = input(true, 'Bullish Price Highest Volume Location', group = 'Bullish Elements')\nshowBullPer = input(true, 'Bullish Volume %', group = 'Bullish Elements')\n\nbullCss     = input(#089981, 'Bullish Prices', inline = 'bull', group = 'Bullish Elements')\nbullFillCss = input(color.new(#089981, 90), 'Area', inline = 'bull', group = 'Bullish Elements')\n\n//Bearish Elements\nshowBearMax = input(true, 'Bearish Price Highest Volume Location', group = 'Bearish Elements')\nshowBearPer = input(true, 'Bearish Volume %', group = 'Bearish Elements')\n\nbearCss     = input(#f23645, 'Bearish Prices', inline = 'bear', group = 'Bearish Elements')\nbearFillCss = input(color.new(#f23645, 90), 'Area', inline = 'bear', group = 'Bearish Elements')\n\n//Misc\npadding = input.float(5, 'Volume % Box Padding', minval = 0, maxval = 100, group = 'Misc') / 100\n\n//-----------------------------------------------------------------------------}\n//Populate maps\n//-----------------------------------------------------------------------------{\nvar int x1 = na\n\nvar float max = na, var float max_bull_vol = na\nvar float min = na, var float max_bear_vol = na\n\nvar max_bull_vlvl = line.new(na,na,na,na, color = bullCss, extend = extend.both, style = line.style_dotted)\nvar max_bear_vlvl = line.new(na,na,na,na, color = bearCss, extend = extend.both, style = line.style_dotted)\n\nvar bull_map = map.new<float, float>()\nvar bear_map = map.new<float, float>()\n\nn = bar_index\n\nif time == chart.left_visible_bar_time\n    x1 := n\n    max := high, max_bull_vol := close > open ? volume : 0.\n    min := low , max_bear_vol := close < open ? volume : 0.\n\n//Populate price/volume map\nif time <= chart.right_visible_bar_time and time >= chart.left_visible_bar_time\n    if close > open \n        bull_map.put(close, volume)\n        max_bull_vol := math.max(volume, max_bull_vol)\n\n        if max_bull_vol == volume and showBullMax\n            max_bull_vlvl.set_xy1(n, close + syminfo.mintick)\n            max_bull_vlvl.set_xy2(n, close - syminfo.mintick)\n\n    else if close < open \n        bear_map.put(close, volume)\n        max_bear_vol := math.max(volume, max_bear_vol)\n\n        if max_bear_vol == volume and showBearMax\n            max_bear_vlvl.set_xy1(n, close + syminfo.mintick)\n            max_bear_vlvl.set_xy2(n, close - syminfo.mintick)\n\n    //Get maximum/minimum wicks in visible range\n    max := math.max(high, max)\n    min := math.min(low, min)\n\n//-----------------------------------------------------------------------------}\n//Set cumulative areas\n//-----------------------------------------------------------------------------{\nif time == chart.right_visible_bar_time\n    //Sort bull map keys\n    bull_sorted = bull_map.keys()\n    bull_sorted.sort(order.descending)\n    \n    //Sort bear map keys\n    bear_sorted = bear_map.keys()\n    bear_sorted.sort(order.descending)\n\n    //Get bullish/bearish volume sums\n    bull_sumv = bull_map.values().sum()\n    bear_sumv = bear_map.values().sum()\n\n    bull_idx = 0.\n    bear_idx = 0.\n    bull_coordinates = array.new<chart.point>(0)\n    bear_coordinates = array.new<chart.point>(0)\n\n    bull_coordinates.push(chart.point.from_index(x1, max))\n    bear_coordinates.push(chart.point.from_index(n, max))\n    \n    //Cumulated bullish volume\n    for element in bull_sorted\n        bull_idx += bull_map.get(element) / bull_sumv\n        chart_point = chart.point.from_index(x1 + int(bull_idx * (n - x1) / 2), element)\n\n        if bull_map.get(element) == max_bull_vol and showBullMax\n            line.new(x1, element, n, element, color = bullCss, style = line.style_dotted)\n\n        bull_coordinates.push(chart_point)\n\n        //Point label\n        label.new(chart_point\n          , color = color(na)\n          , style = label.style_label_center\n          , text = '•'\n          , textcolor = bullCss)\n\n    //Cumulated bearish volume\n    for [index, element] in bear_sorted\n        bear_idx += bear_map.get(element) / bear_sumv\n        chart_point = chart.point.from_index(n - int(bear_idx * (n - x1) / 2), element)\n\n        if bear_map.get(element) == max_bear_vol and showBearMax\n            line.new(x1, element, n, element, color = bearCss, style = line.style_dotted)\n\n        bear_coordinates.push(chart_point)\n\n        //Point label\n        label.new(chart_point\n          , color = color(na)\n          , style = label.style_label_center\n          , text = '•'\n          , textcolor = bearCss)\n\n    //Set horizontal min line for valid fill\n    bull_coordinates.push(chart.point.from_index(x1 + (n - x1) / 2, min))\n    bull_coordinates.push(chart.point.from_index(x1, min))\n\n    bear_coordinates.push(chart.point.from_index(n - (n - x1) / 2, min))\n    bear_coordinates.push(chart.point.from_index(n, min))\n\n    //Create polylines\n    polyline.new(bull_coordinates, line_color = bullCss, fill_color = bullFillCss)\n    polyline.new(bear_coordinates, line_color = bearCss, fill_color = bearFillCss)\n\n    //Bull % Boxes\n    if showBullPer\n        bull_vper = bull_sumv / (bull_sumv + bear_sumv)\n\n        box.new(x1, min, x1 + (n - x1) / 2, min - padding * (max - min)\n          , bullCss\n          , bgcolor = na)\n        \n        box.new(x1, min, x1 + int((n - x1) / 2 * bull_vper), min - padding * (max - min)\n          , na\n          , bgcolor = bullCss\n          , text_color = color.white\n          , text = str.tostring(bull_vper * 100, format.percent)\n          , text_size = size.small)\n    \n    //Bear % Boxes\n    if showBearPer\n        bear_vper = bear_sumv / (bull_sumv + bear_sumv)\n\n        box.new(n - (n - x1) / 2, min, n, min - padding * (max - min)\n          , bearCss\n          , bgcolor = na)\n\n        box.new(n - int((n - x1) / 2 * bear_vper), min, n, min - padding * (max - min)\n          , na\n          , bgcolor = bearCss\n          , text_color = color.white\n          , text = str.tostring(bear_vper * 100, format.percent)\n          , text_size = size.small)\n\n//-----------------------------------------------------------------------------}","updated":"2023-11-14T15:10:02.230453Z","version":"1.0"}