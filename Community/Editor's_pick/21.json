{"created":"2024-02-03T09:35:25.159203Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"4.0","scriptAccess":"open_no_auth","scriptName":"Modern Portfolio Theory","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © VanHe1sing\r\n\r\n//@version=5\r\nindicator(\"Modern Portfolio Theory\", shorttitle = \"[MPT]\", max_labels_count = 500)\r\n\r\n//======================================================================================================================}\r\n// - User Inputs\r\n//======================================================================================================================{\r\n\r\nint BarScale = input(150, \"Bar Scale\")\r\nfloat rfr    = input.float(0.048, \"Risk-Free Rate\")\r\nint strt_year= input(2010, \"Portfolio Start Year\")\r\n\r\ndata         = timestamp(strt_year, 01, 01, 0, 0)\r\n\r\nfloat weight1 = input.float(10, \"Weight 1\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight2 = input.float(22, \"Weight 2\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight3 = input.float(5, \"Weight 3\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight4 = input.float(27, \"Weight 4\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight5 = input.float(10, \"Weight 5\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight6 = input.float(5, \"Weight 6\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight7 = input.float(3, \"Weight 7\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight8 = input.float(3, \"Weight 8\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight9 = input.float(5, \"Weight 9\", group = \"Weight's\", inline = \"W\") / 100\r\nfloat weight10= input.float(10, \"Weight 10\", group = \"Weight's\", inline = \"W\") / 100\r\n\r\nbool use_sym1 = input.bool(true, \"Use Symbol 1?\", inline = \"Use?\")\r\nbool use_sym2 = input.bool(true, \"Use Symbol 2?\", inline = \"Use?\")\r\nbool use_sym3 = input.bool(true, \"Use Symbol 3?\", inline = \"Use?\")\r\nbool use_sym4 = input.bool(true, \"Use Symbol 4?\", inline = \"Use?\")\r\nbool use_sym5 = input.bool(true, \"Use Symbol 5?\", inline = \"Use?\")\r\nbool use_sym6 = input.bool(true, \"Use Symbol 6?\", inline = \"Use?\")\r\nbool use_sym7 = input.bool(true, \"Use Symbol 7?\", inline = \"Use?\")\r\nbool use_sym8 = input.bool(true, \"Use Symbol 8?\", inline = \"Use?\")\r\nbool use_sym9 = input.bool(true, \"Use Symbol 9?\", inline = \"Use?\")\r\nbool use_sym10= input.bool(true, \"Use Symbol 10?\", inline = \"Use?\")\r\n\r\nsym1 = \tinput.symbol(\"\tINDEX:BTCUSD\t\", \"\tSymbol 1\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym2 = \tinput.symbol(\"\tINDEX:ETHUSD\t\", \"\tSymbol 2\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym3 = \tinput.symbol(\"\tBINANCE:AAVEUSD\t\", \"\tSymbol 3\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym4 = \tinput.symbol(\"\tBINANCE:BNBUSD\t\", \"\tSymbol 4\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym5 = \tinput.symbol(\"\tBINANCE:SOLUSD\t\", \"\tSymbol 5\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym6 = \tinput.symbol(\"\tBINANCE:XRPUSD\t\", \"\tSymbol 6\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym7 = \tinput.symbol(\"\tBINANCE:ETCUSD\t\", \"\tSymbol 7\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym8 = \tinput.symbol(\"\tBINANCE:ADAUSD\t\", \"\tSymbol 8\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym9 = \tinput.symbol(\"\tBINANCE:AVAXUSD\t\", \"\tSymbol 9\t\", inline = \"Sym\", group = \"Symbol's\")\r\nsym10 = input.symbol(\"\tBINANCE:RUNEUSD\t\", \"\tSymbol 10\t\", inline = \"Sym\", group = \"Symbol's\")\r\n\r\n//======================================================================================================================}\r\n// - Declaration of Functions\r\n//======================================================================================================================{\r\n// Clean symbol from exchange name\r\nclean_symbol(symbol)=>\r\n    sym = str.split(symbol, \":\")\r\n    sym.get(1)\r\n\r\n// Risk and Return Function\r\nrisk_return(src)=>\r\n    var returns_array   = array.new_float(0)\r\n    float root          = math.sqrt(365)\r\n\r\n    if time >= data\r\n        daily_return = 0.0\r\n        //Daily Asset Returns \r\n        //formula -> (previous_value/current_value - 1)\r\n        daily_return := src/src[1] - 1\r\n        returns_array.push(daily_return)\r\n\r\n    X = returns_array.stdev()*root\r\n    Y = returns_array.avg()*root\r\n\r\n    [X, Y]\r\n\r\n// Scatter Plot\r\nscatter(float xPosition, float yPosition, color  Color,\r\n             int BarScale, string symbol, nodeChar = \"⦿\", nodeSize1 =  size.small, nodeSize =  size.normal) =>\r\n    if barstate.islast\r\n        float Y2 =     nz(yPosition)\r\n        int   X2 = int(nz(xPosition) * BarScale)\r\n        X2 := math.min(500, X2) + bar_index\r\n   \r\n        node = label.new(X2, Y2, nodeChar,  size=nodeSize,\r\n                             color=#00000000, textcolor=Color,\r\n                             style=label.style_label_center)\r\n\r\n        nodeChar1 =  symbol\r\n        label.new(X2+10, Y2, nodeChar1,  size=nodeSize1,\r\n                         color=#00000000, textcolor=color.new(Color, 50),\r\n                         style=label.style_label_center)\r\n\r\n        label.new(bar_index, Y2, text= symbol + \"  \" + str.tostring(math.round(yPosition,3)), \r\n                 style = label.style_label_right, size = size.small, color = Color, textcolor = #000000)\r\n\r\n        label.new(X2, 0, text= str.tostring(math.round(xPosition-1,2)), \r\n                 style = label.style_label_up, size = size.small, color = Color, textcolor = #000000)\r\n\r\n//======================================================================================================================}\r\n// - X & Y Values\r\n//======================================================================================================================{\r\n[\tX1\t,\tY1\t] = request.security(\tsym1\t,\"\", risk_return(close))\r\n[\tX2\t,\tY2\t] = request.security(\tsym2\t,\"\", risk_return(close))\r\n[\tX3\t,\tY3\t] = request.security(\tsym3\t,\"\", risk_return(close))\r\n[\tX4\t,\tY4\t] = request.security(\tsym4\t,\"\", risk_return(close))\r\n[\tX5\t,\tY5\t] = request.security(\tsym5\t,\"\", risk_return(close))\r\n[\tX6\t,\tY6\t] = request.security(\tsym6\t,\"\", risk_return(close))\r\n[\tX7\t,\tY7\t] = request.security(\tsym7\t,\"\", risk_return(close))\r\n[\tX8\t,\tY8\t] = request.security(\tsym8\t,\"\", risk_return(close))\r\n[\tX9\t,\tY9\t] = request.security(\tsym9\t,\"\", risk_return(close))\r\n[\tX10\t,\tY10\t] = request.security(\tsym10\t,\"\", risk_return(close))\r\n\r\n//======================================================================================================================}\r\n// - Plots and AVG Portfolio ★\r\n//======================================================================================================================{\r\n\r\nvar tbl = table.new(position.bottom_right, 15, 15, frame_color = #474747, frame_width = 2)\r\n\r\ntable.cell(tbl, 0, 0, \"Symbol's\", text_color = #f3f3f3)\r\ntable.cell(tbl, 0, 1, clean_symbol(\tsym1\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 2, clean_symbol(\tsym2\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 3, clean_symbol(\tsym3\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 4, clean_symbol(\tsym4\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 5, clean_symbol(\tsym5\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 6, clean_symbol(\tsym6\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 7, clean_symbol(\tsym7\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 8, clean_symbol(\tsym8\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 9, clean_symbol(\tsym9\t), text_color = color.gray)\r\ntable.cell(tbl, 0, 10,clean_symbol(\tsym10\t), text_color = color.gray)\r\n\r\ntable.cell(tbl, 1, 0, \"Weight's\", text_color = #f3f3f3)\r\ntable.cell(tbl, 1, 1, str.tostring(use_sym1 ? weight1*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 2, str.tostring(use_sym2 ?weight2*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 3, str.tostring(use_sym3 ?weight3*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 4, str.tostring(use_sym4 ?weight4*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 5, str.tostring(use_sym5 ?weight5*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 6, str.tostring(use_sym6 ?weight6*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 7, str.tostring(use_sym7 ?weight7*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 8, str.tostring(use_sym8 ?weight8*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 9, str.tostring(use_sym9 ?weight9*100 : 0, format.percent), text_color = color.gray)\r\ntable.cell(tbl, 1, 10,str.tostring(use_sym10 ?weight10*100 : 0, format.percent), text_color = color.gray)\r\n\r\ntable.cell(tbl, 0, 11, \"Total\", text_color = #f3f3f3)\r\n\r\nsum = ((use_sym1 ? weight1 : 0)\r\n     + (use_sym2 ? weight2 : 0)\r\n     + (use_sym3 ? weight3 : 0)\r\n     + (use_sym4 ? weight4 : 0)\r\n     + (use_sym5 ? weight5 : 0)\r\n     + (use_sym6 ? weight6 : 0)\r\n     + (use_sym7 ? weight7 : 0)\r\n     + (use_sym8 ? weight8 : 0)\r\n     + (use_sym9 ? weight9 : 0)\r\n     + (use_sym10 ? weight10 : 0)) * 100\r\n\r\ntable.cell(tbl, 1, 11, \r\n     str.tostring(sum, format.percent), \r\n     text_color = sum < 100 ? color.orange : sum == 100 ? color.green : color.red, \r\n     text_size = sum == 100 ? size.large : sum > 100 ? size.huge : size.large)\r\nif sum < 100\r\n    table.cell(tbl, 0, 12, \"Cash\", text_color = #f3f3f3)\r\n    table.cell(tbl, 1, 12, str.tostring(100-sum, format.percent), text_color = #f3f3f3, text_size = size.large)\r\n\r\n//Gradient colors of scatter plot marks\r\ny_max = math.max(Y1, Y2, Y3,Y4,Y5,Y6,Y7,Y8,Y9,Y10)\r\n\r\ny_min = math.min(Y1, Y2, Y3,Y4,Y5,Y6,Y7,Y8,Y9,Y10)\r\n\r\ngradient(val)=>\r\n    color_ = color.from_gradient(val, y_min,\r\n                                 y_max, color.rgb(135, 223, 138), color.aqua)\r\n\r\ncolor_1= gradient(\tY1\t), scatter(\tX1\t,\tY1\t,\tcolor_1\t, BarScale, clean_symbol(\tsym1\t))\r\ncolor_2= gradient(\tY2\t), scatter(\tX2\t,\tY2\t,\tcolor_2\t, BarScale, clean_symbol(\tsym2\t))\r\ncolor_3= gradient(\tY3\t), scatter(\tX3\t,\tY3\t,\tcolor_3\t, BarScale, clean_symbol(\tsym3\t))\r\ncolor_4= gradient(\tY4\t), scatter(\tX4\t,\tY4\t,\tcolor_4\t, BarScale, clean_symbol(\tsym4\t))\r\ncolor_5= gradient(\tY5\t), scatter(\tX5\t,\tY5\t,\tcolor_5\t, BarScale, clean_symbol(\tsym5\t))\r\ncolor_6= gradient(\tY6\t), scatter(\tX6\t,\tY6\t,\tcolor_6\t, BarScale, clean_symbol(\tsym6\t))\r\ncolor_7= gradient(\tY7\t), scatter(\tX7\t,\tY7\t,\tcolor_7\t, BarScale, clean_symbol(\tsym7\t))\r\ncolor_8= gradient(\tY8\t), scatter(\tX8\t,\tY8\t,\tcolor_8\t, BarScale, clean_symbol(\tsym8\t))\r\ncolor_9= gradient(\tY9\t), scatter(\tX9\t,\tY9\t,\tcolor_9\t, BarScale, clean_symbol(\tsym9\t))\r\ncolor_10= gradient(\tY10\t), scatter(\tX10\t,\tY10\t,\tcolor_10, BarScale, clean_symbol(\tsym10\t))\r\n\r\n// Portfolio\r\n\r\n// Risk and Return of Portfolio\r\nx_portfolio = (use_sym1 ? X1*weight1 : 0)\r\n + (use_sym2 ? X2*weight2 : 0)\r\n + (use_sym3 ? X3*weight3 : 0)\r\n + (use_sym4 ? X4*weight4 : 0)\r\n + (use_sym5 ? X5*weight5 : 0)\r\n + (use_sym6 ? X6*weight6 : 0)\r\n + (use_sym7 ? X7*weight7 : 0)\r\n + (use_sym8 ? X8*weight8 : 0)\r\n + (use_sym9 ? X9*weight9 : 0)\r\n + (use_sym10 ? X10*weight10 : 0)\r\n\r\ny_portfolio = (use_sym1 ? Y1*weight1 : 0)  \r\n + (use_sym2 ? Y2*weight2 : 0)\r\n + (use_sym3 ? Y3*weight3 : 0)\r\n + (use_sym4 ? Y4*weight4 : 0)\r\n + (use_sym5 ? Y5*weight5 : 0)\r\n + (use_sym6 ? Y6*weight6 : 0)\r\n + (use_sym7 ? Y7*weight7 : 0)\r\n + (use_sym8 ? Y8*weight8 : 0)\r\n + (use_sym9 ? Y9*weight9 : 0)\r\n + (use_sym10 ? Y10*weight10 : 0)\r\n\r\n\r\n// Plot of Portfolio\r\nscatter(x_portfolio, y_portfolio, color.red, BarScale, \"Portfolio\", \"★\", size.small, size.huge)\r\n\r\n// Axis lines with labels\r\nif barstate.islast\r\n    x_max = math.round(math.max(X1,X2,X3,X4,X5,X6,X7,X8,X9,X10)*250)\r\n    y_max := y_max+(y_max/10)\r\n\r\n    X = bar_index\r\n    X2 = int(nz(x_portfolio) * BarScale)\r\n    X2 := math.min(500, X2) + bar_index\r\n\r\n    // Background\r\n    box.new(X+x_max, y_max, X, 0, #ffffff00, bgcolor = #ffffff07)\r\n\r\n    // Return Axis\r\n    label.new(X, y_max, \"RETURN (Mean Daily Returns)\", textcolor = #d6d6d6, style = label.style_none)\r\n    line.new(X, 0.0, X, y_max, color=color.gray,\r\n                     style=line.style_solid,  width=1)\r\n \r\n    // Risk Axis\r\n    label.new(X+x_max, 0, \"RISK (Standart Deviation)\", textcolor = #d6d6d6, style = label.style_none)\r\n    line.new(X+x_max, 0.0, X, 0.0, color=color.gray,\r\n                     style=line.style_solid,  width=1)\r\n\r\n    // Legend\r\n    y_max := y_max - (y_max/10)\r\n    x_max := x_max + 50\r\n    label.new(X+x_max, y_max, \"  ★ - Manually Optimized Portfolio\", textcolor = color.red, style = label.style_none)\r\n    label.new(X+x_max, y_max-y_max/35, \"⦿ - Coins (X - Risk, Y - Return)\", textcolor = color.rgb(82, 255, 232), style = label.style_none)\r\n    label.new(X+x_max, y_max-y_max/15, \"Portfolio from \" + str.tostring(strt_year), textcolor = #6b6b6b, style = label.style_none)\r\n\r\n    // Capital allocation line (CAL)\r\n    line.new(X2, 0.0, X2, y_portfolio, color=#474747,\r\n                     style=line.style_dotted,  width=1)\r\n                     \r\n    line.new(X2, y_portfolio, X, y_portfolio, color=#474747,\r\n                     style=line.style_dotted,  width=1)\r\n    //(CAL) and risk-free rate\r\n    line.new(X2, y_portfolio, X, 0+rfr, color=#474747,\r\n                     style=line.style_dashed,  width=1)\r\n\r\n    label.new(X+15, 0+rfr, \"Risk-Free Rate \\n\" + str.tostring(rfr*100, format.percent), textcolor = #d6d6d6, style = label.style_none)\r\n\r\n    \r\n//★","updated":"2024-02-03T09:35:25.159203Z","version":"4.0"}