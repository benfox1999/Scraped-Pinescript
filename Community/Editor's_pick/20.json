{"created":"2024-01-26T13:53:04.81047Z","extra":{"kind":"study","sourceInputsCount":4},"lastVersionMaj":"6.0","scriptAccess":"open_no_auth","scriptName":"Auto Chart Patterns [Trendoscope®]","source":"// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\r\n// © Trendoscope Pty Ltd\r\n//                                       ░▒             \r\n//                                  ▒▒▒   ▒▒      \r\n//                              ▒▒▒▒▒     ▒▒      \r\n//                      ▒▒▒▒▒▒▒░     ▒     ▒▒          \r\n//                  ▒▒▒▒▒▒           ▒     ▒▒          \r\n//             ▓▒▒▒       ▒        ▒▒▒▒▒▒▒▒▒▒▒  \r\n//   ▒▒▒▒▒▒▒▒▒▒▒ ▒        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒         \r\n//   ▒  ▒       ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░        \r\n//   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒         \r\n//   ▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒                       \r\n//    ▒▒▒▒▒         ▒▒▒▒▒▒▒                            \r\n//                 ▒▒▒▒▒▒▒▒▒                           \r\n//                ▒▒▒▒▒ ▒▒▒▒▒                          \r\n//               ░▒▒▒▒   ▒▒▒▒▓      ████████╗██████╗ ███████╗███╗   ██╗██████╗  ██████╗ ███████╗ ██████╗ ██████╗ ██████╗ ███████╗\r\n//              ▓▒▒▒▒     ▒▒▒▒      ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝\r\n//              ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒        ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║██║   ██║███████╗██║     ██║   ██║██████╔╝█████╗ \r\n//             ▒▒▒▒▒       ▒▒▒▒▒       ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██║   ██║╚════██║██║     ██║   ██║██╔═══╝ ██╔══╝  \r\n//            ▒▒▒▒▒         ▒▒▒▒▒      ██║   ██║  ██║███████╗██║ ╚████║██████╔╝╚██████╔╝███████║╚██████╗╚██████╔╝██║     ███████╗\r\n//             ▒▒             ▒                        \r\n//@version=5\r\n\r\nimport HeWhoMustNotBeNamed/utils/1 as ut\r\nimport Trendoscope/ohlc/1 as o\r\nimport Trendoscope/LineWrapper/1 as wr\r\nimport Trendoscope/ZigzagLite/2 as zg\r\n\r\nimport Trendoscope/abstractchartpatterns/5 as p\r\nimport Trendoscope/basechartpatterns/6 as bp\r\n\r\nindicator(\"Auto Chart Patterns [Trendoscope®]\", \"ACP [Trendoscope®]\", overlay = true, max_lines_count=500, max_labels_count=500, max_polylines_count = 100)\r\n\r\nopenSource = input.source(open, '', inline='cs', group='Source', display = display.none)\r\nhighSource = input.source(high, '', inline='cs', group='Source', display = display.none)\r\nlowSource = input.source(low, '', inline='cs', group='Source', display = display.none)\r\ncloseSource = input.source(close, '', inline='cs', group='Source', display = display.none, tooltip = 'Source on which the zigzag and pattern calculation is done')\r\n\r\nuseZigzag1 = input.bool(true, '', group = 'Zigzag', inline='z1', display = display.none)\r\nzigzagLength1 = input.int(8, step=5, minval=1, title='', group='Zigzag', inline='z1', display=display.none)\r\ndepth1 = input.int(55, \"\", step=25, maxval=500, group='Zigzag', inline='z1', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 1')\r\n\r\nuseZigzag2 = input.bool(false, '', group = 'Zigzag', inline='z2', display = display.none)\r\nzigzagLength2 = input.int(13, step=5, minval=1, title='', group='Zigzag', inline='z2', display=display.none)\r\ndepth2 = input.int(34, \"\", step=25, maxval=500, group='Zigzag', inline='z2', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 2')\r\n\r\nuseZigzag3 = input.bool(false, '', group = 'Zigzag', inline='z3', display = display.none)\r\nzigzagLength3 = input.int(21, step=5, minval=1, title='', group='Zigzag', inline='z3', display=display.none)\r\ndepth3 = input.int(21, \"\", step=25, maxval=500, group='Zigzag', inline='z3', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 3')\r\n\r\nuseZigzag4 = input.bool(false, '', group = 'Zigzag', inline='z4', display = display.none)\r\nzigzagLength4 = input.int(34, step=5, minval=1, title='', group='Zigzag', inline='z4', display=display.none)\r\ndepth4 = input.int(13, \"\", step=25, maxval=500, group='Zigzag', inline='z4', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 4')\r\n\r\nnumberOfPivots = input.int(5, \"Number of Pivots\", [5, 6], 'Number of pivots used for pattern identification.', group='Scanning', display = display.none)\r\nerrorThresold = input.float(20.0, 'Error Threshold', 0.0, 100, 5, 'Error Threshold for trend line validation', group='Scanning', display = display.none)\r\nflatThreshold = input.float(20.0, 'Flat Threshold', 0.0, 30, 5, 'Ratio threshold to identify the slope of trend lines', group='Scanning', display = display.none)\r\nlastPivotDirection = input.string('both', 'Last Pivot Direction', ['up', 'down', 'both', 'custom'], 'Filter pattern based on the last pivot direction. '+\r\n                             'This option is useful while backtesting individual patterns. When custom is selected, then the individual pattern last pivot direction setting is used',\r\n                             group='Scanning', display=display.none)\r\ncheckBarRatio = input.bool(true, 'Verify Bar Ratio ', 'Along with checking the price, also verify if the bars are proportionately placed.', group='Scanning', inline = 'br', display = display.none)\r\nbarRatioLimit = input.float(0.382, '', group='Scanning', display = display.none, inline='br')\r\navoidOverlap = input.bool(true, 'Avoid Overlap',  group='Scanning', inline='a', display = display.none)\r\nrepaint = input.bool(false, 'Repaint', 'Avoid Overlap - Will not consider the pattern if it starts before the end of an existing pattern\\n\\n'+\r\n                     'Repaint - Uses real time bars to search for patterns. If unselected, then only use confirmed bars.', \r\n                     group='Scanning', inline='a', display = display.none)\r\n\r\nallowChannels = input.bool(true, 'Channels', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g')\r\nallowWedges = input.bool(true, 'Wedge', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g')\r\nallowTriangles = input.bool(true, 'Triangle', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g',\r\n         tooltip = 'Channels - Trend Lines are parralel to each other creating equidistance price channels'+\r\n                     '\\n\\t- Ascending Channel\\n\\t- Descending Channel\\n\\t- Ranging Channel'+\r\n                     '\\n\\nWedges - Trend lines are either converging or diverging from each other and both the trend lines are moving in the same direction'+\r\n                     '\\n\\t- Rising Wedge (Expanding)\\n\\t- Rising Wedge (Contracting)\\n\\t- Falling Wedge (Expanding)\\n\\t- Falling Wedge (Contracting)'+\r\n                     '\\n\\nTriangles - Trend lines are either converging or diverging from each other and both trend lines are moving in different directions'+\r\n                     '\\n\\t- Converging Triangle\\n\\t- Diverging Triangle\\n\\t- Ascending Triangle (Contracting)\\n\\t- Ascending Triangle (Expanding)\\n\\t- Descending Triangle(Contracting)\\n\\t- Descending Triangle(Expanding)')\r\n\r\nallowRisingPatterns = input.bool(true, 'Rising', group='Pattern Groups - Direction', display = display.none, inline = 'd')\r\nallowFallingPatterns = input.bool(true, 'Falling', group='Pattern Groups - Direction', display = display.none, inline = 'd')\r\nallowNonDirectionalPatterns = input.bool(true, 'Flat/Bi-Directional', group='Pattern Groups - Direction', display = display.none, inline = 'd',\r\n         tooltip = 'Rising - Either both trend lines are moving up or one trend line is flat and the other one is moving up.'+\r\n                     '\\n\\t- Ascending Channel\\n\\t- Rising Wedge (Expanding)\\n\\t- Rising Wedge (Contracting)\\n\\t- Ascending Triangle (Expanding)\\n\\t- Ascending Triangle (Contracting)'+\r\n                     '\\n\\nFalling - Either both trend lines are moving down or one trend line is flat and the other one is moving down.'+\r\n                     '\\n\\t- Descending Channel\\n\\t- Falling Wedge (Expanding)\\n\\t- Falling Wedge (Contracting)\\n\\t- Descending Triangle (Expanding)\\n\\t- Descending Triangle (Contracting)'+\r\n                     '\\n\\nFlat/Bi-Directional - Trend Lines move in different directions or both flat.'+\r\n                     '\\n\\t- Ranging Channel\\n\\t- Converging Triangle\\n\\t- Diverging Triangle')\r\n\r\nallowExpandingPatterns = input.bool(true, 'Expanding', group='Pattern Groups - Formation Dynamics', display = display.none, inline = 'f')\r\nallowContractingPatterns = input.bool(true, 'Contracting', group='Pattern Groups - Formation Dynamics', display = display.none, inline='f')\r\nallowParallelChannels = input.bool(true, 'Parallel', group = 'Pattern Groups - Formation Dynamics', display = display.none, inline = 'f',\r\n         tooltip = 'Expanding - Trend Lines are diverging from each other.'+\r\n                     '\\n\\t- Rising Wedge (Expanding)\\n\\t- Falling Wedge (Expanding)\\n\\t- Ascending Triangle (Expanding)\\n\\t- Descending Triangle (Expanding)\\n\\t- Diverging Triangle'+\r\n                     '\\n\\nContracting - Trend Lines are converging towards each other.'+\r\n                     '\\n\\t- Rising Wedge (Contracting)\\n\\t- Falling Wedge (Contracting)\\n\\t- Ascending Triangle (Contracting)\\n\\t- Descending Triangle (Contracting)\\n\\t- Converging Triangle'+\r\n                     '\\n\\nParallel - Trend Lines are almost parallel to each other.'+\r\n                     '\\n\\t- Ascending Channel\\n\\t- Descending Channel\\n\\t- Ranging Channel')\r\n\r\nallowUptrendChannel = input.bool(true, 'Ascending  ', group = 'Price Channels', inline='uc', display = display.none)\r\nupTrendChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='uc', group='Price Channels', display = display.none,\r\n             tooltip='Enable Ascending Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowDowntrendChannel = input.bool(true, 'Descending', group = 'Price Channels', inline='dc', display = display.none)\r\ndownTrendChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='dc', group='Price Channels', display = display.none,\r\n             tooltip='Enable Descending Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowRangingChannel = input.bool(true, 'Ranging   ', group = 'Price Channels', inline='rc', display = display.none)\r\nrangingChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='rc', group='Price Channels', display = display.none,\r\n             tooltip='Enable Ranging Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowRisingWedgeExpanding = input.bool(true, 'Rising    ', inline='rwe', group = 'Expanding Wedges', display = display.none)\r\nrisingWedgeExpandingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='rwe', group='Expanding Wedges', display = display.none,\r\n             tooltip='Enable Rising Wedge (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowFallingWedgeExpanding = input.bool(true, 'Falling   ', inline='fwe', group = 'Expanding Wedges', display = display.none)\r\nfallingWedgeExpandingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='fwe', group='Expanding Wedges', display = display.none,\r\n             tooltip='Enable Falling Wedge (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowRisingWedgeContracting = input.bool(true, 'Rising    ', inline='rwc', group = 'Contracting Wedges', display = display.none)\r\nrisingWedgeContractingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='rwc', group='Contracting Wedges', display = display.none,\r\n             tooltip='Enable Rising Wedge (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowFallingWedgeContracting = input.bool(true, 'Falling   ', inline='fwc', group = 'Contracting Wedges', display = display.none)\r\nfallingWedgeContractingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='fwc', group='Contracting Wedges', display = display.none,\r\n             tooltip='Enable Falling Wedge (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowRisingTriangleExpanding = input.bool(true, 'Ascending  ', inline='rte', group = 'Expanding Triangles', display = display.none)\r\nrisingTriangleExpandingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='rte', group='Expanding Triangles', display = display.none,\r\n             tooltip='Enable Ascending Triangle (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowFallingTriangleExpanding = input.bool(true, 'Descending', inline='fte', group = 'Expanding Triangles', display = display.none)\r\nfallingTriangleExpandingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='fte', group='Expanding Triangles', display = display.none,\r\n             tooltip='Enable Descending Triangle (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowExpandingTriangle = input.bool(true, 'Diverging ', inline='dt', group = 'Expanding Triangles', display = display.none)\r\ndivergineTriangleLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='dt', group='Expanding Triangles', display = display.none,\r\n             tooltip='Enable Diverging Triangle and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\n\r\nallowRisingTriangleConverging= input.bool(true, 'Ascending  ', inline='rtc', group = 'Contracting Triangles', display = display.none)\r\nrisingTriangleContractingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='rtc', group='Contracting Triangles', display = display.none,\r\n             tooltip='Enable Ascending Triangle (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowFallingTriangleConverging = input.bool(true, 'Descending', inline='ftc', group = 'Contracting Triangles', display = display.none)\r\nfallingTriangleContractingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='ftc', group='Contracting Triangles', display = display.none,\r\n             tooltip='Enable Descending Triangle (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowConvergingTriangle = input.bool(true, 'Converging ', inline='ct', group = 'Contracting Triangles', display = display.none)\r\nconvergingTriangleLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='ct', group='Contracting Triangles', display = display.none,\r\n             tooltip='Enable Converging Triangle and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')\r\n\r\nallowedPatterns = array.from(\r\n     false,\r\n     allowUptrendChannel and allowRisingPatterns and allowParallelChannels and allowChannels,\r\n     allowDowntrendChannel and allowFallingPatterns and allowParallelChannels and allowChannels,\r\n     allowRangingChannel and allowNonDirectionalPatterns and allowParallelChannels and allowChannels,\r\n     allowRisingWedgeExpanding and allowRisingPatterns and allowExpandingPatterns and allowWedges,\r\n     allowFallingWedgeExpanding and allowFallingPatterns and allowExpandingPatterns and allowWedges,\r\n     allowExpandingTriangle and allowNonDirectionalPatterns and allowExpandingPatterns and allowTriangles,\r\n     allowRisingTriangleExpanding and allowRisingPatterns and allowExpandingPatterns and allowTriangles,\r\n     allowFallingTriangleExpanding and allowFallingPatterns and allowExpandingPatterns and allowTriangles,\r\n     allowRisingWedgeContracting and allowRisingPatterns and allowContractingPatterns and allowWedges,\r\n     allowFallingWedgeContracting and allowFallingPatterns and allowContractingPatterns and allowWedges,\r\n     allowConvergingTriangle and allowNonDirectionalPatterns and allowContractingPatterns and allowTriangles,\r\n     allowFallingTriangleConverging and allowFallingPatterns and allowContractingPatterns and allowTriangles,\r\n     allowRisingTriangleConverging and allowRisingPatterns and allowContractingPatterns and allowTriangles\r\n     )\r\n\r\ngetLastPivotDirectionInt(lastPivotDirection)=>lastPivotDirection == 'up'? 1 : lastPivotDirection == 'down'? -1 : 0\r\nallowedLastPivotDirections = array.from( \r\n     0,\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(upTrendChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(downTrendChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(rangingChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingWedgeExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingWedgeExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(divergineTriangleLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingTriangleExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingTriangleExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingWedgeContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingWedgeContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(convergingTriangleLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingTriangleContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),\r\n     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingTriangleContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection)\r\n     )\r\n\r\ntheme = input.string('Dark', title='Theme', options=['Light', 'Dark'], group='Display', inline='pc',\r\n         tooltip='Chart theme settings. Line and label colors are generted based on the theme settings. If dark theme is selected, '+\r\n         'lighter colors are used and if light theme is selected, darker colors are used.\\n\\n'+\r\n         'Pattern Line width - to be used for drawing pattern lines', display=display.none)\r\npatternLineWidth = input.int(2, '', minval=1, inline='pc', group = 'Display', display = display.none)\r\n\r\nshowPatternLabel = input.bool(true, 'Pattern Label', inline='pl1', group = 'Display', display = display.none)\r\npatternLabelSize = input.string(size.normal, '', [size.tiny, size.small, size.normal, size.large, size.huge], inline='pl1', group = 'Display', display = display.none,\r\n                     tooltip = 'Option to display Pattern Label and select the size')\r\n\r\nshowPivotLabels = input.bool(true, 'Pivot Labels ', inline='pl2', group = 'Display', display = display.none, tooltip = 'Option to display pivot labels and select the size')\r\npivotLabelSize = input.string(size.normal, '', [size.tiny, size.small, size.normal, size.large, size.huge], inline='pl2', group = 'Display', display = display.none)\r\n\r\nshowZigzag = input.bool(true, 'Zigzag', inline='z', group = 'Display', display = display.none)\r\nzigzagColor = input.color(color.blue, '', inline='z', group = 'Display', display = display.none, tooltip = 'Option to display zigzag within pattern and the default zigzag line color')\r\n\r\ndeleteOldPatterns = input.bool(true, 'Max Patterns', inline='do', group = 'Display', display = display.none)\r\nmaxPatterns = input.int(20, '', minval=1, step=5, inline = 'do', group = 'Display', display = display.none, tooltip = 'If selected, only last N patterns will be preserved on the chart.')\r\n\r\nerrorRatio = errorThresold/100\r\nflatRatio = flatThreshold/100\r\nshowLabel = true\r\noffset = 0\r\n\r\ntype Scanner\r\n    bool enabled\r\n    string ticker\r\n    string timeframe\r\n    p.ScanProperties sProperties\r\n    p.DrawingProperties dProperties\r\n    array<p.Pattern> patterns\r\n    array<zg.Zigzag> zigzags\r\n\r\nmethod getZigzagAndPattern(Scanner this, int length, int depth, array<o.OHLC> ohlcArray, int offset=0)=>\r\n    var zg.Zigzag zigzag = zg.Zigzag.new(length, depth, 0)\r\n    var map<int, int> lastDBar = map.new<int, int>()\r\n    zigzag.calculate(array.from(highSource, lowSource))\r\n\r\n    var validPatterns = 0\r\n    mlzigzag = zigzag\r\n    if(zigzag.flags.newPivot)\r\n        while(mlzigzag.zigzagPivots.size() >= 6+offset)\r\n            lastBar = mlzigzag.zigzagPivots.first().point.index\r\n            lastDir = int(math.sign(mlzigzag.zigzagPivots.first().dir))\r\n            if(lastDBar.contains(mlzigzag.level)? lastDBar.get(mlzigzag.level) < lastBar : true)\r\n                lastDBar.put(mlzigzag.level, lastBar)\r\n                [valid, currentPattern] = mlzigzag.find(this.sProperties, this.dProperties, this.patterns, ohlcArray)\r\n                if(valid)\r\n                    validPatterns+=1\r\n                    currentPattern.draw()\r\n                    this.patterns.push(currentPattern, maxPatterns)\r\n                    alert('New Pattern Alert')\r\n            else\r\n                break\r\n            mlzigzag := mlzigzag.nextlevel()\r\n    true\r\n\r\nmethod scan(Scanner this)=>\r\n    var array<o.OHLC> ohlcArray = array.new<o.OHLC>()\r\n    var array<p.Pattern> patterns = array.new<p.Pattern>()\r\n    ohlcArray.push(o.OHLC.new(openSource, highSource, lowSource, closeSource))\r\n    if(useZigzag1)\r\n        this.getZigzagAndPattern(zigzagLength1, depth1, ohlcArray)\r\n    if(useZigzag2)\r\n        this.getZigzagAndPattern(zigzagLength2, depth2, ohlcArray)\r\n    if(useZigzag3)\r\n        this.getZigzagAndPattern(zigzagLength3, depth3, ohlcArray)\r\n    if(useZigzag4)\r\n        this.getZigzagAndPattern(zigzagLength4, depth4, ohlcArray)\r\n\r\nvar scanner = Scanner.new(true, \"\", \"\", \r\n             p.ScanProperties.new(offset, numberOfPivots, errorRatio, flatRatio, checkBarRatio, barRatioLimit, avoidOverlap, allowedPatterns=allowedPatterns, allowedLastPivotDirections= allowedLastPivotDirections, themeColors = ut.getColors(theme)),\r\n             p.DrawingProperties.new(patternLineWidth, showZigzag, 1, zigzagColor, showPatternLabel, patternLabelSize, showPivotLabels, pivotLabelSize, deleteOnPop = deleteOldPatterns),\r\n             array.new<p.Pattern>())\r\n\r\nif(barstate.isconfirmed or repaint)\r\n    scanner.scan()\r\n","updated":"2024-01-26T13:53:04.81047Z","version":"6.0"}