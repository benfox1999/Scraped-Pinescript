{"created":"2024-06-15T09:38:19.916306Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"TASC 2024.07 Gaps and Extreme Closes","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © PineCodersTASC\r\n//  TASC Issue: July 2024 - Vol. 42\r\n//     Article: Trading Opening Gaps\r\n//              And Extreme Closes In Stocks.\r\n//  Article By: Perry J. Kaufman\r\n//    Language: TradingView's Pine Script™ v5\r\n// Provided By: PineCoders, for tradingview.com\r\n\r\n//@version=5\r\nstring title  = 'TASC 2024.07 Gaps and Extreme Closes'\r\nstring stitle = 'G&C'\r\nindicator(title, stitle, false)\r\n\r\n//#region   Inputs:\r\nstring it0  = \"Opening Gaps\"\r\nstring it1  = \"Extreme Closes\"\r\nstring it2  = \"Upward\"\r\nstring it3  = \"Downward\"\r\nstring out1 = input.string(it0, \"Output\",    [it0, it1])\r\nstring out2 = input.string(it2, \"Direction\", [it2, it3])\r\n//#endregion\r\n\r\n//#region   Data structures:\r\ntype Threshold\r\n    int   gap_freq_up   = 0\r\n    int   gap_freq_dn   = 0\r\n    float gap_up        = 0.0\r\n    float gap_dn        = 0.0\r\n    float gap_up_pb     = 0.0\r\n    float gap_dn_pb     = 0.0\r\n    float gap_up_close  = 0.0\r\n    float gap_dn_close  = 0.0\r\n    int   close_freq_up = 0\r\n    int   close_freq_dn = 0\r\n    float close_up      = 0.0\r\n    float close_dn      = 0.0\r\n    float next_open_up  = 0.0\r\n    float next_open_dn  = 0.0\r\n    float next_close_up = 0.0\r\n    float next_close_dn = 0.0\r\n\r\ntype Data\r\n    array<float>          thresholds\r\n    map<float, Threshold> bins\r\n//#endregion\r\n\r\n//#region   Functions:\r\nget_data () =>\r\n    // Gap bins threshold levels:\r\n    // ( 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, >0.11 )\r\n    var thresholds = array.new<float>(7)\r\n    var bins = map.new<float, Threshold>()\r\n    if barstate.isfirst\r\n        float x = -0.01\r\n        for _i = 0 to 6\r\n            x += 0.02\r\n            thresholds.set(_i, x)\r\n            bins.put(x, Threshold.new())\r\n    // Gap logic:\r\n    float gap = open / close[1] - 1.0\r\n    // opening gap higher:\r\n    if gap > 0.0\r\n        int saveindex = 0\r\n        bool found = false\r\n        for _i = 0 to 6\r\n            if not found\r\n                if gap < thresholds.get(_i)\r\n                    found := true\r\n                    bini = bins.get(thresholds.get(_i))\r\n                    bini.gap_freq_up += 1\r\n                    bini.gap_up += gap\r\n                    saveindex := _i\r\n        if not found\r\n            bini = bins.get(thresholds.get(6))\r\n            bini.gap_freq_up += 1\r\n            bini.gap_up += gap\r\n            saveindex := 6\r\n        // pullback from gap higher:\r\n        bini = bins.get(thresholds.get(saveindex))\r\n        float gap_pb = low / open - 1.0\r\n        bini.gap_up_pb += gap_pb\r\n        // close relative to gap open:\r\n        float gap_close = close / open - 1.0\r\n        bini.gap_up_close += gap_close\r\n    // opening gap lower:\r\n    if gap < 0.0\r\n        float agap = math.abs(gap)\r\n        int saveindex = 0\r\n        bool found = false\r\n        for _i = 0 to 6\r\n            if not found\r\n                if agap < thresholds.get(_i)\r\n                    found := true\r\n                    bini = bins.get(thresholds.get(_i))\r\n                    bini.gap_freq_dn += 1\r\n                    bini.gap_dn += agap\r\n                    saveindex := _i\r\n        if not found\r\n            bini = bins.get(thresholds.get(6))\r\n            bini.gap_freq_dn += 1\r\n            bini.gap_dn += agap\r\n            saveindex := 6\r\n        // upward pullback from gap lower:\r\n        bini = bins.get(thresholds.get(saveindex))\r\n        float gap_pb = high / open - 1.0\r\n        bini.gap_dn_pb += gap_pb\r\n        // close relative to gap open:\r\n        float gap_close = close / open - 1.0\r\n        bini.gap_dn_close += gap_close\r\n    // Extreme close logic:\r\n    float extreme_close = close / close[1] - 1.0\r\n    // extreme close higher:\r\n    if extreme_close > 0.0\r\n        int saveindex = 0\r\n        bool found = false\r\n        for _i = 0 to 6\r\n            if not found\r\n                if extreme_close < thresholds.get(_i)\r\n                    found := true\r\n                    bini = bins.get(thresholds.get(_i))\r\n                    bini.close_freq_up += 1\r\n                    bini.close_up += extreme_close\r\n                    saveindex := _i\r\n        if not found\r\n            bini = bins.get(thresholds.get(6))\r\n            bini.close_freq_up += 1\r\n            bini.close_up += extreme_close\r\n            saveindex := 6\r\n        // next open and close:\r\n        bini = bins.get(thresholds.get(saveindex))\r\n        bini.next_open_up += open / close[1] - 1.0\r\n        bini.next_close_up += close / close[1] - 1.0\r\n    // extreme close lower:\r\n    if extreme_close < 0.0\r\n        float aextreme_close = math.abs(extreme_close)\r\n        int saveindex = 0\r\n        bool found = false\r\n        for _i = 0 to 6\r\n            if not found\r\n                if aextreme_close < thresholds.get(_i)\r\n                    found := true\r\n                    bini = bins.get(thresholds.get(_i))\r\n                    bini.close_freq_dn += 1\r\n                    bini.close_dn += aextreme_close\r\n                    saveindex := _i\r\n        if not found\r\n            bini = bins.get(thresholds.get(6))\r\n            bini.close_freq_up += 1\r\n            bini.close_up += aextreme_close\r\n            saveindex := 6\r\n        // next open and close:\r\n        bini = bins.get(thresholds.get(saveindex))\r\n        bini.next_open_dn += open / close[1] - 1.0\r\n        bini.next_close_dn += close / close[1] - 1.0\r\n    Data data = Data.new(thresholds, bins)\r\n    data\r\n//#endregion\r\n\r\n//#region   Data to lists:\r\nmethod get_gaps_up_freq (Data data) =>\r\n    array<int> _freq = array.new<int>(7, int(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        _freq.set(_i, data.bins.get(_thrs).gap_freq_up)\r\n    _freq\r\n\r\nmethod get_gaps_dn_freq (Data data) =>\r\n    array<int> _freq = array.new<int>(7, int(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        _freq.set(_i, data.bins.get(_thrs).gap_freq_dn)\r\n    _freq\r\n\r\nmethod get_gaps_up_pb (Data data) =>\r\n    array<float> _pb = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pbi = data.bins.get(_thrs).gap_up_pb\r\n        int   _fqi = data.bins.get(_thrs).gap_freq_up\r\n        if _fqi != 0 // protect against div by 0\r\n            _pb.set(_i, _pbi / _fqi)\r\n    _pb\r\n\r\nmethod get_gaps_dn_pb (Data data) =>\r\n    array<float> _pb = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pbi = data.bins.get(_thrs).gap_dn_pb\r\n        int   _fqi = data.bins.get(_thrs).gap_freq_dn\r\n        if _fqi != 0 // protect against div by 0\r\n            _pb.set(_i, _pbi / _fqi)\r\n    _pb\r\n\r\nmethod get_gaps_up_close_vs_open (Data data) =>\r\n    array<float> _cvo = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).gap_up_close\r\n        int  _fqi = data.bins.get(_thrs).gap_freq_up\r\n        if _fqi != 0 // protect against div by 0\r\n            _cvo.set(_i, _pi / _fqi)\r\n    _cvo\r\n\r\nmethod get_gaps_dn_close_vs_open (Data data) =>\r\n    array<float> _cvo = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).gap_dn_close\r\n        int  _fqi = data.bins.get(_thrs).gap_freq_dn\r\n        if _fqi != 0 // protect against div by 0\r\n            _cvo.set(_i, _pi / _fqi)\r\n    _cvo\r\n\r\nmethod get_close_up_freq (Data data) =>\r\n    array<int> _freq = array.new<int>(7, int(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        _freq.set(_i, data.bins.get(_thrs).close_freq_up)\r\n    _freq\r\n\r\nmethod get_close_dn_freq (Data data) =>\r\n    array<int> _freq = array.new<int>(7, int(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        _freq.set(_i, data.bins.get(_thrs).close_freq_dn)\r\n    _freq\r\n\r\nmethod get_close_up_next_open (Data data) =>\r\n    array<float> _pb = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).next_open_up\r\n        int   _fi = data.bins.get(_thrs).close_freq_up\r\n        if _fi != 0 // protect against div by 0\r\n            _pb.set(_i, _pi / _fi)\r\n    _pb\r\n\r\nmethod get_close_dn_next_open (Data data) =>\r\n    array<float> _pb = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).next_open_dn\r\n        int   _fi = data.bins.get(_thrs).close_freq_dn\r\n        if _fi != 0 // protect against div by 0\r\n            _pb.set(_i, _pi / _fi)\r\n    _pb\r\n\r\nmethod get_close_up_next_close (Data data) =>\r\n    array<float> _cvo = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).next_close_up\r\n        int   _fi = data.bins.get(_thrs).close_freq_up\r\n        if _fi != 0 // protect against div by 0\r\n            _cvo.set(_i, _pi / _fi)\r\n    _cvo\r\n\r\nmethod get_close_dn_next_close (Data data) =>\r\n    array<float> _cvo = array.new<float>(7, float(na))\r\n    for [_i, _thrs] in data.thresholds\r\n        float _pi = data.bins.get(_thrs).next_close_dn\r\n        int   _fi = data.bins.get(_thrs).close_freq_dn\r\n        if _fi != 0 // protect against div by 0\r\n            _cvo.set(_i, _pi / _fi)\r\n    _cvo\r\n//#endregion\r\n\r\n//#region   Table:\r\nmethod gap_table (Data data, bool gaps, bool dir) =>\r\n    table _tbl = table.new(position.bottom_center, 8, 5)\r\n    string _title = switch gaps\r\n        true  => dir ? 'GAP UP' : 'GAP DOWN'\r\n        false => dir ? 'CLOSE UP' : 'CLOSE DOWN'\r\n    color _col_bg = color.rgb(200, 208, 231)\r\n    color _col_bg_title = color.rgb(160, 170, 180)\r\n    color _col_bg_dir = dir ? color.lime : color.orange\r\n    _tbl.cell(0, 0, _title, bgcolor=_col_bg_title)\r\n    _tbl.cell(7, 0, _title, bgcolor=_col_bg_title)\r\n    _tbl.merge_cells(0, 0, 7, 0)\r\n    _tbl.cell(0, 1, 'Ranges:', bgcolor=_col_bg_dir)\r\n    _tbl.cell(0, 2, 'Frequency:', bgcolor=_col_bg_dir)\r\n    _tbl.cell(0, 3, 'Pullback:', bgcolor=_col_bg_dir)\r\n    _tbl.cell(0, 4, 'Close vs Open:', bgcolor=_col_bg_dir)\r\n    array<int> _freq  = switch gaps \r\n        true  => dir ? data.get_gaps_up_freq() :\r\n                       data.get_gaps_dn_freq()\r\n        false => dir ? data.get_close_up_freq() :\r\n                       data.get_close_dn_freq()\r\n    array<float> _pb  = switch gaps \r\n        true  => dir ? data.get_gaps_up_pb() :\r\n                       data.get_gaps_dn_pb()\r\n        false => dir ? data.get_close_up_next_open() :\r\n                       data.get_close_dn_next_open()\r\n    array<float> _cvo  = switch gaps \r\n        true  => dir ? data.get_gaps_up_close_vs_open() :\r\n                       data.get_gaps_dn_close_vs_open()\r\n        false => dir ? data.get_close_up_next_close() :\r\n                       data.get_close_dn_next_close()\r\n    for [_i, _thrs] in data.thresholds\r\n        _r = str.tostring(_i*2-1)+'-'+str.tostring(_i*2+1)+'%'\r\n        _tbl.cell(1+_i, 1, _r, bgcolor=_col_bg_dir)\r\n        _tbl.cell(1+_i, 2, str.format('{0,number,integer}', \r\n                             _freq.get(_i)), bgcolor=_col_bg)\r\n        _tbl.cell(1+_i, 3, str.format('{0,number,#.##%}', \r\n                             _pb.get(_i)), bgcolor=_col_bg)\r\n        _tbl.cell(1+_i, 4, str.format('{0,number,#.##%}', \r\n                             _cvo.get(_i)), bgcolor=_col_bg)\r\n    _tbl.cell(1, 1, '<1%', bgcolor=_col_bg_dir)\r\n    _tbl.cell(7, 1, '>11%', bgcolor=_col_bg_dir)\r\n    _tbl\r\n//#endregion\r\n\r\n//#region   Calculations:\r\nbool  gaps = out1 == it0\r\nbool  dir  = out2 == it2\r\ndata = get_data()\r\nif barstate.islastconfirmedhistory\r\n    table tb = data.gap_table(gaps, dir)\r\n//#endregion\r\n","updated":"2024-06-15T09:38:19.916306Z","version":"1.0"}