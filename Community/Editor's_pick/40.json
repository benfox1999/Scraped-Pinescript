{"created":"2023-08-21T04:52:12.526496Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"K clustering","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// Â© ThinkLogicAI\n\n\n//@version=5\nindicator(\"K clustering\", overlay = true, max_lines_count = 10, max_labels_count = 251)\n\n//inputs \nk = input.int(3, \"Number of clusters\", minval = 3, maxval = 5, step = 1)\ncent_meth = input.string(\"K means\", title=\"Cluster Method\", options=[\"K means\", \"K median\"]) \ntrain_n = input.int(252,\"Bars back from last bar to train on\", minval = 20, maxval = 1000, step = 1)\nplot_band = input.bool(true, \"Show SD bands\")\n\n//variables needed\nx = close\nmax_bars_back(x, 5000)\nvar clust = array.new<float>(k, 0)\nvar sd_clust = array.new<float>(k, 0)\nvar n_clust = array.new<float>(k,0)\nvar conv = array.new<int>(0)\nvar bar_lab = array.new<label>(0)\nvar table tab = table.new(position.top_right,2, k+1)\nvar line ts = na\nvar line k1 = na\nvar line k2 = na\nvar line k3 = na\nvar line k4 = na\nvar line k5 = na\nvar line k6 = na\nvar line sh_1 = na\nvar line sl_1 = na\nvar line sh_2 = na\nvar line sl_2 = na\nvar line sh_3 = na\nvar line sl_3 = na\nvar line sh_4 = na\nvar line sl_4 = na\nvar line sh_5 = na\nvar line sl_5 = na\nvar line sh_6 = na\nvar line sl_6 = na\n\n\n\n//fuctions used\neuc_dist(p,q) => \n    //distance metric\n    //p is the close vector and q is the cluster cecnter\n    math.sqrt(math.pow(p-q,2))\n\nsubtract_array(a,b)=>\n    //subtract arrays\n    out = array.new<float>(array.size(a),na)\n    for i = 0 to array.size(a) -1\n        array.set(out,i, array.get(a,i) - array.get(b,i))\n    array.sum(out)\n\ncenter_method(arry)=>\n    //calculate either the mean or median based on user input\n    float out = 0.00\n    if cent_meth == \"K means\"//k means clustering\n        out := array.avg(arry)\n    else\n        out := array.median((arry))//k meedian clustering\n    out\n\nsd_method(arry, mu, ddof)=>\n    //my will either be the mean or the median based on user input\n    float sum_dif = 0.00\n    if cent_meth == \"k means\"\n        sum_dif := array.stdev(arry)\n    else\n        if arry.size() > 0\n            for i = 0 to arry.size() - 1\n                sum_dif += math.pow(array.get(arry, i) - mu,2)\n            sum_dif := math.sqrt(sum_dif/(array.size(arry)-ddof))\n    sum_dif\n\n    \n\nvector_params(k, a1, a2, a3, a4, a5, a6)=>\n    //calculate mean, sd, and array size\n    mu = array.new<float>(0)\n    sd = array.new<float>(0)\n    N = array.new<float>(0)\n    mean_ar1 = center_method(a1)\n    mean_ar2 = center_method(a2)\n    mean_ar3 = center_method(a3)\n    mean_ar4 = center_method(a4)\n    mean_ar5 = center_method(a5)\n    mean_ar6 = center_method(a6)\n    sd_ar1 = sd_method(a1, mean_ar1, 0)\n    sd_ar2 = sd_method(a2, mean_ar2, 0)\n    sd_ar3 = sd_method(a3, mean_ar3, 0)\n    sd_ar4 = sd_method(a4, mean_ar4, 0)\n    sd_ar5 = sd_method(a5, mean_ar5, 0)\n    sd_ar6 = sd_method(a6, mean_ar6, 0)\n    n1 = array.size(a1)\n    n2 = array.size(a2)\n    n3 = array.size(a3)\n    n4 = array.size(a4)\n    n5 = array.size(a5)\n    n6 = array.size(a6)\n    array.push(mu, mean_ar1)\n    array.push(mu, mean_ar2)\n    array.push(mu, mean_ar3)\n    array.push(mu, mean_ar4)\n    array.push(mu, mean_ar5)\n    array.push(mu, mean_ar6)\n    array.push(sd, sd_ar1)\n    array.push(sd, sd_ar2)\n    array.push(sd, sd_ar3)\n    array.push(sd, sd_ar4)\n    array.push(sd, sd_ar5)\n    array.push(sd, sd_ar6)\n    array.push(N, n1)\n    array.push(N, n2)\n    array.push(N, n3)\n    array.push(N, n4)\n    array.push(N, n5)\n    array.push(N, n6)\n    [array.slice(mu,0,k), array.slice(sd, 0, k), array.slice(N, 0, k)]\n\n\n// k means/median clustering\nif barstate.islast\n    err = 100.00\n    for i = 0 to array.size(clust) - 1\n        array.set(clust, i, i == 0 ? x[math.floor(train_n*.02)] : x[math.floor(train_n*((i/k)))])\n    \n    //run while clusters keep changing \n    while err > .01\n        c1 = array.new<float>(0)\n        c2 = array.new<float>(0)\n        c3 = array.new<float>(0)\n        c4 = array.new<float>(0)\n        c5 = array.new<float>(0)\n        c6 = array.new<float>(0)\n        hold = array.new<int>(0)\n        for i = 1 to train_n\n            int idx = na\n            dist = 1000000.00\n            for j = 0 to k-1\n                d_temp = euc_dist(x[i], array.get(clust,j))\n                if d_temp < dist\n                    dist := d_temp\n                    idx := j\n            if idx == 0\n                array.push(c1, x[i])\n                array.push(hold, 0)\n            else if idx == 1\n                array.push(c2, x[i])\n                array.push(hold, 1)\n            else if idx == 2\n                array.push(c3, x[i])\n                array.push(hold, 2)\n            else if idx == 3\n                array.push(c4, x[i])\n                array.push(hold, 3)\n            else if idx == 4\n                array.push(c5, x[i])\n                array.push(hold, 4)\n            else if idx == 5\n                array.push(c6, x[i])\n                array.push(hold, 5)\n        //after looping though data\n        [mu, sd, n] = vector_params(k, c1, c2, c3, c4, c5, c6)\n        err := math.pow(subtract_array(clust, mu),2)\n        clust := array.copy(mu)\n        sd_clust := array.copy(sd)\n        array.push(conv,1)\n        conv := array.copy(hold)\n        n_clust := array.copy(n)\n        \n    //populate table\n    table.cell(tab, 0, 0, \"Cluster\",  bgcolor = color.new(color.gray, 50), text_color = color.white)\n    table.cell(tab, 1, 0, \"Density\", bgcolor = color.new(color.gray, 50), text_color = color.white)\n\n    //visuals, table update, and stats all based on user defined number of clusters\n    if k == 3\n        n1 = n_clust.get(0)\n        n2 = n_clust.get(1)      \n        n3 = n_clust.get(2)\n        denom = n1 + n2 + n3\n        table.cell(tab, 1, 1, str.tostring(100*math.round(n1 / denom,3)) + \"%\", bgcolor = color.new(color.green,50), text_color = color.white)\n        table.cell(tab, 1, 2, str.tostring(100*math.round(n2 / denom,3)) + \"%\", bgcolor = color.new(color.red, 50), text_color = color.white)\n        table.cell(tab, 1, 3, str.tostring(100*math.round(n3 / denom,3)) + \"%\", bgcolor = color.new(color.blue,50), text_color = color.white)\n        table.cell(tab, 0, 1, \"1\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 2, \"2\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 3, \"3\", bgcolor = color.gray, text_color = color.white)\n        if n1 > 0\n            k1 := line.new(bar_index - 1, array.get(clust,0), bar_index, array.get(clust,0),xloc = xloc.bar_time,extend = extend.both, color = color.green, width = 2)\n            if plot_band\n                sh_1 := line.new(bar_index - 1 , array.get(clust,0) + array.get(sd_clust, 0), bar_index, array.get(clust,0) + array.get(sd_clust, 0),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)\n                sl_1 := line.new(bar_index - 1, array.get(clust,0) - array.get(sd_clust, 0), bar_index, array.get(clust,0) - array.get(sd_clust, 0),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)    \n                linefill.new(sh_1, sl_1, color.new(color.green, 90))\n        if n2 > 0\n            k2 := line.new(bar_index - 1, array.get(clust,1), bar_index, array.get(clust,1),xloc = xloc.bar_time,extend = extend.both, color = color.red, width = 2)\n            if plot_band\n                sh_2 := line.new(bar_index - 1, array.get(clust,1) + array.get(sd_clust, 1), bar_index, array.get(clust,1) + array.get(sd_clust, 1),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)\n                sl_2 := line.new(bar_index - 1, array.get(clust,1) - array.get(sd_clust, 1), bar_index, array.get(clust,1) - array.get(sd_clust, 1),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_2, sl_2, color.new(color.red, 90))\n        if n3 > 0    \n            k3 := line.new(bar_index - 1, array.get(clust,2), bar_index, array.get(clust,2),xloc = xloc.bar_time,extend = extend.both, color = color.blue, width = 2)\n            if plot_band\n                sh_3 := line.new(bar_index - 1, array.get(clust,2) + array.get(sd_clust, 2), bar_index, array.get(clust,2) + array.get(sd_clust, 2),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)\n                sl_3 := line.new(bar_index - 1, array.get(clust,2) - array.get(sd_clust, 2), bar_index, array.get(clust,2) - array.get(sd_clust, 2),xloc = xloc.bar_time,extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_3, sl_3, color.new(color.blue, 90))\n    else if k == 4\n        n1 = n_clust.get(0)\n        n2 = n_clust.get(1)      \n        n3 = n_clust.get(2)\n        n4 = n_clust.get(3)\n        denom = n1 + n2 + n3 + n4\n        table.cell(tab, 1, 1, str.tostring(100*math.round(n1 / denom,3)) + \"%\", bgcolor = color.new(color.green,50), text_color = color.white)\n        table.cell(tab, 1, 2, str.tostring(100*math.round(n2 / denom,3)) + \"%\", bgcolor = color.new(color.red,50), text_color = color.white)\n        table.cell(tab, 1, 3, str.tostring(100*math.round(n3 / denom,3)) + \"%\", bgcolor = color.new(color.blue,50), text_color = color.white)\n        table.cell(tab, 1, 4, str.tostring(100*math.round(n4 / denom,3)) + \"%\", bgcolor = color.new(color.orange,50), text_color = color.white)\n        table.cell(tab, 0, 1, \"1\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 2, \"2\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 3, \"3\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 4, \"4\", bgcolor = color.gray, text_color = color.white)\n        if n1 > 0\n            k1 := line.new(bar_index - 1, array.get(clust,0), bar_index, array.get(clust,0),extend = extend.both, color = color.green, width = 2)\n            if plot_band\n                sh_1 := line.new(bar_index - 1, array.get(clust,0) + array.get(sd_clust, 0), bar_index, array.get(clust,0) + array.get(sd_clust, 0),extend = extend.both, color = color.white, width = 1)\n                sl_1 := line.new(bar_index - 1, array.get(clust,0) - array.get(sd_clust, 0), bar_index, array.get(clust,0) - array.get(sd_clust, 0),extend = extend.both, color = color.white, width = 1)    \n                linefill.new(sh_1, sl_1, color.new(color.green, 90))\n        if n2 > 0\n            k2 := line.new(bar_index - 1, array.get(clust,1), bar_index, array.get(clust,1),extend = extend.both, color = color.red, width = 2)\n            if plot_band\n                sh_2 := line.new(bar_index - 1, array.get(clust,1) + array.get(sd_clust, 1), bar_index, array.get(clust,1) + array.get(sd_clust, 1),extend = extend.both, color = color.white, width = 1)\n                sl_2 := line.new(bar_index - 1, array.get(clust,1) - array.get(sd_clust, 1), bar_index, array.get(clust,1) - array.get(sd_clust, 1),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_2, sl_2, color.new(color.red, 90))\n        if n3 > 0    \n            k3 := line.new(bar_index - 1, array.get(clust,2), bar_index, array.get(clust,2),extend = extend.both, color = color.blue, width = 2)\n            if plot_band\n                sh_3 := line.new(bar_index - 1, array.get(clust,2) + array.get(sd_clust, 2), bar_index, array.get(clust,2) + array.get(sd_clust, 2),extend = extend.both, color = color.white, width = 1)\n                sl_3 := line.new(bar_index - 1, array.get(clust,2) - array.get(sd_clust, 2), bar_index, array.get(clust,2) - array.get(sd_clust, 2),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_3, sl_3, color.new(color.blue, 90))\n        if n4 > 0\n            k4 := line.new(bar_index - 1, array.get(clust,3), bar_index, array.get(clust,3),extend = extend.both, color = color.orange, width = 2)\n            if plot_band\n                sh_4 := line.new(bar_index - 1, array.get(clust,3) + array.get(sd_clust, 3), bar_index, array.get(clust,3) + array.get(sd_clust, 3),extend = extend.both, color = color.white, width = 1)\n                sl_4 := line.new(bar_index - 1, array.get(clust,3) - array.get(sd_clust, 3), bar_index, array.get(clust,3) - array.get(sd_clust, 3),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_4, sl_4, color.new(color.orange, 90))\n\n    else if k == 5\n        n1 = n_clust.get(0)\n        n2 = n_clust.get(1)      \n        n3 = n_clust.get(2)\n        n4 = n_clust.get(3)\n        n5 = n_clust.get(4)\n        denom = n1 + n2 + n3 + n4 + n5\n        table.cell(tab, 1, 1, str.tostring(100*math.round(n1 / denom,3)) + \"%\", bgcolor = color.new(color.green,50), text_color = color.white)\n        table.cell(tab, 1, 2, str.tostring(100*math.round(n2 / denom,3)) + \"%\", bgcolor = color.new(color.red,50), text_color = color.white)\n        table.cell(tab, 1, 3, str.tostring(100*math.round(n3 / denom,3)) + \"%\", bgcolor = color.new(color.blue,50), text_color = color.white)\n        table.cell(tab, 1, 4, str.tostring(100*math.round(n4 / denom,3)) + \"%\", bgcolor = color.new(color.orange,50), text_color = color.white)\n        table.cell(tab, 1, 5, str.tostring(100*math.round(n5 / denom,3)) + \"%\", bgcolor = color.new(color.yellow,50), text_color = color.white)\n        table.cell(tab, 0, 1, \"1\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 2, \"2\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 3, \"3\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 4, \"4\", bgcolor = color.gray, text_color = color.white)\n        table.cell(tab, 0, 5, \"5\", bgcolor = color.gray, text_color = color.white)\n        if n1 > 0\n            k1 := line.new(bar_index - 1, array.get(clust,0), bar_index, array.get(clust,0),extend = extend.both, color = color.green, width = 2)\n            if plot_band\n                sh_1 := line.new(bar_index - 1, array.get(clust,0) + array.get(sd_clust, 0), bar_index, array.get(clust,0) + array.get(sd_clust, 0),extend = extend.both, color = color.white, width = 1)\n                sl_1 := line.new(bar_index - 1, array.get(clust,0) - array.get(sd_clust, 0), bar_index, array.get(clust,0) - array.get(sd_clust, 0),extend = extend.both, color = color.white, width = 1)    \n                linefill.new(sh_1, sl_1, color.new(color.green, 90))\n        if n2 > 0\n            k2 := line.new(bar_index - 1, array.get(clust,1), bar_index, array.get(clust,1),extend = extend.both, color = color.red, width = 2)\n            if plot_band\n                sh_2 := line.new(bar_index - 1, array.get(clust,1) + array.get(sd_clust, 1), bar_index, array.get(clust,1) + array.get(sd_clust, 1),extend = extend.both, color = color.white, width = 1)\n                sl_2 := line.new(bar_index - 1, array.get(clust,1) - array.get(sd_clust, 1), bar_index, array.get(clust,1) - array.get(sd_clust, 1),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_2, sl_2, color.new(color.red, 90))\n        if n3 > 0    \n            k3 := line.new(bar_index - 1, array.get(clust,2), bar_index, array.get(clust,2),extend = extend.both, color = color.blue, width = 2)\n            if plot_band\n                sh_3 := line.new(bar_index - 1, array.get(clust,2) + array.get(sd_clust, 2), bar_index, array.get(clust,2) + array.get(sd_clust, 2),extend = extend.both, color = color.white, width = 1)\n                sl_3 := line.new(bar_index - 1, array.get(clust,2) - array.get(sd_clust, 2), bar_index, array.get(clust,2) - array.get(sd_clust, 2),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_3, sl_3, color.new(color.blue, 90))\n        if n4 > 0\n            k4 := line.new(bar_index - 1, array.get(clust,3), bar_index, array.get(clust,3),extend = extend.both, color = color.orange, width = 2)\n            if plot_band\n                sh_4 := line.new(bar_index - 1, array.get(clust,3) + array.get(sd_clust, 3), bar_index, array.get(clust,3) + array.get(sd_clust, 3),extend = extend.both, color = color.white, width = 1)\n                sl_4 := line.new(bar_index - 1, array.get(clust,3) - array.get(sd_clust, 3), bar_index, array.get(clust,3) - array.get(sd_clust, 3),extend = extend.both, color = color.white, width = 1)\n                linefill.new(sh_4, sl_4, color.new(color.orange, 90))\n            \n        if n5 > 0\n            k5 := line.new(bar_index - 1, array.get(clust,4), bar_index, array.get(clust,4),extend = extend.both, color = color.yellow, width = 2)\n            if plot_band    \n                sh_5 := line.new(bar_index - 1, array.get(clust,4) + array.get(sd_clust, 4), bar_index, array.get(clust,4) + array.get(sd_clust, 4),extend = extend.both, color = color.white, width = 1)\n                sl_5 := line.new(bar_index - 1, array.get(clust,4) - array.get(sd_clust, 4), bar_index, array.get(clust,4) - array.get(sd_clust, 4),extend = extend.both, color = color.white, width = 1)    \n                linefill.new(sh_5, sl_5, color.new(color.yellow, 90))\n\n\n\n\n","updated":"2023-08-21T04:52:12.526496Z","version":"1.0"}