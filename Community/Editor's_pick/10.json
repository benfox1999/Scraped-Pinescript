{"created":"2024-04-04T10:18:05.802123Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Trailing Management (Zeiierman)","source":"/// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\r\n\r\n// ~~ Â© Zeiierman {\r\n//@version=5\r\nindicator('Trailing Management (Zeiierman)', overlay=true,max_lines_count=500)\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Settings {\r\n// ~~ Tooltips\r\nt1 = \"Selects the method used to calculate the trailing stop. 'Auto' dynamically calculates based on market conditions. 'Percentage' uses a fixed percentage for trailing. \\n\\nThe second value defines the lookback period over which to calculate the highest high and lowest low for trailing stop calculations. Increasing this value will make the trailing stop less sensitive to price changes.\"\r\nt2 = \"Sets the percentage step for the trailing stop when 'Percentage' method is selected. Increasing this value will increase the distance of the trailing stop from the price.\"\r\nt3 = \"Determines the bias of the trailing stop. 'Bullish' sets it to track only upward moves, 'Bearish' only downward, and 'Auto' adjusts dynamically based on price action.\"\r\n\r\n// ~~ Inputs\r\nstep     = input.string(\"Auto\",\"Trailing Method\",[\"Auto\",\"Percentage\",\"Pivot\"], group=\"Trailing\", inline=\"Trailing\", tooltip=\"\")\r\nprd      = input.int(20,\"Trailing Size\", minval=2, group=\"Trailing\", inline=\"Trailing\", tooltip=t1)\r\nperc     = input.float(.5,\"Percentage Step\",step=.01,group=\"Trailing\", inline=\"\", tooltip=t2)/100\r\nbias     = input.string(\"Auto\",\"Set Bias\",[\"Bullish\",\"Bearish\",\"Auto\"], group=\"Bias\", inline=\"\", tooltip=t3)\r\nupcol    = input.color(#089981 , title='', group='Style',  inline=\"Style\")\r\ndncol    = input.color(#f23645, title='', group='Style', inline=\"Style\")\r\nupcol1   = input.color(color.lime , title='', group='Style',  inline=\"Style1\")\r\ndncol1   = input.color(color.maroon, title='', group='Style', inline=\"Style1\")\r\n\r\nshowBE     = input.bool(true,\"Break-Even Curve\",group=\"Table\",inline=\"Table\")\r\nshowTable  = input.bool(true, title='Show Table', group='Table', inline='Table')\r\nlabels     = input.bool(false, title='Show Labels', group='Table', inline='Table')\r\ntblSize    = input.string(\"Auto\",\"Table Size\",[\"Auto\",\"Tiny\",\"Small\",\"Normal\",\"Large\",\"Huge\"], group=\"Table\", inline=\"style\")\r\nposi       = input.string(position.top_right, title=\"\",options =[position.top_right,position.top_center,\r\n position.top_left,position.bottom_right,position.bottom_center,position.bottom_left,position.middle_right,position.middle_left], group=\"Table\",inline=\"style\", tooltip=\"\")\r\nTable_Text = input.color(color.new(color.white, 0), title='Text', inline='style', group='Table')\r\nTable_BG   = input.color(color.new(#176cff, 0), title='BG', inline='style', group='Table')\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ General Variables {\r\nb         = bar_index\r\ndot       = label(na)\r\nvar curve = array.new<line>()\r\nvar labs  = array.new<label>()\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ AutoMove calc {\r\nhi = ta.highest(high,prd*10)\r\nlo = ta.lowest(low,prd*10)\r\n\r\nvar ph  = high\r\nvar pl  = low\r\nvar phL = b\r\nvar plL = b\r\nvar peaks = array.new<float>()\r\n\r\nph := ta.highestbars(high, prd) == 0 ? high : ph\r\npl := ta.lowestbars(low, prd) == 0 ? low : pl\r\nphL:= ta.highestbars(high, prd) == 0 ? b : phL\r\nplL:= ta.lowestbars(low, prd) == 0 ? b : plL\r\ndir = phL>plL ? 1 : -1\r\n\r\n//Delayed\r\nif dir!=dir[1]\r\n    peaks.push(dir>0 ? (ph[1]-pl)/ph[1] : (ph-pl[1])/pl[1])\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Functions {\r\nSwitch(Los)=>\r\n    autocalc = na(peaks.median())?0:peaks.median()\r\n    output = switch step\r\n        \"Auto\"       => Los?low-(low*autocalc):high+(high*autocalc)\r\n        \"Percentage\" => Los?low-(low*perc):high+(high*perc)\r\n        \"Pivot\"      => Los?pl:ph\r\n\r\nCleaner(arr)=>\r\n    if arr.size()>0\r\n        for a in arr\r\n            a.delete()\r\n        arr.clear()\r\n\r\nts = switch tblSize\r\n    \"Tiny\"   => size.tiny\r\n    \"Small\"  => size.small\r\n    \"Normal\" => size.normal\r\n    \"Large\"  => size.large\r\n    \"Huge\"   => size.huge\r\n    \"Auto\"   => size.auto\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Trailing Mangement {\r\nvar longtsl  = Switch(true)\r\nvar shorttsl = Switch(false)\r\nvar pos = 0\r\n\r\nif low<=longtsl\r\n    longtsl  := Switch(true)\r\n    shorttsl := Switch(false)\r\n    pos := -1\r\nif high>=shorttsl\r\n    longtsl  := Switch(true)\r\n    shorttsl := Switch(false)\r\n    pos := 1\r\n\r\npos := bias==\"Bullish\"?1:bias==\"Bearish\"?-1:pos\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Plots {\r\nactive = longtsl==longtsl[1]\r\nlt1 = plot(longtsl,color=active?pos>0?dncol:upcol:na, title=\"TSL\")\r\nst1 = plot(shorttsl,color=active?pos>0?upcol:dncol:na, title=\"TSL\")\r\np1  = plot(close,\"\",color(na),editable=false,display=display.none)\r\n\r\nmid = math.avg(longtsl,shorttsl)\r\nplot(mid,color=active?color.rgb(125, 196, 255):na, style=plot.style_steplinebr, title=\"Mid\")\r\nPosOver  = pos ==-1 and close>mid?na:upcol1\r\nNegUnder = pos ==1 and close<mid?na:dncol1\r\n\r\nfill(p1,lt1,pos>0 and active?color.new(PosOver,80):active?color.new(NegUnder,80):na, title=\"\")\r\nfill(p1,st1,pos>0 and active?color.new(upcol,80):active?color.new(dncol,80):na, title=\"\")\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Table {\r\nif barstate.islast \r\n    tpdist   = pos>0?shorttsl-close:close-longtsl\r\n    sldist   = pos>0?close-longtsl:shorttsl-close\r\n    distdiff = tpdist/sldist\r\n    wr       = (1/(1+distdiff))*100\r\n    if showTable\r\n        var tbl = table.new(posi, 2, 5, frame_color=color.black, frame_width=3, border_width=2, border_color=color.new(color.white, 100))\r\n        tbl.cell(0, 0, 'Risk/Reward', text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        tbl.cell(1, 0, \"1:\"+str.tostring(math.round(distdiff,2)), text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        \r\n        tbl.cell(0,1, 'Minimum Winrate', text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        tbl.cell(1,1, str.tostring(wr,format.percent), text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n\r\n        tbl.cell(0, 2, 'Reward', text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        tbl.cell(1, 2, str.tostring((tpdist/close)*100,format.percent), text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n\r\n        tbl.cell(0, 3, 'Risk', text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        tbl.cell(1, 3, str.tostring((sldist/close)*100,format.percent), text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n\r\n        tbl.cell(0, 4, 'Bias', text_halign=text.align_center, bgcolor=Table_BG, text_color=Table_Text, text_size=ts)\r\n        tbl.cell(1, 4, str.tostring(pos>0?\"Bullish\":\"Bearish\"), text_halign=text.align_center, bgcolor=pos>0?color.rgb(104, 218, 108):color.red, text_color=Table_Text, text_size=ts)\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Break-Even Curve {\r\n    if showBE\r\n        Cleaner(curve)\r\n        top = lo + (hi-lo)/3\r\n        float prev_y = top\r\n        for j=b+100 to b+200 by 1\r\n            y = prev_y-((prev_y-lo)/14)\r\n            curve.push(line.new(j,prev_y,j+1,y,color=color.blue, width=2))\r\n            prev_y := y\r\n\r\n        //Create & Update Frame\r\n        var box box_upper_left  = box.new(na,na,na,na,na, text=\"Zone 2\", text_color = color.white, bgcolor=color.new(color.lime, 80))\r\n        var box box_upper_right = box.new(na,na,na,na,na, text=\"The Magic Zone\",text_color = color.white, bgcolor=color.new(color.lime, 70))\r\n        var box box_lower_left  = box.new(na,na,na,na,na, text =\"Zone 1\", text_color = color.white,bgcolor=color.new(color.green, 70))\r\n        var box box_lower_right = box.new(na,na,na,na,na, text=\"Zone 3\", text_color = color.white,bgcolor=color.new(color.green, 80))\r\n\r\n        box_upper_left.set_lefttop(b+100,top)\r\n        box_upper_left.set_rightbottom(b+150,(top+lo)/2)\r\n        box_upper_right.set_lefttop(b+150,top)\r\n        box_upper_right.set_rightbottom(b+200,(top+lo)/2)\r\n        box_lower_left.set_lefttop(b+100,(top+lo)/2)\r\n        box_lower_left.set_rightbottom(b+150,lo)\r\n        box_lower_right.set_lefttop(b+150,(top+lo)/2)\r\n        box_lower_right.set_rightbottom(b+200,lo)\r\n\r\n        // Delete & Add labels\r\n        Cleaner(labs)\r\n        for i=0 to 10\r\n            labs.push(label.new(chart.point.from_index(b+100,lo+i*(top-lo)/10), str.tostring(i*2)+\"R\", color=color(na), textcolor=chart.fg_color, style=label.style_label_right))\r\n            labs.push(label.new(chart.point.from_index(b+100+i*10, lo), str.tostring(i * 10) + \"%\", color=color(na), textcolor=chart.fg_color, style=label.style_label_up))\r\n\r\n        // Dot for the 'Break-Even Point'\r\n        y = (top-lo)*(distdiff/20)\r\n        dot := label.new(chart.point.from_index(b+100+int(wr),lo+y),\r\n         style=label.style_circle,color=color.yellow,size=size.tiny)\r\n        (dot[1]).delete()\r\n\r\n    // ~~ labels {\r\n    var label stopLossLabel   = na\r\n    var label riskRewardLabel = na\r\n    stoploss   = pos>0?longtsl:shorttsl\r\n    riskreward = pos>0?shorttsl:longtsl\r\n    if labels\r\n        stopLossLabel   := label.new(bar_index+5, stoploss, \"Risk\" +  \" \" + str.tostring((sldist/close)*100,format.percent), color=dncol, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)\r\n        riskRewardLabel := label.new(bar_index+5, riskreward, \"Reward\" + \" \" + str.tostring((tpdist/close)*100,format.percent), color=upcol, textcolor=color.white, style=label.style_label_left, yloc=yloc.price)\r\n        label.delete(stopLossLabel[1])\r\n        label.delete(riskRewardLabel[1])\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\r\n\r\n// ~~ Trend Change\r\nswitchUp = pos==1\r\nswitchDn = pos==-1\r\nplotshape(switchUp and switchDn[1]?longtsl:na, location=location.absolute, style=shape.triangleup, color=upcol, size=size.small, title=\"Positive Trend\")\r\nplotshape(switchDn and switchUp[1]?shorttsl:na, location=location.absolute, style=shape.triangledown ,color=dncol, size=size.small, title=\"Negative Trend\")\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}","updated":"2024-04-04T10:18:05.802123Z","version":"1.0"}