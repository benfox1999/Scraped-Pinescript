{"created":"2024-02-09T23:49:40.934048Z","extra":{"kind":"study","sourceInputsCount":1},"lastVersionMaj":"8.0","scriptAccess":"open_no_auth","scriptName":"AR Forecast Scatterplot [SS]","source":"// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n//  /$$$$$$   /$$                                                         /$$                                            \n// /$$__  $$ | $$                                                        | $$                                            \n//| $$  \\__//$$$$$$    /$$$$$$  /$$    /$$ /$$$$$$   /$$$$$$   /$$$$$$$ /$$$$$$    /$$$$$$  /$$    /$$ /$$$$$$   /$$$$$$$\n//|  $$$$$$|_  $$_/   /$$__  $$|  $$  /$$//$$__  $$ /$$__  $$ /$$_____/|_  $$_/   /$$__  $$|  $$  /$$//$$__  $$ /$$_____/\n// \\____  $$ | $$    | $$$$$$$$ \\  $$/$$/| $$$$$$$$| $$  \\__/|  $$$$$$   | $$    | $$$$$$$$ \\  $$/$$/| $$$$$$$$|  $$$$$$ \n// /$$  \\ $$ | $$ /$$| $$_____/  \\  $$$/ | $$_____/| $$       \\____  $$  | $$ /$$| $$_____/  \\  $$$/ | $$_____/ \\____  $$\n//|  $$$$$$/ |  $$$$/|  $$$$$$$   \\  $/  |  $$$$$$$| $$       /$$$$$$$/  |  $$$$/|  $$$$$$$   \\  $/  |  $$$$$$$ /$$$$$$$/\n// \\______/   \\___/   \\_______/    \\_/    \\_______/|__/      |_______/    \\___/   \\_______/    \\_/    \\_______/|_______/ \n\n//       ___________________\n//      /                   \\\n//     /  _____        _____ \\\n//    /  /     \\      /     \\  \\\n// __/__/       \\____/       \\__\\_____\n//|           ___________           ____|\n// \\_________/           \\_________/\n//            \\  /////// /\n//             \\/////////\n// Â© Steversteves\n//@version=5\nindicator(\"AR Forecast Scatterplot [SS]\", overlay=true, max_lines_count = 500, max_labels_count = 500, max_bars_back = 1000)\n\nimport Steversteves/SPTS_StatsPakLib/1 as spts \n\n//@peacefulLizard50262\nflush(source)=>\n    if source.size() > 0\n        for i = source.size() - 1 to 0\n            source.get(i).delete()\n            source.remove(i)\n\nt1 = \"This will plot a line from the first Result to the last Result for the forecast length\"\nt2 = \"Showing results and variances will plot both the results (blue) and the standard errors based on the variance in the dataset. Only plotting reuslts will only plot the most likely outcome without the variance.\"\nt3 = \"This will omit the need for you to identify the lookback length yourself and will autofind the best lookback period\"\n// Inputs \nsrc =       input.source(close, \"Forecast Source\"),      train1 = input.int(150, \"Train Time\"),        len = input.int(14, \"Forecast Length\"),    \ntyp =       input.string(\"Scatter Plot\", \"Scatter Plot Type\", [\"Line Plot\", \"Scatter Plot\"]),            show_stats = input.bool(true, \"Show Model Statistics\")\nline_bf =   input.bool(true, \"Show Trendline\", tooltip = t1),       show_others = input.string(\"Show Results and Variances\",\"Show Results/Variance\", [\"Show Results and Variances\", \"Show Results Only\"], tooltip = t2)\nautolen =   input.bool(true, \"Use Auto lookback based on strongest trend\", tooltip = t3)\nonlytrend = input.bool(false, \"Only Show Trendline\") \n// Arrays \nresults = array.new_float() \nucl = array.new_float() \nlcl = array.new_float() \n\n// Find Trend\ntrend_finder(len) => \n    ta.correlation(close, time, len) \n\nt50 = trend_finder(50),     t100 = trend_finder(100),       t150 = trend_finder(150),       t200 = trend_finder(200),   t250 = trend_finder(250),       t300 = trend_finder(300),       t350 = trend_finder(350),\nt400 = trend_finder(400),   t450 = trend_finder(450),       t500 = trend_finder(500),       t550 = trend_finder(550),   t600 = trend_finder(600),       t650 = trend_finder(650),       t700 = trend_finder(700),\nstrongest_trend = math.max(t50, t100, t150, t200, t250, t300, t350, t400, t450, t500, t550, t600, t650, t700) \nint find_trend = strongest_trend == t50 ? 50 : strongest_trend == t100 ? 100 : strongest_trend == t150 ? 150 : strongest_trend == t200 ? 200 : strongest_trend == t250 ? 250 : strongest_trend == t300 ? 300 : strongest_trend == t350 ? 350 : strongest_trend == t400 ? 400 : strongest_trend == t450 ? 450 : strongest_trend == t500 ? 500 : strongest_trend == t550 ? 550 : strongest_trend == t600 ? 600 : strongest_trend == t650 ? 650 : strongest_trend == t700 ? 700 : 100\n\nint train = 0 \nif autolen \n    train := find_trend \nelse \n    train := train1\n\n\n// Forecast \n[forecast_result, b, c] = spts.f_forecast(src, src[1], train, len, results, ucl, lcl)\n\n// Model Statistics \ncor = ta.correlation(src, src[len], train) \nr2 = math.pow(cor,2) \nmax_val = array.max(ucl) \nmin_val = array.min(lcl) \n\nf_primary_labels(id) => \n    label.new(bar_index + id, array.get(results, id), text = \"\", color = color.blue, style = label.style_circle, size = size.tiny)\nf_secondary_labels(id) => \n    label.new(bar_index + id, array.get(ucl, id), text = \"\", color = color.lime, style = label.style_circle, size = size.tiny)\nf_secondary_labels2(id) => \n    label.new(bar_index + id, array.get(lcl, id), text = \"\", color = color.red, style = label.style_circle, size = size.tiny)    \nf_primary_line(id) => \n    line.new(bar_index + id, y1 = array.get(results, id), x2 = bar_index + 1 + id, y2 = array.get(results, id), color = color.blue, width = 3)\nf_secondary_line(id) =>     \n    line.new(bar_index + id, y1 = array.get(ucl, id), x2 = bar_index + 1 + id, y2 = array.get(ucl, id), color = color.lime, width = 3)\nf_secondary_line2(id) =>    \n    line.new(bar_index + id, y1 = array.get(lcl, id), x2 = bar_index + 1 + id, y2 = array.get(lcl, id), color = color.red, width = 3)   \n\nvar label1_ar = array.new<label>() \nvar label2_ar = array.new<label>() \nvar label3_ar = array.new<label>() \nvar line1_ar = array.new<line>() \nvar line2_ar = array.new<line>() \nvar line3_ar = array.new<line>() \n\nflush(label1_ar)\nflush(label2_ar)\nflush(label3_ar)\nflush(line1_ar)\nflush(line2_ar)\nflush(line3_ar)\n\nvar forecast_line = array.new<line>()\nflush(forecast_line)\n\nif barstate.islast and line_bf \n    if forecast_result.size() > 0\n        value = 0.0\n        for i = 1 to forecast_result.size() - 1\n            forecast_line.push(line.new(bar_index + i - 1, forecast_result.get(i - 1), bar_index + i , forecast_result.get(i), color = color.purple, width = 3))\n\n\n// Plots \nvar table data = table.new(position.middle_right, 2, 7, bgcolor = color.blue, frame_color = color.rgb(0, 0, 0), frame_width = 4)\nif show_stats \n    table.cell(data, 1, 1, text = \"Model Data\", bgcolor = color.blue, text_color = color.white) \n    table.cell(data, 1, 2, text = \"Correlation: \" + str.tostring(math.round(cor,2)), bgcolor = color.blue, text_color = color.white) \n    table.cell(data, 1, 3, text = \"R2: \" + str.tostring(math.round(r2, 3)), bgcolor = color.blue, text_color = color.white) \n    table.cell(data, 1, 4, text = \"Max Forecasted Value: \" + str.tostring(math.round(max_val, 2)), bgcolor = color.blue, text_color = color.white) \n    table.cell(data, 1, 5, text = \"Min Forecasted Value: \" + str.tostring(math.round(min_val, 2)), bgcolor = color.blue, text_color = color.white) \n    table.cell(data, 1, 6, text = \"Lookback Length: \" + str.tostring(train), bgcolor = color.blue, text_color = color.white) \nif barstate.islast and typ == \"Scatter Plot\" and not onlytrend\n    for idx = 0 to len \n        label1_ar.push(f_primary_labels(idx))\n        if show_others == \"Show Results and Variances\"\n            label2_ar.push(f_secondary_labels(idx))\n            label3_ar.push(f_secondary_labels2(idx))\n\nif barstate.islast and typ == \"Line Plot\" and not onlytrend\n    for idx = 0 to len \n        line1_ar.push(f_primary_line(idx))\n        if show_others == \"Show Results and Variances\"\n            line2_ar.push(f_secondary_line(idx))\n            line3_ar.push(f_secondary_line2(idx))\n\n\n","updated":"2024-02-09T23:49:40.934048Z","version":"8.0"}