{"created":"2024-06-15T17:00:04.351608Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Sharpe and Sortino Ratios","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © TradingView\n\n//@version=5\nindicator(\"Sharpe and Sortino Ratios\")\n \n// Sharpe and Sortino Ratios\n// v1, 2024.06.15\n\n// This code was written using the recommendations from the Pine Script™ User Manual's Style guide:\n//    https://www.tradingview.com/pine-script-docs/en/v5/writing/Style_guide.html\n\n\n\nimport TradingView/RiskMetrics/1 as TVrm\nimport TradingView/ta/7 as TVta\n\n\n\n//#region ———————————————————— Constants and Inputs\n\n\n// Constants\nstring BM01     = \"Fixed rate of return (%)\"\nstring BM02     = \"Benchmark symbol returns\"\ncolor  WHITE    = color.white\ncolor  GRAY30   = color.new(color.gray, 30)\ncolor  GRAY60   = color.new(color.gray, 60)\ncolor  ORANGE80 = color.new(color.orange, 80)\ncolor  AQUA80   = color.new(color.aqua, 80)\n\n// Tooltips\nstring TT_TF = \"Timeframe of the sampled returns.\"\nstring TT_NT = \"Maximum number of periods to analyze. Periods are monthly if the chart's data spans at least\n     two months or daily if it spans at least two days. This script will not calculate periods for datasets spanning\n     less than two days.\"\nstring TT_FI = \"Type of benchmark to compare against the chart symbol's returns:\\n\n     - If 'Fixed rate of return (%)', compares chart symbol returns to a fixed annual percentage benchmark.\\n\n     - If 'Benchmark symbol returns', compares chart symbol returns to the returns from a benchmark symbol\n     (e.g., 'AMEX:SPY') to calculate Information ratios.\"\nstring TT_PT = \"Annual fixed rate of return to compare when the benchmark type is 'Fixed rate of return (%)'.\"\nstring TT_SY = \"Symbol to compare when the benchmark type is 'Benchmark symbol returns'.\"\n\n// Specify the timeframe of the returns, the number of calculation periods to analyze, and the performance benchmark.\nstring tfInput         = input.timeframe(\"1M\",    \"Returns timeframe\",                tooltip = TT_TF) \nint    numOfTFsInput   = input.int(60,            \"Max no. of periods used\",          tooltip = TT_NT) \nbool   useFixedInput   = input.string(BM01,       \"Benchmark return type\",            tooltip = TT_FI, options = [BM01, BM02]) == BM01\nfloat  percentageInput = input.float(2,           \"    Risk-free rate of return (%)\", tooltip = TT_PT, minval = 0) \nstring symbolInput     = input.symbol(\"AMEX:SPY\", \"    Benchmark symbol\",             tooltip = TT_SY)\n\n// Group to control the appearance of the info table. \nstring GRP1                 = \"Info table\"\nbool   showInfoBoxInput     = input.bool(true,       \"Show info table\",                group = GRP1)\nstring infoBoxSizeInput     = input.string(\"normal\", \"Size \",           inline = \"21\", group = GRP1, options = [\"tiny\", \"small\", \"normal\", \"large\", \"huge\", \"auto\"])\nstring infoBoxYPosInput     = input.string(\"bottom\", \"↕\",               inline = \"21\", group = GRP1, options = [\"top\", \"middle\", \"bottom\"])\nstring infoBoxXPosInput     = input.string(\"right\",  \"↔\",               inline = \"21\", group = GRP1, options = [\"left\", \"center\", \"right\"])\ncolor  infoBoxColorInput    = input.color(GRAY30,    \"\",                inline = \"21\", group = GRP1)\ncolor  infoBoxTxtColorInput = input.color(WHITE,     \"\",                inline = \"21\", group = GRP1)\n//#endregion\n\n\n\n//#region ———————————————————— Functions \n\n\n// @function            Requests aligned prices from the chart's symbol and an `altSymbol` for statistical comparison.\n//                      Utilizes spread tickers to ensure the times of requested prices maintain consistent time \n//                      alignment with the periodic points on the current chart.\n// @param altSymbol     (simple string) The symbol to align with the chart's symbol. For consistency, the spreads \n//                      formed by this symbol and the chart's use extended hours and dividend adjustment modifiers, and \n//                      they inherit additional settings from the chart, including \"settlement-as-close\" preferences. \n// @param timeframe     (simple string) The timeframe of the aligned data request. Must be greater than or equal to  \n//                      the chart's timeframe. \n// @param offset        (simple int) The bar offset applied to the requested prices. Use a value greater than or equal \n//                      to 1 to prevent lookahead bias in requested HTF historical data.\n// @returns             ([series float, series float, series float, series float]) A tuple containing the aligned \n//                      current and previous prices from the chart's symbol and the modified `altSymbol` on the \n//                      specified `timeframe`.\ngetAlignedPrices(simple string altSymbol, simple string timeframe, simple int offset = 0) =>\n    var string standard1 = ticker.standard(syminfo.tickerid)\n    var string standard2 = ticker.standard(altSymbol)\n    var string sumSpread = ticker.modify(\n         ticker.inherit(syminfo.tickerid, standard1 + \"+\" + standard2), session.extended, adjustment.dividends\n     )\n    var string diffSpread = ticker.modify(\n         ticker.inherit(syminfo.tickerid, standard1 + \"-\" + standard2), session.extended, adjustment.dividends\n     )\n    float currPrice = close[offset]\n    float prevPrice = nz(close[offset + 1], open[offset])\n    [currSum, prevSum] = request.security(\n         sumSpread, timeframe, [currPrice, prevPrice], barmerge.gaps_on, barmerge.lookahead_on\n     )\n    [currDiff, prevDiff] = request.security(\n         diffSpread, timeframe, [currPrice, prevPrice], barmerge.gaps_on, barmerge.lookahead_on\n     )\n    [0.5 * (currSum + currDiff), 0.5 * (currSum - currDiff), 0.5 * (prevSum + prevDiff), 0.5 * (prevSum - prevDiff)]\n//#endregion\n\n\n\n//#region ———————————————————— Calculations\n\n\n// @variable `true` if the chart's data spans at least two months, `false` if at least two days, `na` otherwise.\nvar bool useMonths = TVrm.detectPeriod()\n// @variable `true` if the selected timeframe is higher than the current chart's timeframe.\nvar bool isHtf = timeframe.in_seconds(tfInput) > timeframe.in_seconds()\n// @variable The fixed annual rate of return used when `useFixedInput` is `true`, 0 otherwise.\nvar float fixedReturn = useFixedInput ? percentageInput : 0.0\n// @variable The estimated fixed rate of return per period, depending on the length of the dataset's history.\nvar float fixedPeriodReturn = fixedReturn / (na(useMonths) ? na : useMonths ? 12 : 365)\n\n// Request prices for the chart's symbol on the `tfInput` timeframe with full history to compare with the `fixedReturn`.\n[htfCurrent, htfPrevious] = request.security(\n     syminfo.tickerid, tfInput, [close[1], nz(close[2], open[1])], barmerge.gaps_on, barmerge.lookahead_on\n )\n// Request aligned prices for the chart symbol and `symbolInput` on the `tfInput` with modifiers for direct comparison.\n[chartVal, benchVal, chartVal1, benchVal1] = getAlignedPrices(symbolInput, timeframe.period)\n[htfChart, htfBench, htfChart1, htfBench1] = getAlignedPrices(symbolInput, tfInput, 1)\n\n// Determine the price values from the current symbol and the `symbolInput` used for returns calculations.\nfloat chartPrice  = useFixedInput ? (isHtf ? htfCurrent : close) : (isHtf ? htfChart : chartVal)\nfloat chartPrice1 = useFixedInput ? (isHtf ? htfPrevious : nz(close[1], open)) : (isHtf ? htfChart1 : chartVal1)\nfloat benchPrice  = isHtf ? htfBench : benchVal\nfloat benchPrice1 = isHtf ? htfBench1 : benchVal1\n\n// @variable The chart symbol's sampled percent change value.\nfloat chartReturn = TVta.changePercent(chartPrice, chartPrice1)\n// @variable The benchmark symbol's sampled percent change value. Returns 0 when `useFixedInput` is `true`.\nfloat benchReturn = useFixedInput ? 0.0 : TVta.changePercent(benchPrice, benchPrice1)\n\n// @variable The array of monthly or daily returns used in the ratio calculations.\narray<float> periodicReturns = TVrm.getPeriodicReturns(chartReturn, benchReturn, numOfTFsInput)\n\n// @variable The Sharpe ratio of the `periodicReturns`.\nfloat sharpe = TVrm.sharpeRatio(periodicReturns, fixedReturn)\n// @variable The Sortino ratio of the `periodicReturns`.\nfloat sortino = TVrm.sortinoRatio(periodicReturns, fixedReturn)\n\n// Create arrays of periodic returns from `chartReturn` and `benchReturn` values for display calculations.\narray<float> symbolChanges    = TVrm.getPeriodicReturns(chartReturn, numOfTFsInput)\narray<float> benchmarkChanges = useFixedInput ? na : TVrm.getPeriodicReturns(benchReturn, numOfTFsInput)\n// @variable The average return value in the `symbolChanges` array.\nfloat avgSymbolChange = symbolChanges.avg()\n// @variable The average periodic benchmark return.\nfloat avgBenchmarkChange = useFixedInput ? fixedPeriodReturn : benchmarkChanges.avg()\n// @variable Condition that indicates when new data is available if the `tfInput` is a higher timeframe.\nbool isNewPeriod = isHtf and not na(chartReturn)\n//#endregion\n\n\n\n//#region ———————————————————— Errors and outputs\n\n\n// Raise an error if the `tfInput` is smaller than the chart's timeframe.\nif timeframe.in_seconds(tfInput) < timeframe.in_seconds()\n    runtime.error(\"For accurate ratios, the requested TF must be greater than or equal to the TF of the chart.\")\n\n// @variable The `chartReturn` series with `na` masking for display purposes.\nfloat chartReturnDisplay = fixnan(chartReturn)\n// @variable The `benchReturn` series with `na` masking for display purposes, or `na` if `useFixedInput` is `true`.\nfloat benchReturnDisplay = fixnan(useFixedInput ? na : benchReturn)\n// Main plot, fill, and background colors\ncolor plotColor = isNewPeriod ? color(na) : chartReturnDisplay < 0.0 ? color.orange : color.aqua\ncolor fillColor = isNewPeriod ? color(na) : chartReturnDisplay < 0.0 ? ORANGE80 : AQUA80\ncolor bgColor   = not isNewPeriod ? color(na) : chartReturnDisplay < 0.0 ? ORANGE80 : AQUA80\n\n// Plot the `chartReturnDisplay` and 0, then fill the space between them.\nsymbolChangePlot = plot(chartReturnDisplay, \"Chart symbol return\", plotColor, precision = 2, format = format.percent)\nzeroPlot         = plot(0, \"Zero level\", color.new(color.gray, 60), display = display.pane)\nfill(symbolChangePlot, zeroPlot, fillColor, \"Chart symbol return fill\")\n// Plot the `benchReturnDisplay` value for visual comparison when `useFixedInput` is `false`.\nplot(benchReturnDisplay, \"Benchmark symbol return\", color.gray, 2, precision = 2, format = format.percent)\n// Highlight the main chart's background when `isNewPeriod` to signify the direction of `chartReturnDisplay`.\nbgcolor(bgColor, title = \"Background highlight\", force_overlay = true)\n\n// Plot the average chart symbol and benchmark returns alongside the Sharpe and Sortino ratios in the Data Window.\ndataWindow = display.data_window \nplot(avgSymbolChange,    \"Avg. chart symbol return\", color.purple, display = dataWindow, format = format.percent)\nplot(avgBenchmarkChange, \"Avg. benchmark return\",    color.blue,   display = dataWindow, format = format.percent)\nplot(sharpe,  \"Sharpe\",  sharpe  > 0 ? color.teal : color.maroon, precision = 5, display = dataWindow)\nplot(sortino, \"Sortino\", sortino > 0 ? color.teal : color.maroon, precision = 5, display = dataWindow)\n\n// Display the base period, number of periods, returns timeframe, and the calculated ratios in a table on the last bar.\nif barstate.islast and showInfoBoxInput\n    var table tfDisplay = table.new(str.format(\"{0}_{1}\", infoBoxYPosInput, infoBoxXPosInput), 1, 1)\n    string periodStr = na(useMonths) ? string(na) : useMonths ? \"1M\" : \"1D\"\n    string tableTxt  = str.format(\n         \"Calculation base period:  {0}\n         \\n# of calculation periods: {1}\n         \\nReturns timeframe:        {2}\n         \\nSharpe ratio:             {3}\n         \\nSortino ratio:            {4}\",\n         periodStr, periodicReturns.size(), \n         tfInput == \"\" ? (timeframe.isdwm and timeframe.multiplier == 1 ? \"1\" : \"\") + timeframe.period : tfInput, \n         str.tostring(sharpe, \"#.#####\"), str.tostring(sortino, \"#.#####\")\n     )\n    table.cell(\n         tfDisplay, 0, 0, tableTxt, bgcolor = infoBoxColorInput, text_color = infoBoxTxtColorInput, \n         text_size = infoBoxSizeInput, text_halign = text.align_left, text_font_family = font.family_monospace\n     )\n//#endregion\n","updated":"2024-06-15T17:00:04.351608Z","version":"1.0"}