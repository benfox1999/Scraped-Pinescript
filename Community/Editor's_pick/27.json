{"created":"2023-11-22T17:19:11.879512Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"Dividend Calendar (Zeiierman)","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\n//@version=5\n// © Zeiierman {\n\n// ~~ Description {\n_= \"\n The Dividend Calendar (Zeiierman) is a financial tool designed to assist investors and analysts in the stock market by providing    \n a schedule of expected dividend payments from various companies. This tool is essential for investors focusing on dividend income,                                                                                                                          \n as it helps them effectively plan and manage their investment strategies. It offers a comprehensive view of dividend payout dates,                \n aiding in informed decision-making and optimizing dividend income through timely stock transactions. Additionally, the Dividend Calendar                                                                                                                                          \n is useful for forecasting cash flow and evaluating the financial stability and consistency of dividend payments from different companies.\"\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\n\n//@version=5\nindicator(\"Dividend Calendar (Zeiierman)\",overlay=true)\n//~~}\n\n// ~~ Inputs {\n// ~~ Tooltips {\nt1 = \"The first input box is for the currency of the dividends. It is set to USD by default, which means that all dividend values are displayed in USD. You can change this to your local currency. \\n\\nSelect if you want to show the Ex-dividend day or the Actual Payout day. \\n\\nEstimate Forward enables traders to predict future dividends.\"\nt2 = \"2Choose whether you want to view the full dividend calendar, just the cumulative monthly dividend, or a summary. \\n\\nEnable dividend growth based on the number of years.\"\nt3 = \"The first input field is where you specify the stock from which you want to track the dividend. \\n\\nThe second input field is the number of shares you hold in that particular stock. \\n\\nThe third input field enables you to customize the dividend payout amount. \\n\\nThe fourth input field allows you to customize the payout months. For example, type it like this: 1,2,3,5, which corresponds to January, February, March, and May.\"\n//~~}\n\n// ~~ Inputs {\n//General inputs\nuserCurrency = input.string(\"USD\",\"Currency        \",group=\"Dividend Calendar\", inline=\"Currency\")\nxday         = input.string(\"Ex-Date\",\"\",options=[\"Ex-Date\",\"Pay-Date\"],group=\"Dividend Calendar\",inline=\"Currency\")\nestimate     = input.bool(true,\"Estimate Forward\",group=\"Dividend Calendar\",inline=\"Currency\", tooltip=t1)\n\n//Table\ntableDesign  = input.string(\"Full Calendar\",\"Dividend Table\",[\"Full Calendar\",\"Monthly\",\"Summary\"],group=\"Dividend Calendar\",inline=\"Calendar\")\nshowGrowth   = input.bool(false,\"Growth\",group=\"Dividend Calendar\",inline=\"Calendar\")\ngrowthyears  = input.int(5,\"\",minval=2,group=\"Dividend Calendar\",inline=\"Calendar\", tooltip=t2)\n\n//Stocks & user inputs\nh1   = input.bool(true,\"Customize | Tickers | Shares | Custom Payout | Custom Month (1,4)\", group=\"Dividend Calendar\", inline=\"\", tooltip=t3)\n\nshow = array.from(\n input.bool(true, \"\", inline = \"00\"), \n input.bool(true, \"\", inline = \"01\"), \n input.bool(true, \"\", inline = \"02\"), \n input.bool(true, \"\", inline = \"03\"), \n input.bool(true, \"\", inline = \"04\"), \n input.bool(true, \"\", inline = \"05\"), \n input.bool(true, \"\", inline = \"06\"), \n input.bool(true, \"\", inline = \"07\"), \n input.bool(true, \"\", inline = \"08\"), \n input.bool(true, \"\", inline = \"09\"),\n input.bool(false, \"\", inline = \"10\"), \n input.bool(false, \"\", inline = \"11\"), \n input.bool(false, \"\", inline = \"12\"), \n input.bool(false, \"\", inline = \"13\"), \n input.bool(false, \"\", inline = \"14\"), \n input.bool(false, \"\", inline = \"15\"), \n input.bool(false, \"\", inline = \"16\"), \n input.bool(false, \"\", inline = \"17\"), \n input.bool(false, \"\", inline = \"18\"), \n input.bool(false, \"\", inline = \"19\")\n )\n\ns00 = input.symbol(\"KO\", \"\", inline = \"00\")\ns01 = input.symbol(\"JNJ\", \"\", inline = \"01\")\ns02 = input.symbol(\"PG\", \"\", inline = \"02\")\ns03 = input.symbol(\"AWR\", \"\", inline = \"03\")\ns04 = input.symbol(\"TXN\", \"\",   inline = \"04\")\ns05 = input.symbol(\"O\", \"\",    inline = \"05\")\ns06 = input.symbol(\"BLK\", \"\",  inline = \"06\")\ns07 = input.symbol(\"LMT\", \"\", inline = \"07\")\ns08 = input.symbol(\"DOV\", \"\", inline = \"08\")\ns09 = input.symbol(\"ADP\", \"\",  inline = \"09\")\ns10 = input.symbol(\"MCD\", \"\", inline = \"10\")\ns11 = input.symbol(\"WMT\", \"\", inline = \"11\")\ns12 = input.symbol(\"NWN\", \"\", inline = \"12\")\ns13 = input.symbol(\"VZ\", \"\", inline = \"13\")\ns14 = input.symbol(\"T\", \"\",   inline = \"14\")\ns15 = input.symbol(\"INTC\", \"\",    inline = \"15\")\ns16 = input.symbol(\"PFE\", \"\",  inline = \"16\")\ns17 = input.symbol(\"CVX\", \"\", inline = \"17\")\ns18 = input.symbol(\"XOM\", \"\", inline = \"18\")\ns19 = input.symbol(\"AA\", \"\",  inline = \"19\")\n\nshares = array.from(\n input.int(100, title=\"\", inline = \"00\"),\n input.int(100, title=\"\", inline = \"01\"),\n input.int(100, title=\"\", inline = \"02\"),\n input.int(100, title=\"\", inline = \"03\"),\n input.int(100, title=\"\", inline = \"04\"),\n input.int(100, title=\"\", inline = \"05\"),\n input.int(100, title=\"\", inline = \"06\"),\n input.int(100, title=\"\", inline = \"07\"),\n input.int(100, title=\"\", inline = \"08\"),\n input.int(100, title=\"\", inline = \"09\"),\n input.int(100, title=\"\", inline = \"10\"),\n input.int(100, title=\"\", inline = \"11\"),\n input.int(100, title=\"\", inline = \"12\"),\n input.int(100, title=\"\", inline = \"13\"),\n input.int(100, title=\"\", inline = \"14\"),\n input.int(100, title=\"\", inline = \"15\"),\n input.int(100, title=\"\", inline = \"16\"),\n input.int(100, title=\"\", inline = \"17\"),\n input.int(100, title=\"\", inline = \"18\"),\n input.int(100, title=\"\", inline = \"19\")\n )\n\ncustomPayout = array.from(\n input.float(0, title=\"\", inline = \"00\"),\n input.float(0, title=\"\", inline = \"01\"),\n input.float(0, title=\"\", inline = \"02\"),\n input.float(0, title=\"\", inline = \"03\"),\n input.float(0, title=\"\", inline = \"04\"),\n input.float(0, title=\"\", inline = \"05\"),\n input.float(0, title=\"\", inline = \"06\"),\n input.float(0, title=\"\", inline = \"07\"),\n input.float(0, title=\"\", inline = \"08\"),\n input.float(0, title=\"\", inline = \"09\"),\n input.float(0, title=\"\", inline = \"10\"),\n input.float(0, title=\"\", inline = \"11\"),\n input.float(0, title=\"\", inline = \"12\"),\n input.float(0, title=\"\", inline = \"13\"),\n input.float(0, title=\"\", inline = \"14\"),\n input.float(0, title=\"\", inline = \"15\"),\n input.float(0, title=\"\", inline = \"16\"),\n input.float(0, title=\"\", inline = \"17\"),\n input.float(0, title=\"\", inline = \"18\"),\n input.float(0, title=\"\", inline = \"19\")\n )\n\ncustomMonth = array.from(\n input.string(\"\",\"\",inline=\"00\"),\n input.string(\"\",\"\",inline=\"01\"),\n input.string(\"\",\"\",inline=\"02\"),\n input.string(\"\",\"\",inline=\"03\"),\n input.string(\"\",\"\",inline=\"04\"),\n input.string(\"\",\"\",inline=\"05\"),\n input.string(\"\",\"\",inline=\"06\"),\n input.string(\"\",\"\",inline=\"07\"),\n input.string(\"\",\"\",inline=\"08\"),\n input.string(\"\",\"\",inline=\"09\"),\n input.string(\"\",\"\",inline=\"10\"),\n input.string(\"\",\"\",inline=\"11\"),\n input.string(\"\",\"\",inline=\"12\"),\n input.string(\"\",\"\",inline=\"13\"),\n input.string(\"\",\"\",inline=\"14\"),\n input.string(\"\",\"\",inline=\"15\"),\n input.string(\"\",\"\",inline=\"16\"),\n input.string(\"\",\"\",inline=\"17\"),\n input.string(\"\",\"\",inline=\"18\"),\n input.string(\"\",\"\",inline=\"19\")\n )\n\n//Table design\npos          = input.string(position.top_right, title=\"Position\",options =[position.top_right,position.top_center,\n position.top_left,position.bottom_right,position.bottom_center,position.bottom_left,position.middle_right,position.middle_left],group=\"Style\",inline=\"tbl\")\nTblSize      = input.string(size.auto,title=\"\",options=[size.auto,size.tiny,size.small,size.normal,size.large,size.huge],group=\"Style\",inline=\"tbl\")\nbullbackgr   = input.color(#11132d,\"Bg\",group=\"Style\",inline=\"tbl\")\nframe        = input.color(color.rgb(255, 255, 255),\"Frame\",group=\"Style\",inline=\"tbl\")\ntextcol      = input.color(color.white,\"Text\",group=\"Style\",inline=\"col\")\ncol_1        = input.color(color.new(#60e565, 80),title=\"Divended\",  group=\"Style\",inline=\"col\")\ncol_2        = input.color(color.new(#1848cc, 80),title=\"Summary\", group=\"Style\",inline=\"col\")\ncol_3        = input.color(#0c3299,\"Header\", group=\"Style\",inline=\"col\")\ncol_4        = input.color(#1848cc,\"\", group=\"Style\",inline=\"col\")\n//~~}\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\n\n// ~~ Functions {\n//Estimation\nEstimate(mat)=>\n    date = math.round(str.tonumber(str.format_time(time,\"MM\")))\n    for [i,row] in mat\n        max = row.max()\n        for j=date-1 to 11\n            if mat.get(i,j)!=0\n                mat.set(i,j,max)\n\n//Sum the months and stocks\nSum(arr,ft)=>\n    newArray = array.new<float>()\n    for i=0 to (ft?arr.columns():arr.rows())-1\n        newArray.push(math.round((ft?arr.col(i).sum():arr.row(i).sum()),2))\n    newArray\n\n//Stock dividend growth \nGrowth(growth)=>\n    growthArray = array.new<float>()\n    for [i,g] in growth\n        percentages = array.new<float>()\n        pays = g.gr\n        for j=1 to pays.size()-1\n            pres = pays.get(j)\n            prev = pays.get(j-1)\n            perc = (pres-prev)/prev\n            percentages.push(perc)\n        growthArray.push(percentages.avg())\n    growthArray\n\n//Table header design\nTableBG(col)=>\n    even = array.from(0,2,4,6,8,10,12)\n    odd  = array.from(1,3,5,7,9,11)\n    if even.includes(col)\n        color.new(col_3,25)\n    else\n        col_4\n\n//Switch text in Summary Table\nTextSwitch(t1,t2)=>\n    varip txtchange = true\n    txtchange := not txtchange\n    txt = txtchange ? t1 : t2\n\n//Custom month if user enteres custom months using \",\" as reference. Example \"1,4,7,10\"\nmethod CustomMonth(matrix<float> m,i,cash)=>\n    user_input = customMonth.get(i)\n    if str.contains(user_input,\",\")\n        split = str.split(user_input,\",\")\n        for mon in split\n            m.set(i,math.round(str.tonumber(mon))-1,cash)\n    else\n        m.set(i,math.round(str.tonumber(user_input))-1,cash)\n\n//Get stock data\nRequests(ticker)=>\n    tickerid = str.replace(ticker,\":\",\";\",0)\n    payTime = request.security(\"ESD_FACTSET:\"+tickerid+\";DIVIDENDS\",\"D\",time,lookahead=barmerge.lookahead_on,currency=userCurrency)\n    payOut = request.security(\"ESD_FACTSET:\"+tickerid+\";DIVIDENDS\",\"D\",close,lookahead=barmerge.lookahead_on,currency=userCurrency)\n    [payTime,payOut]\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\n\n// ~~ UDT's & Variables & Arrays {\n\n// ~~ UDT {\ntype Growth\n    array<float> gr\n\n//~~}\n\n// ~~ Variables {\nvar refreshcount = 0 \n\n//Table\nvar tbl = table.new(pos, 15,30,bullbackgr,frame,2,frame,2)\n\n//Request the data\n[l00, t00] = Requests(s00)\n[l01, t01] = Requests(s01)\n[l02, t02] = Requests(s02)\n[l03, t03] = Requests(s03)\n[l04, t04] = Requests(s04)\n[l05, t05] = Requests(s05)\n[l06, t06] = Requests(s06)\n[l07, t07] = Requests(s07)\n[l08, t08] = Requests(s08)\n[l09, t09] = Requests(s09)\n[l10, t10] = Requests(s10)\n[l11, t11] = Requests(s11)\n[l12, t12] = Requests(s12)\n[l13, t13] = Requests(s13)\n[l14, t14] = Requests(s14)\n[l15, t15] = Requests(s15)\n[l16, t16] = Requests(s16)\n[l17, t17] = Requests(s17)\n[l18, t18] = Requests(s18)\n[l19, t19] = Requests(s19)\n\n//Alert\nalert = false\nalert_msg = \"\"\n\n//~~}\n\n// ~~ Arrays {\n\n//Symbols array\nsymbols = array.from(\n s00,\n s01,\n s02,\n s03,\n s04,\n s05,\n s06,\n s07,\n s08,\n s09,\n s10,\n s11,\n s12,\n s13,\n s14,\n s15,\n s16,\n s17,\n s18,\n s19\n )\n\n// Paytime array\npayTime = array.from(\n l00,\n l01,\n l02,\n l03,\n l04,\n l05,\n l06,\n l07,\n l08,\n l09,\n l10,\n l11,\n l12,\n l13,\n l14,\n l15,\n l16,\n l17,\n l18,\n l19\n )\n\n// Payout array\npayOut = array.from(\n t00,\n t01,\n t02,\n t03,\n t04,\n t05,\n t06,\n t07,\n t08,\n t09,\n t10,\n t11,\n t12,\n t13,\n t14,\n t15,\n t16,\n t17,\n t18,\n t19\n )\n\n//Months\nmonths = array.from(\n \"January\",\n \"February\",\n \"Mars\",\n \"April\",\n \"May\",\n \"June\",\n \"July\",\n \"August\",\n \"September\",\n \"Oktober\",\n \"November\",\n \"December\"\n )\n\n// Matrix to store the data\nvar data = matrix.new<float>(20,12,0)\nvar growth = array.new<Growth>()\n\n//~~}\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\n\n// ~~ Main {\n\nif barstate.isfirst\n    for i=0 to 19\n        growth.push(Growth.new(array.new<float>()))\n\nif year!=year[1]\n    for [i,save] in growth\n        save.gr.push(data.row(i).sum())\n        if save.gr.size()>growthyears\n            save.gr.shift()\n    refreshcount+=1\n    if refreshcount>=2\n        refreshcount := 0\n        data := matrix.new<float>(20,12,0)\nelse\n    for [i,val] in payTime\n        if show.get(i)\n            amount = customPayout.get(i)==0?\n             payOut.get(i)*shares.get(i):\n             customPayout.get(i)\n            if customMonth.get(i)!=\"\"\n                data.CustomMonth(i,amount)\n            else if time==val\n                date = math.round(str.tonumber(str.format_time(time,\"MM\")))\n                data.set(i,xday==\"Ex-Date\"?date-1:(date>=12?0:date),amount)\n                alert := true\n                alert_msg += str.split(symbols.get(i),\":\").get(1)\n                 + \" \" +\n                 xday + \n                 \" with a payout of: \" + \n                 str.tostring(amount) + \n                 \"\\n\"\nif estimate\n    Estimate(data)\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}\n\n// ~~ Plots & Outputs {\n\n// ~~ Table {\nif barstate.islast and timeframe.period=='D'\n    //Month Total\n    monthTotal = Sum(data,true)\n    //Stock Yearly Total\n    stockTotal = Sum(data,false)\n\n    //Full Calendar & Monthly\n    if tableDesign==\"Full Calendar\" or tableDesign==\"Monthly\"\n        //Table Display\n        //Months\n        for [i,m] in months\n            tbl.cell(i+1,0,m,text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace,bgcolor=TableBG(i))\n        //Month Total\n        tbl.cell(0,1,\"Total\",text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace)\n        for [i,mon] in monthTotal\n            tbl.cell(i+1,1,str.tostring(mon),text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace,\n             bgcolor=color.from_gradient(mon,monthTotal.min(),monthTotal.max(),\n             color.new(col_1,90),color.new(col_1,20)))\n        if tableDesign==\"Monthly\"\n            tbl.cell(13,1,str.tostring(math.round(monthTotal.sum(),2)),\n             bgcolor=bullbackgr,text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace)  \n\n        if tableDesign==\"Full Calendar\"\n            //Stock Total\n            tbl.cell(13,1,str.tostring(math.round(monthTotal.sum(),2)),text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace)\n            for [i,st] in stockTotal\n                if show.get(i)\n                    tbl.cell(13,i+2,str.tostring(st),text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace,\n                     bgcolor=color.from_gradient(st,stockTotal.min(),stockTotal.max(),\n                     color.new(col_2,90),color.new(col_2,20)))\n            // Stocks\n            for [i,sy] in symbols\n                if show.get(i)\n                    tbl.cell(0,i+2,str.split(sy,\":\").get(1),text_color=textcol,text_size=TblSize,\n                     text_font_family=font.family_monospace)\n                    for j=0 to 11\n                        tbl.cell(j+1,i+2,str.tostring(math.round(data.get(i,j),2)),\n                         text_color=textcol,text_size=TblSize,text_font_family=font.family_monospace,\n                         bgcolor=math.round(data.get(i,j),2)!=0?color.from_gradient(math.round(data.get(i,j),2),\n                         data.min(),data.max(),\n                         color.new(col_1,90),color.new(col_1,20)):bullbackgr)\n            tbl.cell(0,0,\"💰\")\n            tbl.cell(13,0,\"💰\")\n\n            //Growth\n            if showGrowth\n                growthArray = Growth(growth)\n\n                for [i,perc] in growthArray\n                    if show.get(i)\n                        tbl.cell(14,i+2,str.tostring(perc*100,format.percent),text_color=textcol,text_size=TblSize,\n                         text_font_family=font.family_monospace,bgcolor=bullbackgr)\n\n//Income Table\n    if tableDesign==\"Summary\"\n        monMax = monthTotal.max()\n        monMin = monthTotal.min()\n        stoMax = stockTotal.max()\n        stoMin = stockTotal.min()\n\n        info = array.from(TextSwitch(\"Best month\",months.get(monthTotal.indexof(monMax))),\n         TextSwitch(\"Worst month\",months.get(monthTotal.indexof(monMin))),\n         TextSwitch(\"Highest paid stock\",str.split(symbols.get(stockTotal.indexof(stoMax)),\":\").get(1)),\n         TextSwitch(\"Lowest paid stock\",str.split(symbols.get(stockTotal.indexof(stoMin)),\":\").get(1)))\n\n        values = array.from(monMax,monMin,stoMax,stoMin)\n\n        for [i,desc] in info\n            tbl.cell(0,i,desc,bgcolor=bullbackgr,text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace)\n            tbl.cell(1,i,str.tostring(values.get(i)),bgcolor=bullbackgr,text_color=textcol,text_size=TblSize,\n             text_font_family=font.family_monospace)\n\n        summary   = array.from(\"Yearly\",\"Quarterly\",\"Monthly\",\"Daily\")\n        income    = stockTotal.sum()\n        sumIncome = array.from(income,income/4,income/12,income/365)\n        for [i,inc] in sumIncome\n            tbl.cell(2,i,summary.get(i),text_color=textcol,text_size=TblSize,text_font_family=font.family_monospace)\n            tbl.cell(3,i,str.tostring(math.round(inc,2)),text_color=textcol,text_size=TblSize,text_font_family=font.family_monospace)\n\n//Error table\nif timeframe.period!='D'\n    tbl.cell(0,0,\"Error Message: Please go to the Daily Timeframe\",\n     bgcolor=color.new(color.red,50),text_color=textcol,text_size=TblSize,\n      text_font_family=font.family_monospace)\n//~~}\n\n// ~~ Alerts { \nif alert\n    alert(alert_msg,alert.freq_once_per_bar)\n//~~}\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}","updated":"2023-11-22T17:19:11.879512Z","version":"1.0"}