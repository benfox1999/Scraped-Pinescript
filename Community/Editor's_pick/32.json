{"created":"2023-10-24T15:10:27.82188Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"MA Sabres [LuxAlgo]","source":"// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/\n// Â© LuxAlgo\n\n//@version=5\nindicator('MA Sabres [LuxAlgo]', shorttitle='LuxAlgo - MA Sabres', max_polylines_count=100, overlay=true)\n\n//------------------------------------------------------------------------------\n//Settings\n//-----------------------------------------------------------------------------{\ntype       = input.string(  \"TEMA\" ,               'MA Type'               , group=   'MA'\n , options =   [\"SMA\", \"EMA\", \"SMMA (RMA)\", \"HullMA\", \"WMA\", \"VWMA\", \"DEMA\", \"TEMA\", \"NONE\"])\nlen        = input.int   (    50   ,                'Length'               , group=   'MA'  )\ncount      = input.int   (    20   ,       'Previous Trend Duration'       , group=   'MA'  \n , tooltip =                    'Reversal after x bars in the same direction'               )\ncolUp      = input.color (#2962ff,               'Bullish'               , group='Colours')\ncolDn      = input.color (#f23645,               'Bearish'               , group='Colours')\ncolMa      = input.color (#787b86,                  'MA'                 , group='Colours')\n\n\n//-----------------------------------------------------------------------------}\n//Method MA\n//-----------------------------------------------------------------------------{\nmethod ma(string type, int length) =>\n    //\n    ema1 = ta.ema(close, length)\n    ema2 = ta.ema(ema1 , length)\n    ema3 = ta.ema(ema2 , length)\n    //\n    switch type\n        \"SMA\"        => ta.sma (close, length)\n        \"EMA\"        => ema1\n        \"SMMA (RMA)\" => ta.rma (close, length)\n        \"HullMA\"     => ta.hma (close, length)\n        \"WMA\"        => ta.wma (close, length)\n        \"VWMA\"       => ta.vwma(close, length)\n        \"DEMA\"       =>  2 * ema1  -      ema2\n        \"TEMA\"       => (3 * ema1) - (3 * ema2) + ema3\n        => na\n\n\n//-----------------------------------------------------------------------------}\n//Calculations\n//-----------------------------------------------------------------------------{\nma    =            type.ma(len)\nfl    = ta.falling(ma  , count)\nrs    = ta.rising (ma  , count)\nup    = fl[1] and  ma  >  ma[1] \ndn    = rs[1] and  ma  <  ma[1]  \natr   = ta.atr(14)\nn     = bar_index\n\n//-----------------------------------------------------------------------------}\n//Execution\n//-----------------------------------------------------------------------------{\nif up \n    p = array.new<chart.point>()\n    p.push(chart.point.from_index(n -           1  , low [1] - atr / 15 )) \n    p.push(chart.point.from_index(n + (len / 2 -1) , low [1] + atr / 2.5)) \n    p.push(chart.point.from_index(n +  len         , low [1] + atr * 2  )) \n    p.push(chart.point.from_index(n + (len / 2 -1) , low [1] + atr / 2.5)) \n    p.push(chart.point.from_index(n -           1  , low [1] + atr / 15 )) \n    polyline.new(p\n      , curved = true\n      , closed = false\n      , line_color = colUp\n      , fill_color = color.new(colUp, 50))\n\nif dn \n    p = array.new<chart.point>()\n    p.push(chart.point.from_index(n -           1  , high[1] + atr / 15 )) \n    p.push(chart.point.from_index(n + (len / 2 -1) , high[1] - atr / 2.5)) \n    p.push(chart.point.from_index(n +  len         , high[1] - atr * 2  )) \n    p.push(chart.point.from_index(n + (len / 2 -1) , high[1] - atr / 2.5)) \n    p.push(chart.point.from_index(n -           1  , high[1] - atr / 15 )) \n    polyline.new(p\n      , curved = true\n      , closed = false\n      , line_color = colDn\n      , fill_color = color.new(colDn, 50))\n\n    \n//-----------------------------------------------------------------------------}\n//Plots\n//-----------------------------------------------------------------------------{\nplot     (ma , 'MA'    ,         color=          colMa                                                                                   )\n\nplotshape(up ? low [1] : na, '', color=          colUp     ,  location=location.absolute, style=shape.circle, size=size.tiny  , offset=-1)\nplotshape(up ? low [1] : na, '', color=color.new(colUp, 50),  location=location.absolute, style=shape.circle, size=size.small , offset=-1)\nplotshape(up ? low [1] : na, '', color=color.new(colUp, 65),  location=location.absolute, style=shape.circle, size=size.normal, offset=-1)\n\nplotshape(dn ? high[1] : na, '', color=          colDn     ,  location=location.absolute, style=shape.circle, size=size.tiny  , offset=-1)\nplotshape(dn ? high[1] : na, '', color=color.new(colDn, 50),  location=location.absolute, style=shape.circle, size=size.small , offset=-1)\nplotshape(dn ? high[1] : na, '', color=color.new(colDn, 65),  location=location.absolute, style=shape.circle, size=size.normal, offset=-1)\n \n//-----------------------------------------------------------------------------}","updated":"2023-10-24T15:10:27.82188Z","version":"1.0"}