{"created":"2024-01-15T22:04:24.3828Z","extra":{"kind":"study","sourceInputsCount":1},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"[MAD] Acceleration based dampened SMA projections","source":"//@version=5\r\n// Â© djmad\r\n//233 is version without final optimizing\r\n\r\nindicator(\"[MAD] Acceleration based dampened SMA projections\", shorttitle = \"ABDP\" ,overlay=true, max_polylines_count = 100)\r\n\r\n//  _______                    \r\n// |__   __|                   \r\n//    | |_   _ _ __   ___  ___ \r\n//    | | | | | '_ \\ / _ \\/ __|\r\n//    | | |_| | |_) |  __/\\__ \\\r\n//    |_|\\__, | .__/ \\___||___/\r\n//        __/ | |              \r\n//       |___/|_|              {\r\n\r\n// User-defined types for storing polyline points, polypaths, and dampening factors\r\ntype type_polypaths\r\n    array<chart.point>  polyline_points = na\r\n    color               polyline_color  = na\r\n    float               dampening_factor= na\r\n\r\n//}\r\n\r\n//  _____                   _                         _                       \r\n// |_   _|                 | |                       | |                      \r\n//   | |  _ __  _ __  _   _| |_ ___    __ _ _ __   __| | __   ____ _ _ __ ___ \r\n//   | | | '_ \\| '_ \\| | | | __/ __|  / _` | '_ \\ / _` | \\ \\ / / _` | '__/ __|\r\n//  _| |_| | | | |_) | |_| | |_\\__ \\ | (_| | | | | (_| |  \\ V / (_| | |  \\__ \\\r\n// |_____|_| |_| .__/ \\__,_|\\__|___/  \\__,_|_| |_|\\__,_|   \\_/ \\__,_|_|  |___/\r\n//             | |                                                            \r\n//             |_|                                                              {\r\n\r\n// Inputs\r\nsma_window = input.int(20,\"sma length\")\r\nacceleration_window = input.int(5,\"acceleration window\")\r\nsrc_input = ta.sma(input.source(close, \"Input Series\", inline='src'), sma_window)\r\nsrc_off   = input.int(20, 'Offset', minval=0, maxval=400, inline='src')\r\n\r\nStartfactor = input.float(0,\"Startfactor dampening\",step=0.1, group=\"dampening and spread\") \r\nGrowfactor = input.float(0.5,\"Growfactor dampening\",step=0.1, group=\"dampening and spread\")\r\npredictionlength = input.int(10,\"Prediction length\") + src_off\r\ncleanup = input.bool(true, \"cleanup history\")\r\n\r\n// Vars\r\n// Creating a symmetrical color array //\r\ncolorpreset = array.new_color(9)\r\ncolorpreset.set(0, color.rgb(255, 0, 0))     // Red\r\ncolorpreset.set(1, color.rgb(255, 128, 0))   // Orange-Red\r\ncolorpreset.set(2, color.rgb(255, 255, 0))   // Yellow\r\ncolorpreset.set(3, color.rgb(128, 255, 0))   // Yellow-Green\r\ncolorpreset.set(4, color.rgb(0, 255, 0))     // Green\r\ncolorpreset.set(5, color.rgb(128, 255, 0))   // Yellow-Green\r\ncolorpreset.set(6, color.rgb(255, 255, 0))   // Yellow\r\ncolorpreset.set(7, color.rgb(255, 128, 0))   // Orange-Red\r\ncolorpreset.set(8, color.rgb(255, 0, 0))     // Red\r\n\r\n// Creating Array of Polypaths\r\nvar type_polypaths [] polypaths = array.new<type_polypaths>()\r\n\r\n// }\r\n\r\n//   ______                _   _                 \r\n//  |  ____|              | | (_)                \r\n//  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___ \r\n//  |  __| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\r\n//  | |  | |_| | | | | (__| |_| | (_) | | | \\__ \\\r\n//  |_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/                           {\r\n\r\n// Initialize array of polypaths with dampening factors\r\nf_calculate_damp_factor(index, middle, start_factor, growth_factor) =>\r\n    start_factor + (index - middle) * growth_factor\r\n\r\nf_dampened_poly_curve(index, initial_value, initial_slope, acceleration, damp_factor) =>\r\n    delta = index - bar_index\r\n    initial_value + initial_slope * delta + 0.5 * damp_factor * acceleration * delta * delta\r\n\r\n// Calculate sum of accelerations over the window\r\nsma_acceleration_sum_calc(src, window) =>\r\n    sum = 0.0\r\n    for i = 0 to window - 1\r\n        if not na(src[i + 2])\r\n            sum := sum + src[i] - 2 * src[i + 1] + src[i + 2]\r\n    sum\r\n//}\r\n\r\n//   _____             _   _                \r\n//  |  __ \\           | | (_)               \r\n//  | |__) |   _ _ __ | |_ _ _ __ ___   ___ \r\n//  |  _  / | | | '_ \\| __| | '_ ` _ \\ / _ \\\r\n//  | | \\ \\ |_| | | | | |_| | | | | | |  __/\r\n//  |_|  \\_\\__,_|_| |_|\\__|_|_| |_| |_|\\___|                           {\r\n\r\n// get slope and acceleration\r\nsma_slope = src_input - src_input[1]\r\nsma_acceleration = sma_acceleration_sum_calc(src_input, acceleration_window) / acceleration_window\r\n\r\n// Fill the Dampening Array\r\nif barstate.isfirst\r\n    array_size = 9\r\n    middle_index = math.floor(array_size / 2)\r\n    for i = 0 to array_size - 1\r\n        damp_factor = f_calculate_damp_factor(i, middle_index, Startfactor, Growfactor)\r\n        polyline_color = colorpreset.get(i)\r\n        polypaths.push(type_polypaths.new(array.new<chart.point>(0, na), polyline_color, damp_factor))\r\n\r\n// Function to calculate a point on a dampened polynomial curve\r\n// Generate and store points for each curve with associated dampening factors\r\nif barstate.islast or cleanup == false\r\n    for damp_factor_index = 0 to polypaths.size() - 1\r\n        GET_RW = polypaths.get(damp_factor_index)\r\n        GET_RW.polyline_points.clear()\r\n\r\n        for i = 0 to predictionlength\r\n            y = f_dampened_poly_curve(bar_index + i , src_input[src_off], sma_slope[src_off], sma_acceleration[src_off], GET_RW.dampening_factor)\r\n            p = chart.point.from_index(bar_index + i - src_off, y)\r\n            GET_RW.polyline_points.push(p)\r\n        polypaths.set(damp_factor_index, GET_RW)\r\n\r\n/// }\r\n\r\n//   _____  _       _   _   _             \r\n//  |  __ \\| |     | | | | (_)            \r\n//  | |__) | | ___ | |_| |_ _ _ __   __ _ \r\n//  |  ___/| |/ _ \\| __| __| | '_ \\ / _` |\r\n//  | |    | | (_) | |_| |_| | | | | (_| |\r\n//  |_|    |_|\\___/ \\__|\\__|_|_| |_|\\__, |\r\n//                                   __/ |\r\n//                                  |___/                           {\r\n\r\n// Plot the curves\r\nif cleanup\r\n    for pl_delete in polyline.all\r\n        pl_delete.delete()\r\n\r\n// Drawout all polylines\r\nif barstate.islast or cleanup == false\r\n    for pl_s = 0 to polypaths.size() - 1\r\n        GET_RO = polypaths.get(pl_s)\r\n        polyline.new(points = GET_RO.polyline_points, line_width = 1, line_color = GET_RO.polyline_color, xloc = xloc.bar_index)\r\n\r\n// Plot SMA\r\nplot(src_input, color=color.green, title=\"SMA\")\r\n\r\n//}\r\n","updated":"2024-01-15T22:04:24.3828Z","version":"1.0"}