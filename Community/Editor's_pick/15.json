{"created":"2024-03-12T15:35:54.408036Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"1.0","scriptAccess":"open_no_auth","scriptName":"TTrades Daily Bias [TFO]","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © tradeforopp\r\n\r\n//@version=5\r\nindicator(\"TTrades Daily Bias [TFO]\", \"TTrades Daily Bias [TFO]\", true, max_lines_count = 500, max_labels_count = 500)\r\n\r\nvar g_VIS = \"Bias\"\r\nd_stats = input.bool(true, \"Daily Bias\", tooltip = \"Apply TTrades bias concepts to the 1 Day timeframe\", group = g_VIS)\r\nw_stats = input.bool(false, \"Weekly Bias\", tooltip = \"Apply TTrades bias concepts to the 1 Week timeframe\", group = g_VIS)\r\nbias_reason = input.bool(true, \"Show Bias Reasoning\", tooltip = \"Show the reason why a given bias is being established\", group = g_VIS)\r\n\r\nvar g_PLT = \"Plotting\"\r\nbull_color = input.color(color.teal, \"Bull / Bear Bias Colors\", inline = \"COLOR\", group = g_PLT)\r\nbear_color = input.color(color.red, \"\", inline = \"COLOR\", group = g_PLT)\r\nd_bias_plot = input.bool(true, \"Plot Daily Bias\", inline = \"DBIAS\", group = g_PLT)\r\nw_bias_plot = input.bool(true, \"Plot Weekly Bias\", inline = \"WBIAS\", group = g_PLT)\r\nd_bias_loc = input.string('Top', \"\", inline = \"DBIAS\", options = ['Top','Bottom'], group = g_PLT)\r\nw_bias_loc = input.string('Bottom', \"\", inline = \"WBIAS\", options = ['Top','Bottom'], group = g_PLT)\r\n\r\nvar g_STY = \"Style\"\r\nbefore_raid_color = input.color(color.blue, \"Before / After Hit Colors\", inline = \"HIT\", tooltip = \"All previous high and low lines will start out as this color\", group = g_STY)\r\nafter_raid_color = input.color(color.red, \"\", inline = \"HIT\", tooltip = \"Once a previous high or low line is reached, it will become this color\", group = g_STY)\r\nstop_ext = input.bool(false, \"Stop Extending Lines After Hit\", tooltip = \"Once a previous high or low line is reached, its line will stop extending\", group = g_STY)\r\nuse_d_sep = input.bool(true, \"Day Separator\", inline = \"DSEP\", group = g_STY)\r\nuse_w_sep = input.bool(true, \"Week Separator\", inline = \"WSEP\", group = g_STY)\r\nd_sep = input.color(color.new(color.black, 80), \"\", inline = \"DSEP\", group = g_STY)\r\nw_sep = input.color(color.new(color.black, 30), \"\", inline = \"WSEP\", group = g_STY)\r\nline_width = input.int(1, \"Line Width\", group = g_STY)\r\n\r\nvar g_TBL = \"Table\"\r\ntbl_show_stats = input.bool(true, \"Show Statistics\", tooltip = \"Show statistics on bias accuracy\\n\\nSuccess Rate: how often has price successfully reached the assigned draw on liquidity?\\n\\nClose Thru Rate: from the number of times that price reached the assigned draw on liquidity, how often did it close through that level?\\n\\nSample Size: the total number of times that a given bias was assigned\", group = g_TBL)\r\ntbl_loc = input.string('Top Right', \"Position\", options = ['Bottom Center', 'Bottom Left', 'Bottom Right', 'Middle Center', 'Middle Left', 'Middle Right', 'Top Center', 'Top Left', 'Top Right'], group = g_TBL)\r\ntbl_size = input.string('Normal', \"Size\", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], group = g_TBL)\r\n\r\nnew_day = timeframe.change(\"D\")\r\nnew_week = timeframe.change(\"W\")\r\n\r\ncan_plot_d = timeframe.in_seconds() < timeframe.in_seconds(\"D\")\r\ncan_plot_w = timeframe.in_seconds() < timeframe.in_seconds(\"W\")\r\n\r\nif use_d_sep and new_day and can_plot_d\r\n    line.new(bar_index, high*1.000001, bar_index, low, color = d_sep, extend = extend.both, width = line_width)\r\nif use_w_sep and new_week and can_plot_w\r\n    line.new(bar_index, high*1.000001, bar_index, low, color = w_sep, extend = extend.both, width = line_width)\r\n\r\ntype lines\r\n    line ph_line = na\r\n    line pl_line = na\r\n    bool hit_ph_line = false\r\n    bool hit_pl_line = false\r\n\r\ntype info\r\n    float ph\r\n    float pl\r\n    float ch\r\n    float cl\r\n    float co\r\n\r\n    bool p_up\r\n\r\n    int bias = 0\r\n    int bias_ph = 0\r\n    int bias_pl = 0\r\n    int hit_ph = 0\r\n    int hit_pl = 0\r\n    int close_ph = 0\r\n    int close_pl = 0\r\n    \r\nget_table_pos(pos) =>\r\n    switch pos\r\n        \"Bottom Center\" => position.bottom_center\r\n        \"Bottom Left\" => position.bottom_left\r\n        \"Bottom Right\" => position.bottom_right\r\n        \"Middle Center\" => position.middle_center\r\n        \"Middle Left\" => position.middle_left\r\n        \"Middle Right\" => position.middle_right\r\n        \"Top Center\" => position.top_center\r\n        \"Top Left\" => position.top_left\r\n        \"Top Right\" => position.top_right\r\n\r\nget_table_size(size) =>\r\n    switch size\r\n        'Tiny' => size.tiny\r\n        'Small' => size.small\r\n        'Normal' => size.normal\r\n        'Large' => size.large\r\n        'Huge' => size.huge\r\n        'Auto' => size.auto\r\n\r\nhandle_bias(info n, string tf) =>\r\n    _yloc   = yloc.price\r\n    _style  = tf == \"D\" ? label.style_label_up : label.style_label_down\r\n    _y      = tf == \"D\" ? n.cl : n.ch\r\n    can_plot = tf == \"D\" ? can_plot_d : can_plot_w\r\n    if close[1] > n.ph\r\n        if n.bias == 1\r\n            n.close_ph += 1\r\n        n.bias := 1\r\n        if bias_reason and can_plot\r\n            txt = \"Close Above P\"+tf+\"H\\nBias P\"+tf+\"H\"\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n    else if close[1] < n.pl\r\n        if n.bias == -1\r\n            n.close_pl += 1\r\n        n.bias := -1\r\n        if bias_reason and can_plot\r\n            txt = \"Close Below P\"+tf+\"L\\nBias P\"+tf+\"L\"\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n    else if close[1] < n.ph and close[1] > n.pl and n.ch > n.ph and n.cl > n.pl\r\n        n.bias := -1\r\n        if bias_reason and can_plot\r\n            txt = \"Failed to Close Above P\"+tf+\"H\\nBias P\"+tf+\"L\"\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n    else if close[1] > n.pl and close[1] < n.ph and n.ch < n.ph and n.cl < n.pl\r\n        n.bias := 1\r\n        if bias_reason and can_plot\r\n            txt = \"Failed to Close Below P\"+tf+\"L\\nBias P\"+tf+\"H\"\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n    else if n.ch <= n.ph and n.cl >= n.pl\r\n        if n.p_up \r\n            n.bias := 1\r\n        else\r\n            n.bias := -1\r\n        if bias_reason and can_plot\r\n            txt = \"Close Inside\\nBias P\"+tf + (n.p_up ? \"H\" : \"L\")\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n    else\r\n        n.bias := 0\r\n        if bias_reason and can_plot\r\n            txt = \"Outside Bar but Closed Inside\\nNo Bias\"\r\n            label.new(bar_index, _y, txt, textcolor = chart.fg_color, color = chart.bg_color, yloc = _yloc, style = _style)\r\n\r\n    if n.bias == 1\r\n        n.bias_ph += 1\r\n        alert(\"Bias P\"+tf+\"H\", alert.freq_once_per_bar)\r\n    else if n.bias == -1\r\n        n.bias_pl += 1\r\n        alert(\"Bias P\"+tf+\"L\", alert.freq_once_per_bar)\r\n\r\n\r\nmethod update_info(info n, string tf) =>\r\n    if (tf == \"D\" ? new_day : new_week)\r\n        if not na(n.ch)\r\n            handle_bias(n, tf)\r\n            \r\n            if close[1] >= n.co\r\n                n.p_up := true\r\n            else\r\n                n.p_up := false\r\n\r\n            n.ph := n.ch\r\n            n.pl := n.cl\r\n            n.ch := high\r\n            n.cl := low\r\n            n.co := open\r\n            \r\n    if na(n.ch)\r\n        n.ch := high\r\n        n.ch := low\r\n    else\r\n        n.ch := math.max(high, n.ch)\r\n        n.cl := math.min(low,  n.cl)\r\n            \r\n\r\nmethod update_lines(lines[] L, info n, string tf) =>\r\n    hit_high = false, hit_low = false\r\n    can_plot = tf == \"D\" ? can_plot_d : can_plot_w\r\n    if (tf == \"D\" ? new_day : new_week)\r\n        L.pop()\r\n        _right = time + timeframe.in_seconds(tf)*1000\r\n        _style = tf == \"D\" ? line.style_solid : line.style_dashed\r\n        L.unshift(lines.new(line.new(time, n.ph, _right, n.ph, xloc = xloc.bar_time, color = can_plot ? before_raid_color : na, style = _style, width = line_width), line.new(time, n.pl, _right, n.pl, xloc = xloc.bar_time, color = can_plot ? before_raid_color : na, style = _style, width = line_width), false, false))\r\n    for i = 0 to L.size() - 1\r\n        x = L.get(i)\r\n        if not na(x.ph_line)\r\n            if high >= x.ph_line.get_y1() and not x.hit_ph_line\r\n                if stop_ext\r\n                    x.ph_line.set_x2(time)\r\n                if n.bias == 1\r\n                    n.hit_ph += 1 \r\n                x.hit_ph_line := true\r\n                if can_plot\r\n                    x.ph_line.set_color(after_raid_color)\r\n                hit_high := true\r\n                alert(\"Hit P\"+tf+\"H\", alert.freq_once_per_bar)\r\n            if low <= x.pl_line.get_y1() and not x.hit_pl_line\r\n                if stop_ext\r\n                    x.pl_line.set_x2(time)\r\n                if n.bias == -1 \r\n                    n.hit_pl += 1\r\n                x.hit_pl_line := true\r\n                if can_plot\r\n                    x.pl_line.set_color(after_raid_color)\r\n                hit_low := true\r\n                alert(\"Hit P\"+tf+\"L\", alert.freq_once_per_bar)\r\n    [hit_high, hit_low]\r\n\r\nvar d_info = info.new()\r\nvar w_info = info.new()\r\n\r\nvar d_lines = array.new<lines>(1, lines.new())\r\nvar w_lines = array.new<lines>(1, lines.new())\r\n\r\nd_hit_high = false\r\nd_hit_low  = false\r\n\r\nw_hit_high = false\r\nw_hit_low  = false\r\n\r\nif d_stats and timeframe.in_seconds() <= timeframe.in_seconds(\"D\")\r\n    d_info.update_info(\"D\")\r\n    [hr, lr] = d_lines.update_lines(d_info, \"D\")\r\n    d_hit_high := hr\r\n    d_hit_low  := lr\r\n\r\nif w_stats and timeframe.in_seconds() <= timeframe.in_seconds(\"W\")\r\n    w_info.update_info(\"W\")\r\n    [hr, lr] = w_lines.update_lines(w_info, \"W\")\r\n    w_hit_high := hr\r\n    w_hit_low  := lr\r\n\r\nplotshape(can_plot_d and d_hit_high, \"PDH Raid\", style = shape.triangleup,   location = location.abovebar, color = after_raid_color, size = size.tiny)\r\nplotshape(can_plot_d and d_hit_low,  \"PDL Raid\", style = shape.triangledown, location = location.belowbar, color = after_raid_color, size = size.tiny)\r\nplotshape(can_plot_w and w_hit_high, \"PWH Raid\", style = shape.triangleup,   location = location.abovebar, color = after_raid_color, size = size.tiny)\r\nplotshape(can_plot_w and w_hit_low,  \"PWL Raid\", style = shape.triangledown, location = location.belowbar, color = after_raid_color, size = size.tiny)\r\n\r\nplotshape(d_bias_plot, \"Daily Bias\", style = shape.square, size = size.tiny, location = d_bias_loc == 'Top' ? location.top : location.bottom, color = d_info.bias == 1 ? bull_color : d_info.bias == -1 ? bear_color : na)\r\nplotshape(w_bias_plot, \"Weekly Bias\", style = shape.square, size = size.tiny, location = w_bias_loc == 'Top' ? location.top : location.bottom, color = w_info.bias == 1 ? bull_color : w_info.bias == -1 ? bear_color : na)\r\n\r\nalertcondition(new_day and d_info.bias ==  1, \"Bias PDH\", \"Bias PDH\")\r\nalertcondition(new_day and d_info.bias == -1, \"Bias PDL\", \"Bias PDL\")\r\nalertcondition(new_day and d_info.bias ==  0, \"No Daily Bias\", \"No Daily Bias\")\r\n\r\nalertcondition(new_week and w_info.bias ==  1, \"Bias PWH\", \"Bias PWH\")\r\nalertcondition(new_week and w_info.bias == -1, \"Bias PWL\", \"Bias PWL\")\r\nalertcondition(new_week and w_info.bias ==  0, \"No Weekly Bias\", \"No Weekly Bias\")\r\n\r\nalertcondition(d_hit_high, \"Hit PDH\", \"Hit PDH\")\r\nalertcondition(d_hit_low,  \"Hit PDL\", \"Hit PDL\")\r\n\r\nalertcondition(w_hit_high, \"Hit PWH\", \"Hit PWH\")\r\nalertcondition(w_hit_low,  \"Hit PWL\", \"Hit PWL\")\r\n\r\nformat_result(int hit, int bias) =>\r\n    result = \"\"\r\n    if bias > 0\r\n        result := str.tostring(math.floor(hit / bias * 1000) / 10)\r\n    else\r\n        result := \"0\"\r\n    result += \"%\"\r\n\r\nformat_color(bool bull, info n, lines[] L) =>\r\n    color result = na\r\n    if bull ? (n.bias == 1) : (n.bias == -1)\r\n        if bull ? (L.get(0).hit_ph_line) : (L.get(0).hit_pl_line)\r\n            result := color.new(after_raid_color, 50)\r\n        else\r\n            result := color.new(before_raid_color, 50)\r\n\r\nvar stats = table.new(get_table_pos(tbl_loc), 20, 20, chart.bg_color, chart.fg_color, 2, chart.fg_color, 1)\r\nvar text_size = get_table_size(tbl_size)\r\nif barstate.islast\r\n    table.cell(stats, 0, 0, \"Bias\", text_color = chart.fg_color, text_size = text_size)\r\n    if tbl_show_stats\r\n        table.cell(stats, 1, 0, \"Success\\nRate\", text_color = chart.fg_color, text_size = text_size)\r\n        table.cell(stats, 2, 0, \"Close Thru\\nRate\", text_color = chart.fg_color, text_size = text_size)\r\n        table.cell(stats, 3, 0, \"Sample\\nSize\", text_color = chart.fg_color, text_size = text_size)\r\n\r\n    if d_stats\r\n        table.cell(stats, 0, 1, \"PDH\", text_color = chart.fg_color, bgcolor = format_color(true,  d_info, d_lines), text_size = text_size)\r\n        table.cell(stats, 0, 2, \"PDL\", text_color = chart.fg_color, bgcolor = format_color(false, d_info, d_lines), text_size = text_size)\r\n\r\n        if tbl_show_stats\r\n            table.cell(stats, 1, 1, format_result(d_info.hit_ph, d_info.bias_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 1, 2, format_result(d_info.hit_pl, d_info.bias_pl), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 2, 1, format_result(d_info.close_ph, d_info.hit_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 2, 2, format_result(d_info.close_pl, d_info.hit_pl), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 3, 1, str.tostring(d_info.bias_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 3, 2, str.tostring(d_info.bias_pl), text_color = chart.fg_color, text_size = text_size)\r\n    \r\n    if w_stats\r\n        table.cell(stats, 0, 3, \"PWH\", text_color = chart.fg_color, bgcolor = format_color(true,  w_info, w_lines), text_size = text_size)\r\n        table.cell(stats, 0, 4, \"PWL\", text_color = chart.fg_color, bgcolor = format_color(false, w_info, w_lines), text_size = text_size)\r\n    \r\n        if tbl_show_stats\r\n            table.cell(stats, 1, 3, format_result(w_info.hit_ph, w_info.bias_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 1, 4, format_result(w_info.hit_pl, w_info.bias_pl), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 2, 3, format_result(w_info.close_ph, w_info.hit_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 2, 4, format_result(w_info.close_pl, w_info.hit_pl), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 3, 3, str.tostring(w_info.bias_ph), text_color = chart.fg_color, text_size = text_size)\r\n            table.cell(stats, 3, 4, str.tostring(w_info.bias_pl), text_color = chart.fg_color, text_size = text_size)\r\n\r\nplot(d_info.bias, \"Daily Bias\",  color = na, display = display.none)\r\nplot(w_info.bias, \"Weekly Bias\", color = na, display = display.none)","updated":"2024-03-12T15:35:54.408036Z","version":"1.0"}