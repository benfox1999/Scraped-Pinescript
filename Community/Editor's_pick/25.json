{"created":"2024-05-01T06:37:51.194937Z","extra":{"kind":"study","sourceInputsCount":1},"lastVersionMaj":"16.0","scriptAccess":"open_no_auth","scriptName":"Adaptive Trend Finder (log)","source":"// Â© Julien_Eche\n\n//@version=5\nindicator(\"Adaptive Trend Finder (log)\", overlay=true, max_bars_back=1200)\n\nconfidence(pearsonR) =>\n    switch\n        pearsonR < 0.2  => \"Extremely Weak\"\n        pearsonR < 0.3  => \"Very Weak\"\n        pearsonR < 0.4  => \"Weak\"\n        pearsonR < 0.5  => \"Mostly Weak\"\n        pearsonR < 0.6  => \"Somewhat Weak\"\n        pearsonR < 0.7  => \"Moderately Weak\"\n        pearsonR < 0.8  => \"Moderate\"\n        pearsonR < 0.9  => \"Moderately Strong\"\n        pearsonR < 0.92 => \"Mostly Strong\"\n        pearsonR < 0.94 => \"Strong\"\n        pearsonR < 0.96 => \"Very Strong\"\n        pearsonR < 0.98 => \"Exceptionally Strong\"\n        =>                        \"Ultra Strong\"\n\ngetTablePosition(string pos) =>\n    switch pos\n        \"Bottom Right\"  => position.bottom_right\n        \"Bottom Center\" => position.bottom_center        \n        \"Bottom Left\"   => position.bottom_left\n        \"Top Right\"     => position.top_right\n        \"Top Left\"      => position.top_left\n        \"Top Center\"    => position.top_center\n        \"Middle Right\"  => position.middle_right\n        =>                 position.middle_left // \"Middle Left\" - default\n\n// Calculate deviations for given length\ncalcDev(float source, int length) =>\n    float logSource  = math.log(source)\n    var int period_1 = length - 1\n    if barstate.islast\n        float sumX  = 0.0\n        float sumXX = 0.0\n        float sumYX = 0.0\n        float sumY  = 0.0\n        for int i=1 to length\n            float lSrc = logSource[i-1]\n            sumX  += i\n            sumXX += i * i\n            sumYX += i * lSrc\n            sumY  +=     lSrc\n        float slope     = nz((length * sumYX - sumX * sumY) / (length * sumXX - sumX * sumX))\n        float average   = sumY / length\n        float intercept = average - (slope * sumX / length) + slope\n        float sumDev = 0.0\n        float sumDxx = 0.0\n        float sumDyy = 0.0\n        float sumDyx = 0.0\n        float regres = intercept + slope * period_1 * 0.5\n        float sumSlp = intercept\n        for int i=0 to period_1\n            float lSrc = logSource[i]\n            float dxt  =   lSrc - average\n            float dyt  = sumSlp - regres\n            lSrc   -= sumSlp\n            sumSlp += slope\n            sumDxx +=  dxt * dxt\n            sumDyy +=  dyt * dyt\n            sumDyx +=  dxt * dyt\n            sumDev += lSrc * lSrc\n        float unStdDev = math.sqrt(sumDev / period_1) // unbiased\n        float divisor  =    sumDxx * sumDyy\n        float pearsonR = nz(sumDyx / math.sqrt(divisor))\n        [unStdDev, pearsonR, slope, intercept]\n    else\n        [na, na, na, na]\n\nstring t1 = \"In Long-Term Channel mode, if the channel is not visible, scroll back on the chart for additional historical data. To view both Short-Term and Long-Term channels simultaneously, load this indicator twice on your chart.\"\nstring t2 = \"Pearson's R, a statistical measure in Adaptive Trend Finder, gauges the linear relationship between price and trend projection. A value closer to 1 indicates a strong positive correlation, reinforcing confidence in the trend direction based on historical price movements.\"\n\nsourceInput = input.source(close, title=\"Source\")\n\nstring group0 = \"CHANNEL SETTINGS\"\nbool   periodMode       = input.bool  (         false, \"Use Long-Term Channel\", group=group0, tooltip=t1)\nfloat  devMultiplier    = input.float (           2.0, \"Deviation Multiplier:\", group=group0, step=0.1)\ncolor  colorInput       = input.color (  color.gray,             \"\", group=group0, inline=group0)\nstring lineStyle1       = input.string(       \"Solid\",             \"\", group=group0, inline=group0, options=[\"Solid\", \"Dotted\", \"Dashed\"])\nstring extendStyle      = input.string(\"Extend Right\",             \"\", group=group0, inline=group0, options=[\"Extend Right\", \"Extend Both\", \"Extend None\", \"Extend Left\"])\nint    fillTransparency = input.int   (            93, \"Fill Transp:\", group=group0, inline=\"mid\", minval=0, maxval=100, step=1)\nint channelTransparency = input.int   (            40, \"Line Transp:\", group=group0, inline=\"mid\", minval=0, maxval=100, step=1)\n\nstring group1 = \"MIDLINE SETTINGS\"\ncolor  colorInputMidline       = input.color ( color.blue, \"\", group=group1, inline=group1)\nint    transpInput  = input.int   (     100,          \"Transp:\", group=group1, inline=group1, minval=0, maxval=100, step=10)\nint    lineWidth    = input.int   (       1,      \"Line Width:\", group=group1, inline=group1)\nstring midLineStyle = input.string(               \"Dashed\",  \"\", group=group1, inline=group1, options=[\"Dotted\", \"Solid\", \"Dashed\"])\n\nstring group2 = \"TABLE SETTINGS\"\nstring tablePositionInput = input.string(\"Bottom Right\", \"Table Position\", options=[\"Bottom Right\", \"Bottom Left\", \"Middle Right\", \"Middle Left\", \"Top Right\", \"Top Left\", \"Top Center\", \"Bottom Center\"], group=group2)\nbool   showPearsonInput   = input.bool  (         false, \"Show Pearson's R instead of Projection Confidence Level\", group=group2, tooltip=t2)\nstring textSizeInput      = input.string(      \"Normal\",      \"Text Size\", options=[\"Normal\", \"Large\"], group=group2)\n\nvar string EXTEND_STYLE = switch extendStyle\n    \"Extend Right\" => extend.right\n    \"Extend Both\"  => extend.both\n    \"Extend None\"  => extend.none\n    =>                extend.left\n\n// Length Inputs\nvar array<int> Periods = periodMode ? array.from(na,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200) : array.from(na,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200)\n\n// Calculate deviations, correlation, slope, and intercepts for different lengths\n[stdDev01, pearsonR01, slope01, intercept01] = calcDev(sourceInput, Periods.get( 1))\n[stdDev02, pearsonR02, slope02, intercept02] = calcDev(sourceInput, Periods.get( 2))\n[stdDev03, pearsonR03, slope03, intercept03] = calcDev(sourceInput, Periods.get( 3))\n[stdDev04, pearsonR04, slope04, intercept04] = calcDev(sourceInput, Periods.get( 4))\n[stdDev05, pearsonR05, slope05, intercept05] = calcDev(sourceInput, Periods.get( 5))\n[stdDev06, pearsonR06, slope06, intercept06] = calcDev(sourceInput, Periods.get( 6))\n[stdDev07, pearsonR07, slope07, intercept07] = calcDev(sourceInput, Periods.get( 7))\n[stdDev08, pearsonR08, slope08, intercept08] = calcDev(sourceInput, Periods.get( 8))\n[stdDev09, pearsonR09, slope09, intercept09] = calcDev(sourceInput, Periods.get( 9))\n[stdDev10, pearsonR10, slope10, intercept10] = calcDev(sourceInput, Periods.get(10))\n[stdDev11, pearsonR11, slope11, intercept11] = calcDev(sourceInput, Periods.get(11))\n[stdDev12, pearsonR12, slope12, intercept12] = calcDev(sourceInput, Periods.get(12))\n[stdDev13, pearsonR13, slope13, intercept13] = calcDev(sourceInput, Periods.get(13))\n[stdDev14, pearsonR14, slope14, intercept14] = calcDev(sourceInput, Periods.get(14))\n[stdDev15, pearsonR15, slope15, intercept15] = calcDev(sourceInput, Periods.get(15))\n[stdDev16, pearsonR16, slope16, intercept16] = calcDev(sourceInput, Periods.get(16))\n[stdDev17, pearsonR17, slope17, intercept17] = calcDev(sourceInput, Periods.get(17))\n[stdDev18, pearsonR18, slope18, intercept18] = calcDev(sourceInput, Periods.get(18))\n[stdDev19, pearsonR19, slope19, intercept19] = calcDev(sourceInput, Periods.get(19))\n\nif barstate.islast\n    // Find the highest Pearson's R\n    float highestPearsonR = math.max(pearsonR01, pearsonR02, pearsonR03, pearsonR04, pearsonR05, pearsonR06, pearsonR07, pearsonR08, pearsonR09, pearsonR10, pearsonR11, pearsonR12, pearsonR13, pearsonR14, pearsonR15, pearsonR16, pearsonR17, pearsonR18, pearsonR19)\n\n    // Determine selected length, slope, intercept, and deviations\n    int   detectedPeriod  = na\n    float detectedSlope   = na\n    float detectedIntrcpt = na\n    float detectedStdDev  = na\n\n    switch highestPearsonR\n        pearsonR01 =>\n            detectedPeriod  := Periods.get(1)\n            detectedSlope   :=     slope01\n            detectedIntrcpt := intercept01\n            detectedStdDev  :=    stdDev01\n        pearsonR02 =>\n            detectedPeriod  := Periods.get(2)\n            detectedSlope   :=     slope02\n            detectedIntrcpt := intercept02\n            detectedStdDev  :=    stdDev02\n        pearsonR03 =>\n            detectedPeriod  := Periods.get(3)\n            detectedSlope   :=     slope03\n            detectedIntrcpt := intercept03\n            detectedStdDev  :=    stdDev03\n        pearsonR04 =>\n            detectedPeriod  := Periods.get(4)\n            detectedSlope   :=     slope04\n            detectedIntrcpt := intercept04\n            detectedStdDev  :=    stdDev04\n        pearsonR05 =>\n            detectedPeriod  := Periods.get(5)\n            detectedSlope   :=     slope05\n            detectedIntrcpt := intercept05\n            detectedStdDev  :=    stdDev05\n        pearsonR06 =>\n            detectedPeriod  := Periods.get(6)\n            detectedSlope   :=     slope06\n            detectedIntrcpt := intercept06\n            detectedStdDev  :=    stdDev06\n        pearsonR07 =>\n            detectedPeriod  := Periods.get(7)\n            detectedSlope   :=     slope07\n            detectedIntrcpt := intercept07\n            detectedStdDev  :=    stdDev07\n        pearsonR08 =>\n            detectedPeriod  := Periods.get(8)\n            detectedSlope   :=     slope08\n            detectedIntrcpt := intercept08\n            detectedStdDev  :=    stdDev08\n        pearsonR09 =>\n            detectedPeriod  := Periods.get(9)\n            detectedSlope   :=     slope09\n            detectedIntrcpt := intercept09\n            detectedStdDev  :=    stdDev09\n        pearsonR10 => \n            detectedPeriod  := Periods.get(10)\n            detectedSlope   :=     slope10\n            detectedIntrcpt := intercept10\n            detectedStdDev  :=    stdDev10\n        pearsonR11 =>        \n            detectedPeriod  := Periods.get(11)\n            detectedSlope   :=     slope11\n            detectedIntrcpt := intercept11\n            detectedStdDev  :=    stdDev11\n        pearsonR12 =>\n            detectedPeriod  := Periods.get(12)\n            detectedSlope   :=     slope12\n            detectedIntrcpt := intercept12\n            detectedStdDev  :=    stdDev12\n        pearsonR13 =>\n            detectedPeriod  := Periods.get(13)\n            detectedSlope   :=     slope13\n            detectedIntrcpt := intercept13\n            detectedStdDev  :=    stdDev13\n        pearsonR14 =>\n            detectedPeriod  := Periods.get(14)\n            detectedSlope   :=     slope14\n            detectedIntrcpt := intercept14\n            detectedStdDev  :=    stdDev14\n        pearsonR15 =>\n            detectedPeriod  := Periods.get(15)\n            detectedSlope   :=     slope15\n            detectedIntrcpt := intercept15\n            detectedStdDev  :=    stdDev15\n        pearsonR16 =>\n            detectedPeriod  := Periods.get(16)\n            detectedSlope   :=     slope16\n            detectedIntrcpt := intercept16\n            detectedStdDev  :=    stdDev16\n        pearsonR17 =>\n            detectedPeriod  := Periods.get(17)\n            detectedSlope   :=     slope17\n            detectedIntrcpt := intercept17\n            detectedStdDev  :=    stdDev17\n        pearsonR18 =>\n            detectedPeriod  := Periods.get(18)\n            detectedSlope   :=     slope18\n            detectedIntrcpt := intercept18\n            detectedStdDev  :=    stdDev18\n        => // pearsonR19\n            detectedPeriod  := Periods.get(19)\n            detectedSlope   :=     slope19\n            detectedIntrcpt := intercept19\n            detectedStdDev  :=    stdDev19\n\n    var line upperLine = na,   var linefill upperFill = na\n    var line  baseLine = na\n    var line lowerLine = na,   var linefill lowerFill = na\n\n    // Calculate start and end price based on detected slope and intercept\n    float startPrice = math.exp(detectedIntrcpt + detectedSlope * (detectedPeriod - 1))\n    float   endPrice = math.exp(detectedIntrcpt)\n    \n    int         startAtBar = bar_index - detectedPeriod + 1\n    var color ChannelColor = color.new(colorInput, channelTransparency)\n\n    if na(baseLine)\n        baseLine := line.new(startAtBar, startPrice, bar_index, endPrice,\n                             width=lineWidth, extend=EXTEND_STYLE,\n                             color=color.new(colorInputMidline, transpInput),\n                             style=midLineStyle == \"Dotted\" ? line.style_dotted :\n                                   midLineStyle == \"Dashed\" ? line.style_dashed : line.style_solid)\n    else\n        line.set_xy1(baseLine, startAtBar, startPrice)\n        line.set_xy2(baseLine,  bar_index,   endPrice)\n\n    float upperStartPrice = startPrice * math.exp(devMultiplier * detectedStdDev)\n    float upperEndPrice   =   endPrice * math.exp(devMultiplier * detectedStdDev)\n    if na(upperLine)\n        upperLine := line.new(startAtBar, upperStartPrice, bar_index, upperEndPrice,\n                             width=1, extend=EXTEND_STYLE,\n                             color=ChannelColor,\n                             style=lineStyle1 == \"Dotted\" ? line.style_dotted :\n                                   lineStyle1 == \"Dashed\" ? line.style_dashed : line.style_solid)\n    else\n        line.set_xy1  (upperLine, startAtBar, upperStartPrice)\n        line.set_xy2  (upperLine,  bar_index,   upperEndPrice)\n        line.set_color(upperLine, colorInput)\n\n    float lowerStartPrice = startPrice / math.exp(devMultiplier * detectedStdDev)\n    float   lowerEndPrice =   endPrice / math.exp(devMultiplier * detectedStdDev)\n    if na(lowerLine)\n        lowerLine := line.new(startAtBar, lowerStartPrice, bar_index, lowerEndPrice,\n                             width=1, extend=EXTEND_STYLE,\n                             color=ChannelColor,\n                             style=lineStyle1 == \"Dotted\" ? line.style_dotted :\n                                   lineStyle1 == \"Dashed\" ? line.style_dashed : line.style_solid)\n    else\n        line.set_xy1  (lowerLine, startAtBar, lowerStartPrice)\n        line.set_xy2  (lowerLine,  bar_index,   lowerEndPrice)\n        line.set_color(lowerLine, colorInput)\n\n    if na(upperFill)\n        upperFill := linefill.new(upperLine, baseLine, color=color.new(colorInput, fillTransparency))\n    if na(lowerFill)\n        lowerFill := linefill.new(baseLine, lowerLine, color=color.new(colorInput, fillTransparency))\n\n    var table t = na\n    if periodMode\n        t := table.new(position.bottom_center, 3, 2)\n    else\n        t := table.new(getTablePosition(tablePositionInput), 3, 2)\n\n    string text1 = periodMode ? \"Auto-Selected Period (Long Term): \" + str.tostring(detectedPeriod)\n                              : \"Auto-Selected Period: \"             + str.tostring(detectedPeriod)\n    var colorInputLight = color.new(colorInput, 40)\n    table.cell(t, 0, 0, text1, text_color=colorInputLight, text_size=textSizeInput == \"Large\" ? size.large : size.normal)\n    if showPearsonInput\n        table.cell(t, 1, 0, \"Pearson's R: \" + str.tostring(detectedSlope > 0.0 ? -highestPearsonR : highestPearsonR, \"#.###\"), text_color=colorInput, text_size=textSizeInput == \"Large\" ? size.large : size.normal)\n    else\n        table.cell(t, 1, 0, \"Trend Strength: \" + confidence(highestPearsonR), text_color=colorInput, text_size=textSizeInput == \"Large\" ? size.large : size.normal)","updated":"2024-05-01T06:37:51.194937Z","version":"16.0"}