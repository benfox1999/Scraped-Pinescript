{"created":"2024-05-19T14:02:18.231949Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"2.0","scriptAccess":"open_no_auth","scriptName":"Index Generator [MUQWISHI]","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © MUQWISHI\r\n\r\n//@version=5\r\nindicator(\"Index Generator [MUQWISHI]\")\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                   INPUT                                    |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\nvar G1 = \"Mode & Style Settings\"\r\n\r\n// Index Name\r\nindNme = input.string(\"Ｍｙ Ｏｉｌ ＆ Ｇａｓ Ｉｎｄｅｘ\", \"Index Name         \", inline = \"1\", group = G1, display = display.none)\r\n\r\n// Index Currency\r\ncurncy = input.string(\"USD\", \"Index Currency  \", inline = \"0\",  display = display.none)\r\n\r\n// Table Location \r\ntblPos = input.string(  \"Top Right\"    , \"Table Location   \", \r\n         [\"Top Right\" , \"Middle Right\" , \"Bottom Right\"     , \r\n          \"Top Center\", \"Middle Center\", \"Bottom Center\"    , \r\n          \"Top Left\"  , \"Middle Left\"  , \"Bottom Left\" ]    , inline = \"1\", display = display.none)\r\n\r\n// Table Size\r\ntblSiz = input.string(\"Small\", \"Table Size             \", \r\n         [\"Auto\", \"Huge\", \"Large\", \"Normal\", \"Small\", \"Tiny\"], inline = \"2\", display = display.none)\r\n\r\n// Table Colors\r\ntBgCol = input.color(#5c698c, \"   Title\",  inline = \"0\")\r\ncBgCol = input.color(#778899, \"     Cell\", inline = \"1\")\r\ntxtCol = input.color(#ffffff, \"    Text\",  inline = \"2\")\r\n\r\n// Sorting\r\nsortBy = input.string(\"Market Cap\", \"Sort Table By     \",             \r\n               [\"Symbols\", \"Change%\", \"Last\", \"Market Cap\", \"None\"], inline = \"4\", display = display.none)\r\nsortOd = input.string(\"Descending\", \"\", [\"Ascending\", \"Descending\"], inline = \"4\", display = display.none)\r\n\r\n// Index Plot Type\r\npltTyp = input.string(\"Candle\", \"Index Plot Type \", [\"Candle\", \"Bar\", \"Line\"], inline = \"5\", display = display.none)\r\npltCr1 = input.color(color.rgb(61, 158, 64), \"  \",                           inline = \"5\")\r\npltCr2 = input.color(color.red, \"\",                                          inline = \"5\")\r\n\r\n// Show & Hide\r\nindChk = input.bool(true, \"Show Index Title\")\r\ntblChk = input.bool(true, \"Show Index Holdings\")\r\npltChk = input.bool(true, \"Show Index Plot\")\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                  SYMBOLS                                   |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// Symbols Checkmark\r\nc01 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s01\")\r\nc02 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s02\")\r\nc03 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s03\")\r\nc04 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s04\")\r\nc05 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s05\")\r\nc06 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s06\")\r\nc07 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s07\")\r\nc08 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s08\")\r\nc09 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s09\")\r\nc10 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s10\")\r\nc11 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s11\")\r\nc12 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s12\")\r\nc13 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s13\")\r\nc14 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s14\")\r\nc15 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s15\")\r\nc16 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s16\")\r\nc17 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s17\")\r\nc18 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s18\")\r\nc19 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s19\")\r\nc20 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s20\")\r\nc21 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s21\")\r\nc22 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s22\")\r\nc23 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s23\")\r\nc24 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s24\")\r\nc25 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s25\")\r\nc26 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s26\")\r\nc27 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s27\")\r\nc28 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s28\")\r\nc29 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s29\")\r\nc30 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s30\")\r\nc31 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s31\")\r\nc32 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s32\")\r\nc33 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s33\")\r\nc34 = input.bool(true,  \"\", group = \"Symbols\", inline = \"s34\")\r\n\r\n// Symbol Input\r\ns01 = input.symbol(\"2222\",     \"\", group = \"Symbols\", inline = \"s01\", display = display.none)\r\ns02 = input.symbol(\"XOM\",      \"\", group = \"Symbols\", inline = \"s02\", display = display.none)\r\ns03 = input.symbol(\"CVX\",      \"\", group = \"Symbols\", inline = \"s03\", display = display.none)\r\ns04 = input.symbol(\"601857\",   \"\", group = \"Symbols\", inline = \"s04\", display = display.none)\r\ns05 = input.symbol(\"SHEL\",     \"\", group = \"Symbols\", inline = \"s05\", display = display.none)\r\ns06 = input.symbol(\"TTE\",      \"\", group = \"Symbols\", inline = \"s06\", display = display.none)\r\ns07 = input.symbol(\"COP\",      \"\", group = \"Symbols\", inline = \"s07\", display = display.none)\r\ns08 = input.symbol(\"HKEX:883\", \"\", group = \"Symbols\", inline = \"s08\", display = display.none)\r\ns09 = input.symbol(\"BP\",       \"\", group = \"Symbols\", inline = \"s09\", display = display.none)\r\ns10 = input.symbol(\"PBR\",      \"\", group = \"Symbols\", inline = \"s10\", display = display.none)\r\ns11 = input.symbol(\"ADX:TAQA\", \"\", group = \"Symbols\", inline = \"s11\", display = display.none)\r\ns12 = input.symbol(\"CNQ\",      \"\", group = \"Symbols\", inline = \"s12\", display = display.none)\r\ns13 = input.symbol(\"EQNR\",     \"\", group = \"Symbols\", inline = \"s13\", display = display.none)\r\ns14 = input.symbol(\"SLB\",      \"\", group = \"Symbols\", inline = \"s14\", display = display.none)\r\ns15 = input.symbol(\"600028\",   \"\", group = \"Symbols\", inline = \"s15\", display = display.none)\r\ns16 = input.symbol(\"SO\",       \"\", group = \"Symbols\", inline = \"s16\", display = display.none)\r\ns17 = input.symbol(\"MPC\",      \"\", group = \"Symbols\", inline = \"s17\", display = display.none)\r\ns18 = input.symbol(\"EOG\",      \"\", group = \"Symbols\", inline = \"s18\", display = display.none)\r\ns19 = input.symbol(\"ENB\",      \"\", group = \"Symbols\", inline = \"s19\", display = display.none)\r\ns20 = input.symbol(\"DUK\",      \"\", group = \"Symbols\", inline = \"s20\", display = display.none)\r\ns21 = input.symbol(\"PSX\",      \"\", group = \"Symbols\", inline = \"s21\", display = display.none)\r\ns22 = input.symbol(\"ROSN\",     \"\", group = \"Symbols\", inline = \"s22\", display = display.none)\r\ns23 = input.symbol(\"ADNOCGAS\", \"\", group = \"Symbols\", inline = \"s23\", display = display.none)\r\ns24 = input.symbol(\"EPD\",      \"\", group = \"Symbols\", inline = \"s24\", display = display.none)\r\ns25 = input.symbol(\"PXD\",      \"\", group = \"Symbols\", inline = \"s25\", display = display.none)\r\ns26 = input.symbol(\"VLO\",      \"\", group = \"Symbols\", inline = \"s26\", display = display.none)\r\ns27 = input.symbol(\"OXY\",      \"\", group = \"Symbols\", inline = \"s27\", display = display.none)\r\ns28 = input.symbol(\"LKOH\",     \"\", group = \"Symbols\", inline = \"s28\", display = display.none)\r\ns29 = input.symbol(\"ET\",       \"\", group = \"Symbols\", inline = \"s29\", display = display.none)\r\ns30 = input.symbol(\"E\",        \"\", group = \"Symbols\", inline = \"s30\", display = display.none)\r\ns31 = input.symbol(\"SU\",       \"\", group = \"Symbols\", inline = \"s31\", display = display.none)\r\ns32 = input.symbol(\"WMB\",      \"\", group = \"Symbols\", inline = \"s32\", display = display.none)\r\ns33 = input.symbol(\"HES\",      \"\", group = \"Symbols\", inline = \"s33\", display = display.none)\r\ns34 = input.symbol(\"OKE\",      \"\", group = \"Symbols\", inline = \"s34\", display = display.none)\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                CALCULATION                                 |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// +++++++++++++ Round Functions\r\ns(x) => str.tostring(x, format.volume)\r\nm(x) => math.round_to_mintick(x)\r\n\r\n// +++++++++++++ Create Matrices \r\nvalMtx = matrix.new<float> (0, 10, na)\r\ndatMtx = matrix.new<string>(0, 07, na)\r\nexclud = array.new<string>(1, \"\")\r\n\r\n// +++++++++++++ Main Function\r\nmain(flg) =>\r\n    var dec = string(na), var cnt = string(na), var sec = string(na), \r\n    var ind = string(na), var mkt = float(na) , \r\n    var c0  = float(na) , var c1  = float(na)\r\n\r\n    o = float(na), c = float(na), h = float(na), l = float(na), chg = float(na)\r\n    if flg\r\n        o := m(open),  c := m(close), h := m(high),  l := m(low)\r\n      \r\n        // Calculate Change         \r\n        c0 := session.ismarket ? close : c0\r\n        if timeframe.change(\"D\")\r\n            c1 := c0[1]\r\n        chg := (close - c1)/c1 * 100\r\n\r\n        // Get Symbol's Infos\r\n        if barstate.islastconfirmedhistory\r\n            dec := syminfo.description\r\n            cnt := syminfo.country\r\n            sec := syminfo.sector\r\n            ind := syminfo.industry\r\n\r\n        // Market Cap\r\n        shr = syminfo.shares_outstanding_total\r\n        if barstate.isrealtime\r\n            mkt := shr * c1\r\n        else\r\n            mkt := shr * close \r\n        \r\n    [o, c, h, l, mkt, chg, dec, cnt, sec, ind, time, timenow]\r\n\r\n// +++++++++++++ Security Function\r\nrequest(num, sym, flg) =>\r\n    [o, c, h, l, mkt, chg, dec, cnt, sec, ind, tim, real] = \r\n     request.security(ticker.modify(sym, syminfo.session), timeframe.period,\r\n      main(flg), ignore_invalid_symbol = true, currency = curncy)\r\n     \r\n    if flg\r\n        if na(mkt)\r\n            exclud.set(0, (exclud.get(0) != \"\" ? exclud.get(0) + \", \" : \"\") + str.split(sym, \":\").get(1))\r\n        else\r\n            if tim >= time\r\n                valMtx.add_row(valMtx.rows(), array.from(num, o, c, h, l, mkt, 0, tim, chg, real))\r\n            else\r\n                valMtx.add_row(valMtx.rows(), array.from(num, c, c, c, c, mkt, 0, tim, chg, real))\r\n\r\n            datMtx.add_row(datMtx.rows(), array.from(s(num), str.split(sym, \":\").get(1), str.split(sym, \":\").get(0), dec, cnt, sec, ind))\r\n\r\n// +++++++++++++ Import Data\r\nrequest(01, s01, c01),  request(02, s02, c02),  request(03, s03, c03),  \r\nrequest(04, s04, c04),  request(05, s05, c05),  request(06, s06, c06), \r\nrequest(07, s07, c07),  request(08, s08, c08),  request(09, s09, c09),  \r\nrequest(10, s10, c10),  request(11, s11, c11),  request(12, s12, c12),  \r\nrequest(13, s13, c13),  request(14, s14, c14),  request(15, s15, c15),  \r\nrequest(16, s16, c16),  request(17, s17, c17),  request(18, s18, c18),  \r\nrequest(19, s19, c19),  request(20, s20, c20),  request(21, s21, c21),  \r\nrequest(22, s22, c22),  request(23, s23, c23),  request(24, s24, c24),  \r\nrequest(25, s25, c25),  request(26, s26, c26),  request(27, s27, c27),  \r\nrequest(28, s28, c28),  request(29, s29, c29),  request(30, s30, c30),  \r\nrequest(31, s31, c31),  request(32, s32, c32),  request(33, s33, c33),  \r\nrequest(34, s34, c34),  //request(35, s35, c35), \r\n\r\n// +++++++++++++ Prepare Data\r\no = float(na), c = float(na), h = float(na), l = float(na)\r\nplotCond = valMtx.col(7).max() >= time // Does lastLin bar's time equal to max time of all holding?\r\nif valMtx.rows() > 0\r\n    totMrkt = valMtx.col(5).sum()\r\n\r\n    for i = 0 to valMtx.rows() - 1\r\n        wight = valMtx.get(i, 5)/totMrkt\r\n        valMtx.set(i, 6, wight)\r\n\r\n        if plotCond\r\n            o := nz(o) + wight * valMtx.get(i, 1)\r\n            c := nz(c) + wight * valMtx.get(i, 2)\r\n            h := nz(h) + wight * valMtx.get(i, 3)\r\n            l := nz(l) + wight * valMtx.get(i, 4)\r\n\r\n    if sortBy != \"None\"\r\n        order = sortOd == \"Ascending\" ? order.ascending : order.descending\r\n        if sortBy == \"Symbols\"\r\n            datMtx.sort(1, order)\r\n        else\r\n            a = sortBy == \"Change%\" ? 8 : sortBy == \"Last\" ? 2 : 6\r\n            valMtx.sort(a, order)\r\n\r\n// Index Change\r\nindexChange(c) =>\r\n    var c0     = 0.0   // Close at Regular Session.\r\n    var c1     = 0.0   // Close at Day Session.\r\n    var isChgD = false // Change in Day\r\n\r\n    c0   := not na(c) ? c : c0\r\n    isChgD := dayofmonth != dayofmonth[1] ? true : isChgD\r\n    if isChgD and not na(c) \r\n        c1 := c0[1], isChgD := false\r\n\r\n    [c0, (c0 - c1), (c0 - c1)/c1 * 100]\r\n \r\n[indxCls, indxChg, indxChgP] = indexChange(c)\r\n\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                  PLOTTING                                  |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\nvar cndColor1 = pltCr1, cndColor1 := na(c) ? cndColor1 : (c > o    ? pltCr1 : c < o    ? pltCr2 : pltCr1)\r\nvar cndColor2 = pltCr1, cndColor2 := na(c) ? cndColor2 : (c > c[1] ? pltCr1 : c < c[1] ? pltCr2 : pltCr1)\r\n\r\n// Candle Plot\r\nplotcandle(o, h, l, c, \"Candle\", cndColor1, color.gray, true, bordercolor = cndColor1, \r\n           display = pltChk and pltTyp == \"Candle\" ? display.all : display.none)\r\n\r\n// Bar Plot\r\nplotbar (o, h, l, c, \"Bar\", cndColor1, true,   display = pltChk and pltTyp == \"Bar\"  ? display.all : display.none)\r\n\r\n// Line Plot\r\nplot(c, \"Line\", cndColor2, 2, editable = true, display = pltChk and pltTyp == \"Line\" ? display.all : display.none)\r\n\r\n// Change Percentage \r\nplot(timeframe.isintraday ? (c-c[1])/c[1] * 100 : not na(c) ? indxChgP : na, \"\", cndColor1, editable = false, \r\n           display = pltChk ? display.status_line : display.none, format = format.percent)\r\n\r\n// Last Price Line\r\nvar line  lastLin = na \r\nvar label lastLab = na\r\nif not na(lastLin)\r\n    lastLin.set_xy1(bar_index    , indxCls)\r\n    lastLin.set_xy2(bar_index + 1, indxCls)\r\n    lastLin.set_color(pltTyp == \"Line\" ? cndColor2 : cndColor1)\r\n\r\nelse if pltChk\r\n    lastLin := line.new(0, 0, 0, 0, xloc.bar_index, extend.both, na, line.style_dotted, 1)\r\n\r\n\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// |                                   TABLE                                    |\r\n// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\r\n// +++++++++++++ Get Tbale Location & Size\r\nlocNsze(x) => \r\n    y   = str.split(str.lower(x), \" \")\r\n    out = \"\"\r\n    for i = 0 to y.size() - 1\r\n        out := out + y.get(i)\r\n        if i != y.size() - 1\r\n            out := out + \"_\"\r\n    out\r\n\r\n// +++++++++++++ Create Table\r\nvar table tbl = na \r\nvar nRows = 36\r\nvar nCols = 5\r\nif  nRows > 5\r\n    tbl := table.new(locNsze(tblPos), nCols, nRows, color(na), color(na), 1, color(na), 1)\r\n\r\n// +++++++++++++ Cell Function\r\ncell(col, row, txt, bCol, tCol) => \r\n    tbl.cell(col, row, txt, 0, 0, tCol, bgcolor = bCol, text_size = locNsze(tblSiz))\r\n\r\n\r\n// +++++++++++++ Draw Table\r\nif barstate.islast and not na(tbl)\r\n    tbl.clear(0, 0, nCols - 1, nRows - 1)\r\n\r\n    v = 0\r\n    if indChk\r\n        // Index\r\n        r = indxChg > 0 ? pltCr1 : indxChg < 0 ? pltCr2 : txtCol\r\n\r\n        cell(0, v, indNme + \"\\n\" +\r\n             str.tostring(indxCls > 1 ? math.round(indxCls, 2) : indxCls, \"0.00######\") + \"    \" + \r\n             str.tostring(indxCls > 1 ? math.round(indxChg, 2) : indxCls, \"0.00######\") + \"    \" +\r\n             str.tostring(indxChgP, format.percent), color(na), r), \r\n        tbl.cell_set_text_size(0, v, size.auto)\r\n        tbl.cell_set_text_font_family(0, v, font.family_default)\r\n        tbl.merge_cells(0, v, nCols - 1, v), \r\n        v += 1\r\n\r\n    if tblChk\r\n        excld = array.get(exclud, 0)\r\n\r\n        // Holdings\r\n        cell(0, v, \"Symbols\" + (excld != \"\" ? \"\\n⚠️\" : \"\"),                          tBgCol, txtCol)\r\n        if excld != \"\"\r\n            tbl.cell_set_tooltip(0, v,  \"These symbols are not included in the index's holdings\" + \r\n                          \" because their total number of shares are not provided/NaN.\\n\\n\"  + excld)\r\n\r\n        cell(1, v, \"Last\\n(\"+curncy+\")\",                                              tBgCol, txtCol)\r\n        cell(2, v, \"Chg%\\n(\" + (timeframe.isintraday ? \"D\" : timeframe.period) + \")\", tBgCol, txtCol)\r\n        cell(3, v, \"Market\\nCap\",                                                     tBgCol, txtCol)\r\n        cell(4, v, \"Weight%\",                                                         tBgCol, txtCol)\r\n        v += 1\r\n\r\n        if valMtx.rows() > 0\r\n            for i = 0 to valMtx.rows() - 1\r\n\r\n                // Symbol \r\n                idx   = datMtx.col(0).indexof(str.tostring(valMtx.get(i, 0)))\r\n                symbl = datMtx.get(idx, 1)\r\n                r     = sortBy == \"Symbols\" ? v + idx : v\r\n\r\n                cell(0, r, symbl, tBgCol, txtCol)\r\n                tbl.cell_set_tooltip(0, r, datMtx.get(idx, 3) +\r\n                 \"\\n=================================\"        +\r\n                 \"\\nExᴄʜᴀɴɢᴇ﹕\"    + datMtx.get(idx, 2)       +\r\n                 \"\\nCᴏᴜɴᴛʀʏ﹕\"     + datMtx.get(idx, 4)       +\r\n                 \"\\nSᴇᴄᴛᴏʀ﹕\"      + datMtx.get(idx, 5)       +\r\n                 \"\\nIɴᴅᴜsᴛʀɪᴀʟ﹕\"  + datMtx.get(idx, 6))\r\n\r\n                // Last \r\n                cell(1, r, str.tostring(valMtx.get(i, 2), \"0.00########\"), cBgCol, txtCol)\r\n\r\n                // Change\r\n                symChg = valMtx.get(i, 8)\r\n                symCol = symChg > 0 ? pltCr1 : symChg < 0 ? pltCr2 : cBgCol\r\n                cell(2, r, str.tostring(symChg, format.percent), symCol, txtCol)\r\n\r\n                // Market Cap\r\n                cell(3, r, str.tostring(valMtx.get(i, 5), format.volume), cBgCol, txtCol)\r\n\r\n                // Weight %\r\n                cell(4, r, str.tostring(valMtx.get(i, 6) * 100, format.percent), cBgCol, txtCol)\r\n                \r\n                v := sortBy == \"Symbols\" ? v : v + 1\r\n","updated":"2024-05-19T14:02:18.231949Z","version":"2.0"}