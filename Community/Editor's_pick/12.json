{"created":"2024-04-09T18:26:07.124666Z","extra":{"kind":"study","sourceInputsCount":0},"lastVersionMaj":"2.0","scriptAccess":"open_no_auth","scriptName":"Heat Map Seasons","source":"// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\r\n// © VanHe1sing\r\n\r\n//@version=5\r\nindicator(\"Heat Map Seasons\", shorttitle = \"HeatMapS\", overlay =  true)\r\n\r\n// ————— User Inputs \r\nint Length         = input.int(200, \"Length\")\r\nint heat_sensative = input.int(70, \"Heat Sensitivity\", step = 10)\r\nbool show_line     = input.bool(true, \"Show Regression Line?\")\r\n\r\n\r\n// ————— Normalization Function\r\nnormalization(src, mean)=> \r\n    norm = (src - mean) / ta.stdev(src, 200)\r\n    norm > 5 ? 5 : norm < -5 ? -5 : norm\r\n\r\n// ————— Rescale Function (when range is known).\r\nrescale(_src, _oldMin, _oldMax, _newMin, _newMax) =>\r\n    _newMin + (_newMax - _newMin) * (_src - _oldMin) / math.max(_oldMax - _oldMin, 10e-10)\r\n\r\n// ————— Regression Line Formula\r\nRegression_Line(length)=>\r\n    x  = bar_index\r\n    y  = hl2\r\n    x_ = ta.sma(x,length)\r\n    y_ = ta.sma(y,length)\r\n    mx = ta.stdev(x,length)\r\n    my = ta.stdev(y,length)\r\n    c  = ta.correlation(x,y,length)\r\n    // -\r\n    slope = c * (my/mx)\r\n    inter = y_ - slope*x_\r\n    // -\r\n    x*slope + inter\r\n\r\nRegression_Line = Regression_Line(Length)\r\n\r\n// ————— Heat Map Color Bars\r\ncolor_level = normalization(close - Regression_Line, 0)\r\n\r\ncolor = color_level > 0 \r\n ? color.from_gradient(color_level, 0, ta.highest(color_level, heat_sensative), color.yellow, color.red)\r\n : color.from_gradient(color_level, ta.lowest(color_level, heat_sensative), 0, color.aqua, color.yellow)\r\nbarcolor(color)\r\n\r\n// Plot of Regression_Line\r\nplot(show_line ? Regression_Line : na, color = color.rgb(120, 123, 134, 60), linewidth = 1\r\n , style = plot.style_stepline_diamond)\r\n\r\n\r\n// ————— Plot Gauge \r\ntbl = table.new(position.bottom_center, 100, 10)\r\n\r\nfor i = 0 to 29 by 1\r\n    table.cell(tbl, i, 1, \"\",\r\n     bgcolor = i < 15 \r\n      ? color.from_gradient(i, 0, 15, color.aqua, color.yellow) \r\n         : color.from_gradient(i, 15, 30, color.yellow, color.red)\r\n          )\r\n\r\n// Gauge point \r\ng_p = rescale(color_level, -4, 5, 0, 30)\r\n\r\n// Summer Winter marks and gauge point\r\ntable.cell(tbl, 0, 1, \"❆\", text_color = color.rgb(32, 91, 255), text_size = size.large, bgcolor = color.aqua)\r\ntable.cell(tbl, 29, 1, \"☀︎\", text_color = color.rgb(255, 238, 0), text_size = size.large, bgcolor = color.red)\r\n\r\ntable.cell(tbl, math.round(g_p < 0 ? 0 : g_p), 1, \"𖦹\", text_color = color.rgb(0, 0, 0), text_size = size.large\r\n , bgcolor = color)\r\n\r\ntable.cell(tbl, 35, 0,\r\n \"☀︎ - Summer\\n❆ - Winter\\n𖦹 - Current Season\\n \" + \"     Value: \" + str.tostring(math.round(g_p < 0 ? 0 : g_p)-15),\r\n  text_halign = text.align_left,\r\n   text_color = color.gray\r\n   )\r\n\r\n\r\n// ❅ ❆ ❃ ❊ ❉ ☀︎ 𖦹","updated":"2024-04-09T18:26:07.124666Z","version":"2.0"}